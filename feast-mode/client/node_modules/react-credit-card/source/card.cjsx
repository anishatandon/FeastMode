
React   = require('react')
Payment = require('payment')
images  = require('./card-images.js')

validate = Payment.fns
module.exports = React.createClass

  displayName: 'Card'

  getDefaultProps:->
    number: null
    cvc: null
    name: ''
    expiry: ''
    focused: null
    namePlaceholder: 'FULL NAME'
    expiryBefore: 'month/year'
    expiryAfter: 'valid thru'
    shinyAfterBack: ''
    type:null

  render:->
    isAmex = @state.type and @state.type.name is "amex"
    <div className = "#{exp.prefix}__container">
      <div className = { "#{exp.prefix} " + @typeClassName() + if @props.focused  is "cvc" and not isAmex then " #{exp.prefix}--flipped" else ""} >

        <div className = "#{exp.prefix}__front" >
          <div className = "#{exp.prefix}__lower">
            <div className = "#{exp.prefix}__shiny"/>
            <img
                 className = {"#{exp.prefix}__logo " + @typeClassName()}
                 src = {images[if @props.type then @props.type else @state.type.name]}
            />
            {if isAmex then <div className = {@displayClassName("cvc_front")}>{@getValue("cvc")}</div>}
            <div className = {@displayClassName("number")}>{@getValue("number")}</div>
            <div className = {@displayClassName("name")}  >{@getValue("name")}</div>
            <div
              className = {@displayClassName("expiry")}
              data-before = {@props.expiryBefore}
              data-after = {@props.expiryAfter}
                                                          >{@getValue("expiry")}</div>
          </div>
        </div>

        <div className = "#{exp.prefix}__back">
          <div className = "#{exp.prefix}__bar"/>
          <div className = {@displayClassName("cvc")}>{@getValue("cvc")}</div>
          <div className = "#{exp.prefix}__shiny" data-after = {@props.shinyAfterBack}/>
        </div>
      </div>
    </div>

  displayClassName:(base)->
    className = "#{exp.prefix}__" + base + " #{exp.prefix}__display"

    if @props.focused is base
      className += " #{exp.prefix}--focused"

    return className

  typeClassName:-> "#{exp.prefix}--" + if @props.type then @props.type else @state.type.name

  getValue:(name)-> @[name]()

  componentWillMount:                  -> @updateType(@props)
  componentWillReceiveProps:(nextProps)-> @updateType(nextProps)
  getInitialState:          -> type: {name:"unknown", length: 16}
  updateType:(props)->

    if !props.number
      return @setState type: name:"unknown", length: 16

    if type = @props.type or validate.cardType(props.number)
      if type is "amex"
        return @setState type: name:type, length: 15
      else
        return @setState type: name:type, length: 16

    return @setState type: name:"unknown", length: 16


  number:->
    if !@props.number
      string = ""
    else
      string = @props.number.toString()

    maxLength = @state.type.length

    if string.length > maxLength then string = string.slice(0,maxLength)

    while string.length < maxLength
      string += "•"

    if @state.type.name is "amex"
      space_index1 = 4;
      space_index2 = 10;

      string = string.substring(0, space_index1) + " " + string.substring(space_index1, space_index2) + " " + string.substring(space_index2)
    else
      amountOfSpaces = Math.ceil(maxLength/4)

      for i in [1...amountOfSpaces]
        space_index = (i*4 + (i - 1))
        string = string.slice(0, space_index) + " " + string.slice(space_index)

    return string

  name:->
    if @props.name is ""
      return @props.namePlaceholder
    else
      return @props.name

  expiry:->
    if @props.expiry is ""
      return "••/••"
    else

      expiry = @props.expiry.toString()

      expiryMaxLength = 6 # 2 for month and 4 for year

      if expiry.match /\//
        expiry = expiry.replace("/", "")

      if !expiry.match /^[0-9]*$/
        return "••/••"

      while expiry.length < 4
        expiry += "•"

      expiry = expiry.slice(0, 2) + "/" + expiry.slice(2, expiryMaxLength)

      return expiry

  cvc:->
    if @props.cvc is null
      return "•••"
    else
      return if @props.cvc.toString().length <= 4 then @props.cvc else @props.cvc.toString().slice(0, 4)


exp = module.exports
exp.prefix = "react-credit-card"
