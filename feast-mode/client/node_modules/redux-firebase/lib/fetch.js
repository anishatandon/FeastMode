'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _ActionCreators = require('./ActionCreators');

var _queries = require('./queries');

var _ramda = require('ramda');

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _reactRedux = require('react-redux');

var ids = 0;
function nextSID() {
  return 'hoc_subscriber_' + ++ids;
}

function select(query, rootState, rootProps) {
  return {
    firebaseResult: _queries.resolve(query, rootState, rootProps),
    rootProps: rootProps,
    rootState: rootState
  };
}

exports['default'] = function (defaultLoadingComponent) {
  return function (query) {
    return function (Component) {
      var LoadingComponent = arguments.length <= 1 || arguments[1] === undefined ? defaultLoadingComponent : arguments[1];

      return _reactRedux.connect(_ramda.partial(select, [query]))(_react2['default'].createClass({
        displayName: 'Firebase(' + Component.displayName + ')',

        propTypes: {
          dispatch: _react.PropTypes.func.isRequired,
          firebaseResult: _react.PropTypes.object,
          rootProps: _react.PropTypes.object,
          rootState: _react.PropTypes.object
        },

        componentWillMount: function componentWillMount() {
          this.updateSubscriptions(this.props);
        },

        componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
          this.updateSubscriptions(nextProps);
        },

        componentWillUnmount: function componentWillUnmount() {
          var dispatch = this.props.dispatch;

          dispatch(_ActionCreators.unsubscribe(this._sid, this._lastSubscriptions.toJS()));
        },

        render: function render() {
          if (_queries.isLoading(this.props.firebaseResult)) {
            return LoadingComponent ? _react2['default'].createElement(LoadingComponent, null) : null;
          }
          var _props = this.props;
          var firebaseResult = _props.firebaseResult;
          var rootProps = _props.rootProps;

          return _react2['default'].createElement(Component, _extends({}, rootProps, firebaseResult.toObject()));
        },

        updateSubscriptions: function updateSubscriptions(_ref) {
          var dispatch = _ref.dispatch;
          var rootProps = _ref.rootProps;
          var rootState = _ref.rootState;

          if (!this._sid) {
            this._sid = nextSID();
          }
          var newSubscriptions = _queries.subscriptions(query, rootState, rootProps);
          if (newSubscriptions.equals(this._lastSubscriptions)) {
            return;
          }
          this._lastSubscriptions = newSubscriptions;
          dispatch(_ActionCreators.subscribe(this._sid, this._lastSubscriptions.toJS()));
        }
      }));
    };
  };
};

module.exports = exports['default'];