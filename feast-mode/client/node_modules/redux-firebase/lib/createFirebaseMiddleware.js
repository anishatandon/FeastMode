'use strict';

exports.__esModule = true;
exports['default'] = createFirebaseMiddleware;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _ActionTypes = require('./ActionTypes');

var _debounce = require('debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _ActionCreators = require('./ActionCreators');

var _immutable = require('immutable');

var _ramda = require('ramda');

var _SubscriptionRecord = require('./SubscriptionRecord');

var _SubscriptionRecord2 = _interopRequireDefault(_SubscriptionRecord);

function toStringPath(arrayPath) {
  return arrayPath.join('/');
}

function subscribe(firebaseInstance, subscriptions, sid, path, handleUpdate, handleError) {
  if (subscriptions.has(path)) {
    return subscriptions.updateIn([path, 'subscribers'], function (subs) {
      return subs.add(sid);
    });
  }
  firebaseInstance.child(path).on('value', handleUpdate, handleError);
  return subscriptions.set(path, _SubscriptionRecord2['default']().set('handler', handleUpdate).updateIn(['subscribers'], function (subs) {
    return subs.add(sid);
  }));
}

function unsubscribe(subscriptions, sid, path) {
  if (subscriptions.getIn([path, 'subscribers']).size > 1) {
    return subscriptions.updateIn([path, 'subscribers'], function (subs) {
      return subs.remove(sid);
    });
  }
  return subscriptions['delete'](path);
}

function createFirebaseMiddleware(firebaseInstance) {
  var queue = _immutable.Map();
  var subscriptions = _immutable.Map();
  var syncUpdates = _debounce2['default'](function (store) {
    store.dispatch(_ActionCreators.sync(queue));
    queue = _immutable.Map();
  });
  var queueUpdate = function queueUpdate(store, stringPath, snapshot) {
    queue = queue.set(stringPath, _immutable.fromJS(snapshot.val()));
    syncUpdates(store);
  };
  var queueError = function queueError(store, stringPath, error) {
    if (__DEV__) {
      console.error('Error at `' + stringPath + '`: ' + error.message);
    }
    queue = queue.set(stringPath, undefined);
    syncUpdates(store);
  };
  return function (store) {
    return function (next) {
      return function (action) {
        if (action.type === _ActionTypes.PATHS_SUBSCRIBED) {
          action.payload.paths.forEach(function (path) {
            var stringPath = toStringPath(path);
            subscriptions = subscribe(firebaseInstance, subscriptions, action.payload.sid, stringPath, _ramda.partial(queueUpdate, [store, stringPath]), _ramda.partial(queueError, [store, stringPath]));
          });
        }
        if (action.type === _ActionTypes.PATHS_UNSUBSCRIBED) {
          action.payload.paths.forEach(function (path) {
            subscriptions = unsubscribe(subscriptions, action.payload.sid, toStringPath(path));
          });
        }
        return next(action);
      };
    };
  };
}

module.exports = exports['default'];