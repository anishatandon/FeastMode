'use strict';

exports.__esModule = true;
exports.getAuth = getAuth;
exports.deleteIn = deleteIn;
exports.subscribe = subscribe;
exports.transactionIn = transactionIn;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _firebase = require('firebase');

var _firebase2 = _interopRequireDefault(_firebase);

var _immutable = require('immutable');

var _ramda = require('ramda');

var instance = new _firebase2['default'](__FIREBASE__);

exports.instance = instance;
function promiseCall(method, args) {
  return new Promise(function (resolve, reject) {
    instance[method](args, function (error, data) {
      if (error) {
        reject(error);
      } else {
        resolve(data);
      }
    });
  });
}

var authWithPassword = _ramda.partial(promiseCall, ['authWithPassword']);
exports.authWithPassword = authWithPassword;
var changeEmail = _ramda.partial(promiseCall, ['changeEmail']);
exports.changeEmail = changeEmail;
var changePassword = _ramda.partial(promiseCall, ['changePassword']);
exports.changePassword = changePassword;
var createUser = _ramda.partial(promiseCall, ['createUser']);
exports.createUser = createUser;
var removeUser = _ramda.partial(promiseCall, ['removeUser']);
exports.removeUser = removeUser;
var resetPassword = _ramda.partial(promiseCall, ['resetPassword']);

exports.resetPassword = resetPassword;

function getAuth() {
  return instance.getAuth();
}

function serializeData(data) {
  if (!data || typeof data.toJS !== 'function') {
    return data;
  }
  return data.toJS();
}

function baseWrite(operation, keyPath, data) {
  var ref = instance.child(keyPath.join('/'));
  return new Promise(function (resolve, reject) {
    var newRef = ref[operation](serializeData(data), function (err) {
      if (err) {
        reject(err);
      } else {
        resolve([data, (newRef || ref).path.slice()]);
      }
    });
  });
}

var setIn = _ramda.partial(baseWrite, ['set']);

exports.setIn = setIn;

function deleteIn(keyPath) {
  return setIn(keyPath, null);
}

var pushIn = _ramda.partial(baseWrite, ['push']);

exports.pushIn = pushIn;

function subscribe(keyPath, handler) {
  return instance.child(keyPath.join('/')).on('value', handler);
}

function transactionIn(keyPath, operation) {
  var ref = instance.child(keyPath.join('/'));
  return new Promise(function (resolve, reject) {
    ref.transaction(function (currentData) {
      return serializeData(operation(_immutable.fromJS(currentData)));
    }, function (error, committed, snapshot) {
      if (error) {
        reject(error);
      } else if (!committed) {
        reject(null);
      } else {
        resolve([_immutable.fromJS(snapshot.val()), ref.path.n]);
      }
    });
  });
}

var updateIn = _ramda.partial(baseWrite, ['update']);
exports.updateIn = updateIn;