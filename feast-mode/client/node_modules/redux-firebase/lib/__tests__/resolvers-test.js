'use strict';

var _immutable = require('immutable');

jest.dontMock('../resolvers').dontMock('../queries');

describe('resolvers', function () {
  var resolvers = undefined;

  beforeEach(function () {
    resolvers = require('../resolvers');
  });

  it('retrieves a value', function () {
    var _resolvers = resolvers;
    var value = _resolvers.value;

    var mockVal = 'testing-wow';
    expect(value(mockVal)).toBe(mockVal);
  });

  it('constructs a proper get query', function () {
    var _resolvers2 = resolvers;
    var get = _resolvers2.get;
    var value = _resolvers2.value;

    expect(get('testing')).toEqual({
      testing: value
    });
  });

  it('constructs a valid getIn query', function () {
    var _resolvers3 = resolvers;
    var getIn = _resolvers3.getIn;
    var value = _resolvers3.value;

    expect(getIn('one', 'two', 'three')).toEqual({
      one: {
        two: {
          three: value
        }
      }
    });
  });

  it('constructs a valid index query', function () {
    var _resolvers4 = resolvers;
    var index = _resolvers4.index;

    var indexResolver = index(['users']);
    var mockCache = _immutable.fromJS({
      users: {
        '123': {
          name: 'one',
          friends: {
            '456': true,
            '789': true
          }
        },
        '456': { name: 'two' },
        '789': { name: 'three' }
      }
    });
    var mockState = { firebase: mockCache };
    var value = mockCache.getIn(['users', '123', 'friends']);
    expect(indexResolver.subscriptions(value)).toEqual([['users', '456'], ['users', '789']]);
    expect(indexResolver.values(value, mockState, {}).toJS()).toEqual({
      '456': { name: 'two' },
      '789': { name: 'three' }
    });
  });
});