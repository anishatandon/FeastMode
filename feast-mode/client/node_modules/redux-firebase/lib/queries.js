'use strict';

exports.__esModule = true;
exports.getCache = getCache;
exports.flatten = flatten;
exports.hydrate = hydrate;
exports.isLoading = isLoading;
exports.resolve = resolve;
exports.subscriptions = subscriptions;

var _immutable = require('immutable');

var _resolvers = require('./resolvers');

var _types = require('./types');

var CACHE_KEY = 'firebase';

exports.CACHE_KEY = CACHE_KEY;

function getCache(state) {
  return state[CACHE_KEY] || _immutable.Map();
}

function flatten(child, cache) {
  return _immutable.Map().withMutations(function (resolvers) {
    function setResolvers(keyPath, child) {
      if (child !== _resolvers.value && typeof child === 'function') {
        if (!cache.hasIn(keyPath)) {
          resolvers.set(keyPath, _resolvers.value);
          return;
        }
        setResolvers(keyPath, child(cache.getIn(keyPath)));
        return;
      }
      if (child === _resolvers.value || _types.isResolver(child)) {
        resolvers.set(keyPath, child);
        return;
      }
      if (_immutable.Map.isMap(child)) {
        child.forEach(function (grandChild, key) {
          return setResolvers(keyPath.push(key), grandChild);
        });
        return;
      }
      console.warn('flatten: invalid value `%s` at `%s`', child, keyPath);
    }
    child.forEach(function (val, key) {
      return setResolvers(_immutable.List.of(key), val);
    });
  });
}

function hydrate(query, state, props) {
  return flatten(_immutable.fromJS(query(state, props)), getCache(state));
}

function isLoading(results) {
  if (_types.isUnresolved(results)) {
    return true;
  }
  if (_immutable.Iterable.isIterable(results)) {
    return results.some(isLoading);
  }
  return false;
}

function resolve(query, state) {
  var props = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

  var cache = getCache(state);
  return hydrate(query, state, props).reduce(function (results, resolver, keyPath) {
    if (!cache.hasIn(keyPath)) {
      return results.setIn(keyPath, _types.UNRESOLVED);
    }
    if (typeof resolver === 'function') {
      return results.setIn(keyPath, resolver(cache.getIn(keyPath), state, props));
    }
    if (_types.isResolver(resolver)) {
      return results.setIn(keyPath, resolver.resolve(cache.getIn(keyPath), cache));
    }
    console.warn('resolve: invalid value `%s` at `%s`', resolver, keyPath);
  }, _immutable.Map());
}

function subscriptions(query, state, props) {
  var cache = getCache(state);
  return hydrate(query, state, props).reduce(function (subs, child, keyPath) {
    if (!_types.isResolver(child)) {
      return subs.add(keyPath);
    }
    return subs.union(child.subscriptions(cache.getIn(keyPath) || _types.UNRESOLVED, keyPath, cache));
  }, _immutable.Set());
}