{"ast":null,"code":"var _jsxFileName = \"/Users/summer19/Desktop/FeastMode/feast-mode/client/src/components/Location/Map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    const _this$state$currentLo = this.state.currentLocation,\n          lat = _this$state$currentLo.lat,\n          lng = _this$state$currentLo.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let _this$props = this.props,\n          initialCenter = _this$props.initialCenter,\n          zoom = _this$props.zoom;\n      const _this$state$currentLo2 = this.state.currentLocation,\n            lat = _this$state$currentLo2.lat,\n            lng = _this$state$currentLo2.lng;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      });\n      this.map = new maps.Map(node, mapConfig);\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const curr = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(curr.lat, curr.lng);\n      map.panTo(center);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Loading map...\");\n  }\n\n}\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  initialCenter: PropTypes.object,\n  centerAroundCurrentLocation: PropTypes.bool\n};\nMap.defaultProps = {\n  zoom: 13,\n  // San Francisco, by default\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: false\n};\nexport default Map;","map":{"version":3,"sources":["/Users/summer19/Desktop/FeastMode/feast-mode/client/src/components/Location/Map.js"],"names":["React","ReactDOM","PropTypes","Map","Component","constructor","props","state","currentLocation","lat","lng","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","maps","mapRef","refs","map","node","findDOMNode","initialCenter","zoom","center","LatLng","mapConfig","Object","assign","curr","panTo","render","propTypes","object","number","bool","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAKA,OAAO,MAAMC,GAAN,SAAkBH,KAAK,CAACI,SAAxB,CAAkC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,kCAGI,KAAKC,KAAL,CAAWC,eAHf;AAAA,UAGRC,GAHQ,yBAGRA,GAHQ;AAAA,UAGHC,GAHG,yBAGHA,GAHG;AAIf,SAAKH,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE;AACbC,QAAAA,GAAG,EAAEA,GADQ;AAEbC,QAAAA,GAAG,EAAEA;AAFQ;AADR,KAAb;AAMH;;AAGDC,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAID,SAAS,CAACE,MAAV,KAAqB,KAAKR,KAAL,CAAWQ,MAApC,EAA4C;AACxC,WAAKC,OAAL;AACH;;AACD,QAAIF,SAAS,CAACL,eAAV,KAA8B,KAAKD,KAAL,CAAWC,eAA7C,EAA8D;AAC1D,WAAKQ,WAAL;AACH;AACF;;AAGHC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKX,KAAL,CAAWY,2BAAf,EAA4C;AACxC,UAAIC,SAAS,IAAIA,SAAS,CAACC,WAA3B,EAAwC;AACpCD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,GAAD,IAAS;AAC9C,gBAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;AACA,eAAKC,QAAL,CAAc;AACVhB,YAAAA,eAAe,EAAE;AACbC,cAAAA,GAAG,EAAEc,MAAM,CAACE,QADC;AAEbf,cAAAA,GAAG,EAAEa,MAAM,CAACG;AAFC;AADP,WAAd;AAMH,SARD;AASH;AACJ;;AACD,SAAKX,OAAL;AACH;;AAGDA,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKT,KAAL,IAAc,KAAKA,KAAL,CAAWQ,MAA7B,EAAqC;AACrC;AADqC,YAE9BA,MAF8B,GAEpB,KAAKR,KAFe,CAE9BQ,MAF8B;AAGrC,YAAMa,IAAI,GAAGb,MAAM,CAACa,IAApB;AAEA,YAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUC,GAAzB;AACA,YAAMC,IAAI,GAAG9B,QAAQ,CAAC+B,WAAT,CAAqBJ,MAArB,CAAb;AANqC,wBAQT,KAAKtB,KARI;AAAA,UAQhC2B,aARgC,eAQhCA,aARgC;AAAA,UAQjBC,IARiB,eAQjBA,IARiB;AAAA,qCASlB,KAAK3B,KAAL,CAAWC,eATO;AAAA,YAS9BC,GAT8B,0BAS9BA,GAT8B;AAAA,YASzBC,GATyB,0BASzBA,GATyB;AAUrC,YAAMyB,MAAM,GAAG,IAAIR,IAAI,CAACS,MAAT,CAAgB3B,GAAhB,EAAqBC,GAArB,CAAf;AACA,YAAM2B,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAChCJ,QAAAA,MAAM,EAAEA,MADwB;AAEhCD,QAAAA,IAAI,EAAEA;AAF0B,OAAlB,CAAlB;AAKA,WAAKJ,GAAL,GAAW,IAAIH,IAAI,CAACxB,GAAT,CAAa4B,IAAb,EAAmBM,SAAnB,CAAX;AACC;AACJ;;AAGDrB,EAAAA,WAAW,GAAG;AACV,UAAMc,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMU,IAAI,GAAG,KAAKjC,KAAL,CAAWC,eAAxB;AAEA,UAAMM,MAAM,GAAG,KAAKR,KAAL,CAAWQ,MAA1B;AACA,UAAMa,IAAI,GAAGb,MAAM,CAACa,IAApB;;AAEA,QAAIG,GAAJ,EAAS;AACL,UAAIK,MAAM,GAAG,IAAIR,IAAI,CAACS,MAAT,CAAgBI,IAAI,CAAC/B,GAArB,EAA0B+B,IAAI,CAAC9B,GAA/B,CAAb;AACAoB,MAAAA,GAAG,CAACW,KAAJ,CAAUN,MAAV;AACH;AACN;;AAGCO,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ;AAKH;;AApFoC;AAuFvCvC,GAAG,CAACwC,SAAJ,GAAgB;AACd7B,EAAAA,MAAM,EAAEZ,SAAS,CAAC0C,MADJ;AAEdV,EAAAA,IAAI,EAAEhC,SAAS,CAAC2C,MAFF;AAGdZ,EAAAA,aAAa,EAAE/B,SAAS,CAAC0C,MAHX;AAId1B,EAAAA,2BAA2B,EAAEhB,SAAS,CAAC4C;AAJzB,CAAhB;AAMA3C,GAAG,CAAC4C,YAAJ,GAAmB;AACjBb,EAAAA,IAAI,EAAE,EADW;AAEjB;AACAD,EAAAA,aAAa,EAAE;AACbxB,IAAAA,GAAG,EAAE,SADQ;AAEbC,IAAAA,GAAG,EAAE,CAAC;AAFO,GAHE;AAOjBQ,EAAAA,2BAA2B,EAAE;AAPZ,CAAnB;AAWF,eAAef,GAAf","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types';\n\n\n\n\nexport class Map extends React.Component {\n    constructor(props) {\n        super(props);\n    \n        const {lat, lng} = this.state.currentLocation;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n      }\n    \n\n    componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((pos) => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    })\n                })\n            }\n        }\n        this.loadMap();\n    }\n\n  \n    loadMap() {\n        if (this.props && this.props.google) {\n        // google is available\n        const {google} = this.props;\n        const maps = google.maps;\n\n        const mapRef = this.refs.map;\n        const node = ReactDOM.findDOMNode(mapRef);\n\n        let {initialCenter, zoom} = this.props;\n        const {lat, lng} = this.state.currentLocation;\n        const center = new maps.LatLng(lat, lng);\n        const mapConfig = Object.assign({}, {\n            center: center,\n            zoom: zoom\n        })\n\n        this.map = new maps.Map(node, mapConfig);\n        }\n    }\n\n\n    recenterMap() {\n        const map = this.map;\n        const curr = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(curr.lat, curr.lng)\n            map.panTo(center)\n        }\n  }\n    \n\n    render() {\n        return (\n            <div ref='map'>\n                Loading map...\n            </div>\n        )\n    }\n  }\n\n  Map.propTypes = {\n    google: PropTypes.object,\n    zoom: PropTypes.number,\n    initialCenter: PropTypes.object,\n    centerAroundCurrentLocation: PropTypes.bool\n  }\n  Map.defaultProps = {\n    zoom: 13,\n    // San Francisco, by default\n    initialCenter: {\n      lat: 37.774929,\n      lng: -122.419416\n    },\n    centerAroundCurrentLocation: false\n  }\n\n\nexport default Map"]},"metadata":{},"sourceType":"module"}