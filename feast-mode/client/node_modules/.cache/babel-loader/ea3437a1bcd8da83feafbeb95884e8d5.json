{"ast":null,"code":"import * as yup from 'yup';\nexport const ProfileEditSchema = [yup.object().shape({\n  firstName: yup.string(\"Must be a valid name\").required(\"Please enter your name\"),\n  lastName: yup.string(\"Must be a valid name\"),\n  username: yup.string(\"Must be a valid username\").min(4, \"Username must be at least 4 characters\").required(\"Please enter a username\"),\n  email: yup.string(\"Must be a valid email\").email(\"Must be a valid email\").required(\"Please enter an email\"),\n  phone: yup.number().typeError('Please enter a valid phone number').positive('Please enter a valid phone number').required('Please enter a phone number'),\n  passwordOne: yup.string().min(8, \"Password must be at least 8 characters\"),\n  passwordTwo: yup.string().when(\"passwordOne\", {\n    is: function (value) {\n      return value.length > 0;\n    },\n    then: yup.string().oneOf([yup.ref(\"passwordOne\"), null], \"Passwords don't match\").required(\"Make sure you can remember your password!\")\n  }),\n  creditCard: yup.number().typeError('Please enter a valid credit card number').positive('Please enter a valid credit card number').required('Please enter your credit card number'),\n  expDate: yup.number().typeError('Please enter a valid expiration date').positive('Please enter a valid expiration date').test('len', 'Must be of the form MMYY', function (value) {\n    if (!value) {\n      return false;\n    }\n\n    return value.toString().length === 4;\n  }) // makes sure it is exactly four numbers\n  .required('Please enter the expiration date'),\n  secCode: yup.number().typeError('Please enter a valid security code').positive('Please enter a valid security code').required('Please enter the security code'),\n  creditCardType: yup.string().required(\"Credit card type is required\")\n})];\nexport const PasswordRecoverySchema = yup.object().shape({\n  email: yup.string(\"Must be a valid email\").email(\"Must be a valid email\").required(\"Please enter your email\")\n});","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/Profile/ProfileSchemas.js"],"names":["yup","ProfileEditSchema","object","shape","firstName","string","required","lastName","username","min","email","phone","number","typeError","positive","passwordOne","passwordTwo","when","is","value","length","then","oneOf","ref","creditCard","expDate","test","toString","secCode","creditCardType","PasswordRecoverySchema"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,OAAO,MAAMC,iBAAiB,GAAG,CAEjCD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACfC,EAAAA,SAAS,EACLJ,GAAG,CAACK,MAAJ,CAAW,sBAAX,EACCC,QADD,CACU,wBADV,CAFW;AAKfC,EAAAA,QAAQ,EACJP,GAAG,CAACK,MAAJ,CAAW,sBAAX,CANW;AAQfG,EAAAA,QAAQ,EACJR,GAAG,CAACK,MAAJ,CAAW,0BAAX,EACCI,GADD,CACK,CADL,EACQ,wCADR,EAECH,QAFD,CAEU,yBAFV,CATW;AAafI,EAAAA,KAAK,EACDV,GAAG,CAACK,MAAJ,CAAW,uBAAX,EACCK,KADD,CACO,uBADP,EAECJ,QAFD,CAEU,uBAFV,CAdW;AAkBfK,EAAAA,KAAK,EACDX,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,mCADX,EAECC,QAFD,CAEU,mCAFV,EAGCR,QAHD,CAGU,6BAHV,CAnBW;AAwBfS,EAAAA,WAAW,EACPf,GAAG,CAACK,MAAJ,GACCI,GADD,CACK,CADL,EACQ,wCADR,CAzBW;AA4BfO,EAAAA,WAAW,EACPhB,GAAG,CAACK,MAAJ,GAAaY,IAAb,CAAkB,aAAlB,EAAiC;AAC7BC,IAAAA,EAAE,EAAE,UAASC,KAAT,EAAgB;AAAE,aAAOA,KAAK,CAACC,MAAN,GAAe,CAAtB;AAAwB,KADjB;AAE7BC,IAAAA,IAAI,EAAErB,GAAG,CAACK,MAAJ,GACDiB,KADC,CACK,CAACtB,GAAG,CAACuB,GAAJ,CAAQ,aAAR,CAAD,EAAyB,IAAzB,CADL,EACqC,uBADrC,EAEDjB,QAFC,CAEQ,2CAFR;AAFuB,GAAjC,CA7BW;AAoCfkB,EAAAA,UAAU,EACNxB,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,yCADX,EAECC,QAFD,CAEU,yCAFV,EAGCR,QAHD,CAGU,sCAHV,CArCW;AA0CfmB,EAAAA,OAAO,EACHzB,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,sCADX,EAECC,QAFD,CAEU,sCAFV,EAGCY,IAHD,CAGM,KAHN,EAGa,0BAHb,EAGyC,UAASP,KAAT,EAAgB;AACrD,QAAI,CAACA,KAAL,EAAY;AACR,aAAO,KAAP;AACH;;AACD,WAAOA,KAAK,CAACQ,QAAN,GAAiBP,MAAjB,KAA4B,CAAnC;AACC,GARL,EAQO;AARP,GASCd,QATD,CASU,kCATV,CA3CW;AAsDfsB,EAAAA,OAAO,EACH5B,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,oCADX,EAECC,QAFD,CAEU,oCAFV,EAGCR,QAHD,CAGU,gCAHV,CAvDW;AA4DfuB,EAAAA,cAAc,EACV7B,GAAG,CAACK,MAAJ,GACCC,QADD,CACU,8BADV;AA7DW,CAAnB,CAFiC,CAA1B;AAoEP,OAAO,MAAMwB,sBAAsB,GAAG9B,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACrDO,EAAAA,KAAK,EAAEV,GAAG,CAACK,MAAJ,CAAW,uBAAX,EAAoCK,KAApC,CAA0C,uBAA1C,EAAmEJ,QAAnE,CAA4E,yBAA5E;AAD8C,CAAnB,CAA/B","sourcesContent":["import * as yup from 'yup'\n\nexport const ProfileEditSchema = [\n\nyup.object().shape({\n    firstName:\n        yup.string(\"Must be a valid name\")\n        .required(\"Please enter your name\"),\n\n    lastName:\n        yup.string(\"Must be a valid name\"),\n\n    username:\n        yup.string(\"Must be a valid username\")\n        .min(4, \"Username must be at least 4 characters\")\n        .required(\"Please enter a username\"),\n\n    email:\n        yup.string(\"Must be a valid email\")\n        .email(\"Must be a valid email\")\n        .required(\"Please enter an email\"),\n\n    phone:\n        yup.number()\n        .typeError('Please enter a valid phone number')\n        .positive('Please enter a valid phone number')\n        .required('Please enter a phone number'),\n\n    passwordOne: \n        yup.string()\n        .min(8, \"Password must be at least 8 characters\"),\n\n    passwordTwo:\n        yup.string().when(\"passwordOne\", {\n            is: function(value) { return value.length > 0},\n            then: yup.string()\n                .oneOf([yup.ref(\"passwordOne\"), null], \"Passwords don't match\")\n                .required(\"Make sure you can remember your password!\")\n        }),\n        \n    creditCard:\n        yup.number()\n        .typeError('Please enter a valid credit card number')\n        .positive('Please enter a valid credit card number')\n        .required('Please enter your credit card number'),\n\n    expDate:\n        yup.number()\n        .typeError('Please enter a valid expiration date')\n        .positive('Please enter a valid expiration date')\n        .test('len', 'Must be of the form MMYY', function(value) { \n            if (!value) {\n                return false\n            }\n            return value.toString().length === 4 \n            }) // makes sure it is exactly four numbers\n        .required('Please enter the expiration date'),\n        \n    secCode:\n        yup.number()\n        .typeError('Please enter a valid security code')\n        .positive('Please enter a valid security code')\n        .required('Please enter the security code'),\n    \n    creditCardType:\n        yup.string()\n        .required(\"Credit card type is required\"),\n}),\n]\n\nexport const PasswordRecoverySchema = yup.object().shape({\n    email: yup.string(\"Must be a valid email\").email(\"Must be a valid email\").required(\"Please enter your email\"),\n})\n"]},"metadata":{},"sourceType":"module"}