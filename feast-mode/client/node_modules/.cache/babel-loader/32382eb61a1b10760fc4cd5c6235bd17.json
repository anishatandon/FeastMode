{"ast":null,"code":"/**\n * ez-pizza-api Module\n * @module ez-pizza-api\n */\nconst fetch = require('node-fetch');\n\nconst orderTypes = {\n  Delivery: 'Delivery',\n  Carryout: 'Carryout'\n};\nconst API_URL = 'https://order.dominos.com/power';\nconst TRACKER_URL = 'https://tracker.dominos.com/tracker-presentation-service/v2/orders/stores';\n/**\n * Get all stores near an address.\n * @param {string} orderType - The type of order. Can be Delivery or Carryout.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} [streetAddress] - The house number and street name.\n * @return {Promise<object>} The list of stores near the given address.\n */\n\nasync function getStoresNearAddress(orderType, cityRegionOrPostalCode = '', streetAddress = '') {\n  const response = await fetch(\"\".concat(API_URL, \"/store-locator?type=\").concat(orderType, \"&c=\").concat(cityRegionOrPostalCode, \"&s=\").concat(streetAddress));\n  return response.json();\n}\n/**\n * Get the nearest store that delivers to a given address.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} streetAddress - The house number and street name.\n * @return {Promise<object>} The nearest store that will deliver to the given address.\n */\n\n\nasync function getNearestDeliveryStore(cityRegionOrPostalCode = '', streetAddress = '') {\n  const storesResult = await getStoresNearAddress(orderTypes.Delivery, cityRegionOrPostalCode, streetAddress);\n  return storesResult.Stores.find(store => store.IsDeliveryStore);\n}\n/**\n * Get all info about a given store including: Hours, Wait Time etc.\n * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n * @return {Promise<object>} The info about the given store.\n */\n\n\nasync function getStoreInfo(storeId) {\n  const response = await fetch(\"\".concat(API_URL, \"/store/\").concat(storeId, \"/profile\"));\n  return response.json();\n}\n/**\n * Get all menu info for a given store including Product Codes, Options and Coupons\n * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n * @return {Promise<object>} The menu for the given store.\n */\n\n\nasync function getStoreMenu(storeId) {\n  const response = await fetch(\"\".concat(API_URL, \"/store/\").concat(storeId, \"/menu?lang=en&structured=true\"));\n  return response.json();\n}\n/**\n * Get detailed information about a given coupon.\n * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n * @param {string} couponId - The CouponID of the given coupon (Can be found using getStoreMenu).\n * @return {Promise<object>} The info about the given coupon.\n */\n\n\nasync function getStoreCoupon(storeId, couponId) {\n  const response = await fetch(\"\".concat(API_URL, \"/store/\").concat(storeId, \"/coupon/\").concat(couponId, \"?lang=en\"));\n  return response.json();\n}\n\nasync function postOrder(order, endpoint) {\n  const response = await fetch(\"\".concat(API_URL, \"/\").concat(endpoint), {\n    headers: {\n      'content-type': 'application/json; charset=UTF-8'\n    },\n    body: JSON.stringify(order),\n    method: 'POST'\n  });\n  return response.json();\n}\n/**\n * Validate the information for a given Order.\n * @param {object} order - The order to validate.\n * @return {Promise<object>} The validation response.\n */\n\n\nasync function validateOrder(order) {\n  return postOrder(order, 'validate-order');\n}\n/**\n * Get the total price for a given Order. (Including Coupon discounts and added Tax).\n * You should make sure your order is valid with validateOrder before calling priceOrder.\n * @param {object} order - The order to price.\n * @return {Promise<object>} The pricing response.\n */\n\n\nasync function priceOrder(order) {\n  return postOrder(order, 'price-order');\n}\n/**\n * Place the order.\n * You will need to call priceOrder first to obtain the Amount to set on the payment object.\n * You can add a payment method and amount to the order.Order.Payments array OR pass the payment as a second argument.\n * @param {object} order - The order to price.\n * @param {object} [payment] - The payment information.\n * @return {Promise<object>} The order response including a completed order number (If the order goes through.).\n */\n\n\nasync function placeOrder(order, payment = null) {\n  if (payment) {\n    order.Order.Payments.push(payment);\n  }\n\n  return postOrder(order, 'place-order');\n}\n/**\n * Track an order.\n * @param {string} storeId - The id of the store where the order was placed.\n * @param {string} orderNumber - The id of the order number to track. Can be found on the StoreOrderID property of a placed order response.\n * @return {Promise<object>} The tracking response.\n */\n\n\nasync function trackOrder(storeId, orderNumber) {\n  const response = await fetch(\"\".concat(TRACKER_URL, \"/\").concat(storeId, \"/orderkeys/\").concat(orderNumber), {\n    headers: {\n      'DPZ-Market': 'UNITED_STATES',\n      'DPZ-Language': 'en'\n    }\n  });\n  return response.json();\n}\n\nmodule.exports = {\n  orderTypes,\n  getStoresNearAddress,\n  getNearestDeliveryStore,\n  getStoreInfo,\n  getStoreMenu,\n  getStoreCoupon,\n  validateOrder,\n  priceOrder,\n  placeOrder,\n  trackOrder\n};","map":null,"metadata":{},"sourceType":"script"}