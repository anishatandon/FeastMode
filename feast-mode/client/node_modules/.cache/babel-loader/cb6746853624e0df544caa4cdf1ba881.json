{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/Profile/PasswordRecovery.js\";\nimport React, { useEffect } from 'react';\nimport { Form, Field, ErrorMessage, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../backend/store/actions';\nimport { PasswordRecoverySchema } from './ProfileSchemas.js';\n\nconst PasswordRecoveryForm = ({\n  sendEmail,\n  loading,\n  error,\n  cleanUp\n}) => {\n  let displayError;\n\n  if (error) {\n    displayError = {\n      display: \"block\"\n    };\n  } else {\n    displayError = {\n      display: \"none\"\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      cleanUp();\n    };\n  }, [cleanUp]);\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\"\n    },\n    validationSchema: PasswordRecoverySchema,\n    onSubmit: async (values, {\n      resetForm,\n      setSubmitting\n    }) => {\n      await sendEmail(values);\n      setSubmitting(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, ({\n    errors,\n    touched,\n    isSubmitting\n  }) => React.createElement(\"div\", {\n    className: \"password-change-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \" Recover your password \"), React.createElement(Form, {\n    className: \"classic-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: [\"text-input\", touched.email && errors.email && \"text-error\"].join(' '),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \" Email \"), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"email\",\n    type: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }), React.createElement(ErrorMessage, {\n    render: msg => React.createElement(\"p\", {\n      className: \"error-msg\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, \" \", msg, \" \"),\n    name: \"email\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  })), React.createElement(\"p\", {\n    style: displayError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, error), React.createElement(\"button\", {\n    type: \"submit\",\n    disabled: isSubmitting,\n    className: \"classic-button\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Send Recover Email\"))));\n};\n\nconst mapStateToProps = ({\n  auth\n}) => ({\n  loading: auth.recoverPassword.loading,\n  error: auth.recoverPassword.error\n});\n\nconst mapDispatchToProps = {\n  sendEmail: actions.recoverPassword,\n  cleanUp: actions.clean\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordRecoveryForm);","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/Profile/PasswordRecovery.js"],"names":["React","useEffect","Form","Field","ErrorMessage","Formik","connect","actions","PasswordRecoverySchema","PasswordRecoveryForm","sendEmail","loading","error","cleanUp","displayError","display","email","values","resetForm","setSubmitting","errors","touched","isSubmitting","join","msg","mapStateToProps","auth","recoverPassword","mapDispatchToProps","clean"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { Form, Field, ErrorMessage, Formik } from 'formik'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../backend/store/actions'\nimport { PasswordRecoverySchema } from './ProfileSchemas.js'\n\nconst PasswordRecoveryForm = ({ sendEmail, loading, error, cleanUp }) => {\n  let displayError\n\n  if (error) {\n      displayError = {display: \"block\"}\n  } else {\n      displayError = {display: \"none\"}\n  }\n\n  useEffect(() => {\n    return () => {\n      cleanUp()\n    }\n  }, [cleanUp])\n\n  return(\n    <Formik\n      initialValues = {{\n        email: \"\",\n      }}\n      validationSchema = {PasswordRecoverySchema}\n      onSubmit = {async ( values, { resetForm, setSubmitting }) => {\n        await sendEmail(values)\n        setSubmitting(false);\n      }}\n    >\n      {({ errors, touched, isSubmitting }) => (\n        <div className=\"password-change-form\">\n          <h1> Recover your password </h1>\n          <Form className = \"classic-form\">\n      \n            <div className = {[\"text-input\", touched.email && errors.email && \"text-error\"].join(' ')}> \n              <label> Email </label> <br />\n              <Field name = \"email\" type = \"email\"/> <br/>\n              <ErrorMessage render = {msg => <p className = \"error-msg\"> {msg} </p>} name = \"email\"/>\n            </div>\n            <p style = {displayError}>{error}</p>\n            <button \n              type=\"submit\" \n              disabled={isSubmitting}\n              className = \"classic-button\"\n            > \n              Send Recover Email \n            </button>\n\n        </Form>\n        </div>\n      )}\n    </Formik>\n  )\n}\n\nconst mapStateToProps = ({ auth }) => ({\n  loading: auth.recoverPassword.loading,\n  error: auth.recoverPassword.error,\n})\n\nconst mapDispatchToProps = {\n  sendEmail: actions.recoverPassword,\n  cleanUp: actions.clean,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordRecoveryForm)"]},"metadata":{},"sourceType":"module"}