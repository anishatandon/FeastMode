{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Food/PickFood.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst ezPizzaAPI = require('ez-pizza-api');\n\n(async () => {\n  const cityRegionOrPostalCode = 'Denver, CO, 80202';\n  const streetAddress = '1280 Grant St'; // Get a full list of stores near an address\n\n  let proxyUrl = 'https://cors-anywhere.herokuapp.com/',\n      targetUrl = 'http://catfacts-api.appspot.com/api/facts?number=99';\n\n  const storesResult = async () => {\n    const response = await fetch(\"\".concat(API_URL, \"/store-locator?type=\").concat(ezPizzaAPI.orderTypes.Carryout, \"&c=\").concat(cityRegionOrPostalCode, \"&s=\").concat(streetAddress));\n    return response.json();\n  };\n\n  console.log(storesResult);\n  console.log('Hello'); // Get basic info about nearest delivery store to address\n\n  const storeResult = await ezPizzaAPI.getNearestDeliveryStore(cityRegionOrPostalCode, streetAddress); // Get full info about specified store\n\n  const storeInfo = await ezPizzaAPI.getStoreInfo(storeResult.StoreID); // Get full menu for the specified store\n\n  const storeMenu = await ezPizzaAPI.getStoreMenu(storeResult.StoreID);\n  const couponId = '9193'; // Get info for the specified store and coupon\n  // Coupon ID found in the above menu request\n\n  const coupon = await ezPizzaAPI.getStoreCoupon(storeResult.StoreID, couponId); // Create an Order with the following properties\n\n  const order = {\n    Order: {\n      Address: {\n        // <- Update this\n        Street: '123 Sesame St.',\n        City: 'New York',\n        Region: 'NY',\n        PostalCode: '10001',\n        Type: 'House',\n        StreetName: 'Sesame St',\n        StreetNumber: '123'\n      },\n      // Specify any coupons here, leave empty if not using a coupon\n      Coupons: [{\n        Code: couponId,\n        Qty: 1,\n        ID: 2 // Specify your own IDs, increment if more than 1 specified\n\n      }],\n      Email: 'coolguy@gmail.com',\n      // <- Update this\n      FirstName: 'Cool',\n      // <- Update this\n      LastName: 'Guy',\n      // <- Update this\n      LanguageCode: 'en',\n      OrderChannel: 'OLO',\n      OrderMethod: 'Web',\n      OrderTaker: null,\n      Payments: [],\n      Phone: '1234567890',\n      // <- Update this\n      PhonePrefix: '1',\n      // <- Update this\n      // An array of products. Find the corresponding code and available options in the menu response.\n      Products: [{\n        Code: '12THIN',\n        Qty: 1,\n        isNew: true,\n        Options: {\n          X: {\n            '1/1': '1'\n          },\n          C: {\n            '1/1': '1'\n          },\n          Sa: {\n            '1/1': '1'\n          },\n          J: {\n            '1/2': '1'\n          },\n          Z: {\n            '2/2': '1'\n          }\n        }\n      }, {\n        Code: 'MARBRWNE',\n        Qty: 1,\n        isNew: true,\n        Options: {}\n      }, {\n        Code: 'B16PBIT',\n        Options: {},\n        Qty: 1,\n        isNew: true\n      }],\n      ServiceMethod: ezPizzaAPI.orderTypes.Delivery,\n      // <- Update this can be Delivery or Carryout\n      SourceOrganizationURI: 'order.dominos.com',\n      StoreID: storeResult.StoreID,\n      Tags: {},\n      Version: '1.0',\n      NoCombine: true,\n      Partners: {},\n      OrderInfoCollection: []\n    }\n  };\n  const orderValid = await ezPizzaAPI.validateOrder(order);\n  order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n  const pricedOrder = await ezPizzaAPI.priceOrder(order);\n  const Amount = pricedOrder.Order.Amounts.Customer; // get total amount for order\n  // specify the amount and credit card info OR see how to use cash on delivery below\n\n  order.Order.Payments.push({\n    Amount,\n    Type: 'CreditCard',\n    Number: 'â€‹4242424242424242',\n    CardType: 'VISA',\n    Expiration: '0424',\n    SecurityCode: '424',\n    PostalCode: '80202'\n  }); // OR\n  // specify the amount type as Cash\n\n  order.Order.Payments.push({\n    Amount,\n    Type: 'Cash' // <- Pay cash on delivery\n\n  });\n  const placedOrder = await ezPizzaAPI.placeOrder(order); // For a succesful order, look for:\n  // StoreOrderID\n  // EmailHash\n  // StatusItems: [ { Code: 'Success' } ] }\n  // Be sure to check your email before trying again.\n  // Sometimes this has a failure status but the order still goes through...\n\n  console.log(placedOrder); // Getting the orderID may vary. Validate by looking at the placedOrder response\n\n  const orderID = placedOrder.Order.StoreOrderID.split('#')[1]; // <- This might change depending on store\n\n  const orderStatus = await ezPizzaAPI.trackOrder(storeResult.StoreID, orderID);\n  console.log(orderStatus);\n})();\n\nconst PickFood = () => {\n  return React.createElement(\"div\", {\n    className: \"restaurants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \" keep this here for now, use for dominos? Ahgjkdwefgiew\"), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, \"Click click\"));\n};\n\nexport default PickFood;","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Food/PickFood.js"],"names":["React","Link","ROUTES","ezPizzaAPI","require","cityRegionOrPostalCode","streetAddress","proxyUrl","targetUrl","storesResult","response","fetch","API_URL","orderTypes","Carryout","json","console","log","storeResult","getNearestDeliveryStore","storeInfo","getStoreInfo","StoreID","storeMenu","getStoreMenu","couponId","coupon","getStoreCoupon","order","Order","Address","Street","City","Region","PostalCode","Type","StreetName","StreetNumber","Coupons","Code","Qty","ID","Email","FirstName","LastName","LanguageCode","OrderChannel","OrderMethod","OrderTaker","Payments","Phone","PhonePrefix","Products","isNew","Options","X","C","Sa","J","Z","ServiceMethod","Delivery","SourceOrganizationURI","Tags","Version","NoCombine","Partners","OrderInfoCollection","orderValid","validateOrder","OrderID","pricedOrder","priceOrder","Amount","Amounts","Customer","push","Number","CardType","Expiration","SecurityCode","placedOrder","placeOrder","orderID","StoreOrderID","split","orderStatus","trackOrder","PickFood"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst ezPizzaAPI = require('ez-pizza-api');\n\n\n(async () => {\n    const cityRegionOrPostalCode = 'Denver, CO, 80202';\n    const streetAddress = '1280 Grant St';\n\n    // Get a full list of stores near an address\n    let proxyUrl = 'https://cors-anywhere.herokuapp.com/', targetUrl = 'http://catfacts-api.appspot.com/api/facts?number=99'\n    const storesResult = async () => {\n        const response = await fetch(`${API_URL}/store-locator?type=${ezPizzaAPI.orderTypes.Carryout}&c=${cityRegionOrPostalCode}&s=${streetAddress}`);\n        return response.json()\n    }\n    console.log(storesResult)\n    console.log('Hello')\n    // Get basic info about nearest delivery store to address\n    const storeResult = await ezPizzaAPI\n        .getNearestDeliveryStore(cityRegionOrPostalCode, streetAddress);\n\n    // Get full info about specified store\n    const storeInfo = await ezPizzaAPI\n        .getStoreInfo(storeResult.StoreID);\n\n    // Get full menu for the specified store\n    const storeMenu = await ezPizzaAPI\n        .getStoreMenu(storeResult.StoreID);\n\n    const couponId = '9193';\n    // Get info for the specified store and coupon\n    // Coupon ID found in the above menu request\n    const coupon = await ezPizzaAPI\n        .getStoreCoupon(storeResult.StoreID, couponId);\n\n    // Create an Order with the following properties\n    const order = {\n        Order: {\n        Address: { // <- Update this\n            Street: '123 Sesame St.',\n            City: 'New York',\n            Region: 'NY',\n            PostalCode: '10001',\n            Type: 'House',\n            StreetName: 'Sesame St',\n            StreetNumber: '123',\n        },\n        // Specify any coupons here, leave empty if not using a coupon\n        Coupons: [{\n            Code: couponId,\n            Qty: 1,\n            ID: 2, // Specify your own IDs, increment if more than 1 specified\n        }],\n        Email: 'coolguy@gmail.com', // <- Update this\n        FirstName: 'Cool', // <- Update this\n        LastName: 'Guy', // <- Update this\n        LanguageCode: 'en',\n        OrderChannel: 'OLO',\n        OrderMethod: 'Web',\n        OrderTaker: null,\n        Payments: [],\n        Phone: '1234567890', // <- Update this\n        PhonePrefix: '1', // <- Update this\n        // An array of products. Find the corresponding code and available options in the menu response.\n        Products: [{\n            Code: '12THIN',\n            Qty: 1,\n            isNew: true,\n            Options: {\n            X: {\n                '1/1': '1',\n            },\n            C: {\n                '1/1': '1',\n            },\n            Sa: {\n                '1/1': '1',\n            },\n            J: {\n                '1/2': '1',\n            },\n            Z: {\n                '2/2': '1',\n            },\n            },\n        }, {\n            Code: 'MARBRWNE',\n            Qty: 1,\n            isNew: true,\n            Options: {},\n        }, {\n            Code: 'B16PBIT',\n            Options: {},\n            Qty: 1,\n            isNew: true,\n        }],\n        ServiceMethod: ezPizzaAPI.orderTypes.Delivery, // <- Update this can be Delivery or Carryout\n        SourceOrganizationURI: 'order.dominos.com',\n        StoreID: storeResult.StoreID,\n        Tags: {},\n        Version: '1.0',\n        NoCombine: true,\n        Partners: {},\n        OrderInfoCollection: [],\n        },\n    };\n\n    const orderValid = await ezPizzaAPI.validateOrder(order);\n    order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n    const pricedOrder = await ezPizzaAPI.priceOrder(order);\n    const Amount = pricedOrder.Order.Amounts.Customer; // get total amount for order\n\n    // specify the amount and credit card info OR see how to use cash on delivery below\n    order.Order.Payments.push({\n        Amount,\n        Type: 'CreditCard',\n        Number: 'â€‹4242424242424242',\n        CardType: 'VISA',\n        Expiration: '0424',\n        SecurityCode: '424',\n        PostalCode: '80202',\n    });\n\n    // OR\n    // specify the amount type as Cash\n    order.Order.Payments.push({\n        Amount,\n        Type: 'Cash', // <- Pay cash on delivery\n    });\n\n    const placedOrder = await ezPizzaAPI.placeOrder(order);\n    // For a succesful order, look for:\n    // StoreOrderID\n    // EmailHash\n    // StatusItems: [ { Code: 'Success' } ] }\n\n    // Be sure to check your email before trying again.\n    // Sometimes this has a failure status but the order still goes through...\n    console.log(placedOrder);\n\n    // Getting the orderID may vary. Validate by looking at the placedOrder response\n    const orderID = placedOrder.Order.StoreOrderID.split('#')[1]; // <- This might change depending on store\n    const orderStatus = await ezPizzaAPI.trackOrder(storeResult.StoreID, orderID);\n    console.log(orderStatus);\n})();\n\nconst PickFood = () => {\n    return (\n        <div className = \"restaurants\">\n            <h1 className = \"title\"> keep this here for now, use for dominos? Ahgjkdwefgiew</h1>\n            <button>Click click</button>\n        </div>\n    )\n}\n\nexport default PickFood"]},"metadata":{},"sourceType":"module"}