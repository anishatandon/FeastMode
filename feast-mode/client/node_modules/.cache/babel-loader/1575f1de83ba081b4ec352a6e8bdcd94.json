{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Food/PickFood.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst PickFood = () => {\n  const ezPizzaAPI = require('ez-pizza-api');\n\n  (async () => {\n    const cityRegionOrPostalCode = 'Denver, CO, 80202';\n    const streetAddress = '1280 Grant St'; // Get a full list of stores near an address\n\n    const storesResult = await ezPizzaAPI.getStoresNearAddress(ezPizzaAPI.orderTypes.Carryout, cityRegionOrPostalCode);\n    console.log(storesResult);\n    console.log(storesResult); // Get basic info about nearest delivery store to address\n\n    const storeResult = await ezPizzaAPI.getNearestDeliveryStore(cityRegionOrPostalCode, streetAddress); // Get full info about specified store\n\n    const storeInfo = await ezPizzaAPI.getStoreInfo(storeResult.StoreID); // Get full menu for the specified store\n\n    const storeMenu = await ezPizzaAPI.getStoreMenu(storeResult.StoreID);\n    const couponId = '9193'; // Get info for the specified store and coupon\n    // Coupon ID found in the above menu request\n\n    const coupon = await ezPizzaAPI.getStoreCoupon(storeResult.StoreID, couponId); // Create an Order with the following properties\n\n    const order = {\n      Order: {\n        Address: {\n          // <- Update this\n          Street: '123 Sesame St.',\n          City: 'New York',\n          Region: 'NY',\n          PostalCode: '10001',\n          Type: 'House',\n          StreetName: 'Sesame St',\n          StreetNumber: '123'\n        },\n        // Specify any coupons here, leave empty if not using a coupon\n        Coupons: [{\n          Code: couponId,\n          Qty: 1,\n          ID: 2 // Specify your own IDs, increment if more than 1 specified\n\n        }],\n        Email: 'coolguy@gmail.com',\n        // <- Update this\n        FirstName: 'Cool',\n        // <- Update this\n        LastName: 'Guy',\n        // <- Update this\n        LanguageCode: 'en',\n        OrderChannel: 'OLO',\n        OrderMethod: 'Web',\n        OrderTaker: null,\n        Payments: [],\n        Phone: '1234567890',\n        // <- Update this\n        PhonePrefix: '1',\n        // <- Update this\n        // An array of products. Find the corresponding code and available options in the menu response.\n        Products: [{\n          Code: '12THIN',\n          Qty: 1,\n          isNew: true,\n          Options: {\n            X: {\n              '1/1': '1'\n            },\n            C: {\n              '1/1': '1'\n            },\n            Sa: {\n              '1/1': '1'\n            },\n            J: {\n              '1/2': '1'\n            },\n            Z: {\n              '2/2': '1'\n            }\n          }\n        }, {\n          Code: 'MARBRWNE',\n          Qty: 1,\n          isNew: true,\n          Options: {}\n        }, {\n          Code: 'B16PBIT',\n          Options: {},\n          Qty: 1,\n          isNew: true\n        }],\n        ServiceMethod: ezPizzaAPI.orderTypes.Delivery,\n        // <- Update this can be Delivery or Carryout\n        SourceOrganizationURI: 'order.dominos.com',\n        StoreID: storeResult.StoreID,\n        Tags: {},\n        Version: '1.0',\n        NoCombine: true,\n        Partners: {},\n        OrderInfoCollection: []\n      }\n    };\n    const orderValid = await ezPizzaAPI.validateOrder(order);\n    order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n    const pricedOrder = await ezPizzaAPI.priceOrder(order);\n    const Amount = pricedOrder.Order.Amounts.Customer; // get total amount for order\n    // specify the amount and credit card info OR see how to use cash on delivery below\n\n    order.Order.Payments.push({\n      Amount,\n      Type: 'CreditCard',\n      Number: 'â€‹4242424242424242',\n      CardType: 'VISA',\n      Expiration: '0424',\n      SecurityCode: '424',\n      PostalCode: '80202'\n    }); // OR\n    // specify the amount type as Cash\n\n    order.Order.Payments.push({\n      Amount,\n      Type: 'Cash' // <- Pay cash on delivery\n\n    });\n    const placedOrder = await ezPizzaAPI.placeOrder(order); // For a succesful order, look for:\n    // StoreOrderID\n    // EmailHash\n    // StatusItems: [ { Code: 'Success' } ] }\n    // Be sure to check your email before trying again.\n    // Sometimes this has a failure status but the order still goes through...\n\n    console.log(placedOrder); // Getting the orderID may vary. Validate by looking at the placedOrder response\n\n    const orderID = placedOrder.Order.StoreOrderID.split('#')[1]; // <- This might change depending on store\n\n    const orderStatus = await ezPizzaAPI.trackOrder(storeResult.StoreID, orderID);\n    console.log(orderStatus);\n  })();\n\n  return React.createElement(\"div\", {\n    className: \"restaurants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \" keep this here for now, use for dominos? Ahgjkdwefgiew\"), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Click click\"));\n};\n\nexport default PickFood;","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Food/PickFood.js"],"names":["React","Link","ROUTES","PickFood","ezPizzaAPI","require","cityRegionOrPostalCode","streetAddress","storesResult","getStoresNearAddress","orderTypes","Carryout","console","log","storeResult","getNearestDeliveryStore","storeInfo","getStoreInfo","StoreID","storeMenu","getStoreMenu","couponId","coupon","getStoreCoupon","order","Order","Address","Street","City","Region","PostalCode","Type","StreetName","StreetNumber","Coupons","Code","Qty","ID","Email","FirstName","LastName","LanguageCode","OrderChannel","OrderMethod","OrderTaker","Payments","Phone","PhonePrefix","Products","isNew","Options","X","C","Sa","J","Z","ServiceMethod","Delivery","SourceOrganizationURI","Tags","Version","NoCombine","Partners","OrderInfoCollection","orderValid","validateOrder","OrderID","pricedOrder","priceOrder","Amount","Amounts","Customer","push","Number","CardType","Expiration","SecurityCode","placedOrder","placeOrder","orderID","StoreOrderID","split","orderStatus","trackOrder"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst PickFood = () => {\n    const ezPizzaAPI = require('ez-pizza-api');\n\n    (async () => {\n    const cityRegionOrPostalCode = 'Denver, CO, 80202';\n    const streetAddress = '1280 Grant St';\n\n    // Get a full list of stores near an address\n    const storesResult = await ezPizzaAPI\n        .getStoresNearAddress(ezPizzaAPI.orderTypes.Carryout, cityRegionOrPostalCode);\n    console.log(storesResult)\n    console.log(storesResult)\n    // Get basic info about nearest delivery store to address\n    const storeResult = await ezPizzaAPI\n        .getNearestDeliveryStore(cityRegionOrPostalCode, streetAddress);\n\n    // Get full info about specified store\n    const storeInfo = await ezPizzaAPI\n        .getStoreInfo(storeResult.StoreID);\n\n    // Get full menu for the specified store\n    const storeMenu = await ezPizzaAPI\n        .getStoreMenu(storeResult.StoreID);\n\n    const couponId = '9193';\n    // Get info for the specified store and coupon\n    // Coupon ID found in the above menu request\n    const coupon = await ezPizzaAPI\n        .getStoreCoupon(storeResult.StoreID, couponId);\n\n    // Create an Order with the following properties\n    const order = {\n        Order: {\n        Address: { // <- Update this\n            Street: '123 Sesame St.',\n            City: 'New York',\n            Region: 'NY',\n            PostalCode: '10001',\n            Type: 'House',\n            StreetName: 'Sesame St',\n            StreetNumber: '123',\n        },\n        // Specify any coupons here, leave empty if not using a coupon\n        Coupons: [{\n            Code: couponId,\n            Qty: 1,\n            ID: 2, // Specify your own IDs, increment if more than 1 specified\n        }],\n        Email: 'coolguy@gmail.com', // <- Update this\n        FirstName: 'Cool', // <- Update this\n        LastName: 'Guy', // <- Update this\n        LanguageCode: 'en',\n        OrderChannel: 'OLO',\n        OrderMethod: 'Web',\n        OrderTaker: null,\n        Payments: [],\n        Phone: '1234567890', // <- Update this\n        PhonePrefix: '1', // <- Update this\n        // An array of products. Find the corresponding code and available options in the menu response.\n        Products: [{\n            Code: '12THIN',\n            Qty: 1,\n            isNew: true,\n            Options: {\n            X: {\n                '1/1': '1',\n            },\n            C: {\n                '1/1': '1',\n            },\n            Sa: {\n                '1/1': '1',\n            },\n            J: {\n                '1/2': '1',\n            },\n            Z: {\n                '2/2': '1',\n            },\n            },\n        }, {\n            Code: 'MARBRWNE',\n            Qty: 1,\n            isNew: true,\n            Options: {},\n        }, {\n            Code: 'B16PBIT',\n            Options: {},\n            Qty: 1,\n            isNew: true,\n        }],\n        ServiceMethod: ezPizzaAPI.orderTypes.Delivery, // <- Update this can be Delivery or Carryout\n        SourceOrganizationURI: 'order.dominos.com',\n        StoreID: storeResult.StoreID,\n        Tags: {},\n        Version: '1.0',\n        NoCombine: true,\n        Partners: {},\n        OrderInfoCollection: [],\n        },\n    };\n\n    const orderValid = await ezPizzaAPI.validateOrder(order);\n    order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n    const pricedOrder = await ezPizzaAPI.priceOrder(order);\n    const Amount = pricedOrder.Order.Amounts.Customer; // get total amount for order\n\n    // specify the amount and credit card info OR see how to use cash on delivery below\n    order.Order.Payments.push({\n        Amount,\n        Type: 'CreditCard',\n        Number: 'â€‹4242424242424242',\n        CardType: 'VISA',\n        Expiration: '0424',\n        SecurityCode: '424',\n        PostalCode: '80202',\n    });\n\n    // OR\n    // specify the amount type as Cash\n    order.Order.Payments.push({\n        Amount,\n        Type: 'Cash', // <- Pay cash on delivery\n    });\n\n    const placedOrder = await ezPizzaAPI.placeOrder(order);\n    // For a succesful order, look for:\n    // StoreOrderID\n    // EmailHash\n    // StatusItems: [ { Code: 'Success' } ] }\n\n    // Be sure to check your email before trying again.\n    // Sometimes this has a failure status but the order still goes through...\n    console.log(placedOrder);\n\n    // Getting the orderID may vary. Validate by looking at the placedOrder response\n    const orderID = placedOrder.Order.StoreOrderID.split('#')[1]; // <- This might change depending on store\n    const orderStatus = await ezPizzaAPI.trackOrder(storeResult.StoreID, orderID);\n    console.log(orderStatus);\n    })();\n\n    return (\n        <div className = \"restaurants\">\n            <h1 className = \"title\"> keep this here for now, use for dominos? Ahgjkdwefgiew</h1>\n            <button>Click click</button>\n        </div>\n    )\n}\n\nexport default PickFood"]},"metadata":{},"sourceType":"module"}