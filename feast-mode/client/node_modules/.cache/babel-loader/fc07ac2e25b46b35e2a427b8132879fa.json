{"ast":null,"code":"import * as actions from './actionTypes.js';\nexport const sendInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const inviteId = data.friend;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.SEND_INVITE_START\n  });\n\n  try {\n    //try passing in other firebase\n    console.log(firebase); // const newRequest = {\n    //     friendId: userId,\n    //     friendFirst: firestore.firstName,\n    //     friendLast: firebase.lastName, \n    //     friendEmail: getState().firebase.auth.email, \n    //     friendPhone: firebase.profile.phone, \n    // }\n    // console.log(newRequest)\n    // const res = await firestore\n    //     .collection('friends')\n    //     .doc(inviteId)\n    //     .get();\n    // if (!res.data() || !res.data().requests) {\n    //     firestore\n    //     .collection('friends')\n    //     .doc(inviteId)\n    //     .set({\n    //         requests: [newRequest],\n    //     });\n    // } else { \n    //     if(res.data().requests.indexOf(userId) === -1 && userId !== inviteId ){\n    //         firestore\n    //         .collection('friends')\n    //         .doc(inviteId)\n    //         .update({\n    //             requests: [...res.data().requests, newRequest],\n    //         });\n    //     }\n    // }\n\n    dispatch({\n      type: actions.SEND_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.SEND_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const acceptInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.ACCEPT_INVITE_START\n  });\n\n  try {\n    const resUser = await firestore.collection('friends').doc(userId).get();\n    const resInvite = await firestore.collection('friends').doc(inviteId).get();\n    const userPrevious = resUser.data().requests.filter(request => request !== inviteId);\n\n    if (!resUser.data() || !resUser.data().friends) {\n      console.log('resuser in here');\n      firestore.collection('friends').doc(userId).set({\n        friends: [inviteId],\n        requests: userPrevious\n      });\n    } else {\n      console.log(\"resuser\");\n\n      if (resUser.data().friends.indexOf(inviteId) === -1) {\n        firestore.collection('friends').doc(userId).update({\n          friends: [...resUser.data().friends, inviteId],\n          requests: userPrevious\n        });\n      }\n    }\n\n    if (!resInvite.data() || !resInvite.data().friends) {\n      // console.log(\"resinvite in here\")\n      firestore.collection('friends').doc(inviteId).set({\n        friends: [userId],\n        requests: [...resInvite.data().requests]\n      });\n    } else {\n      // console.log(\"resinvite\")\n      if (resInvite.data().friends.indexOf(userId) === -1) {\n        firestore.collection('friends').doc(inviteId).update({\n          friends: [...resInvite.data().friends, userId],\n          requests: [...resInvite.data().requests]\n        });\n      } // console.log(\"complete\")\n\n    }\n\n    dispatch({\n      type: actions.SEND_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.SEND_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const deleteInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.DELETE_INVITE_START\n  });\n\n  try {\n    const resUser = await firestore.collection('friends').doc(userId).get();\n    const userPrevious = resUser.data().requests.filter(request => request !== inviteId); // console.log(userPrevious)\n\n    firestore.collection('friends').doc(userId).update({\n      requests: userPrevious\n    }); // console.log(\"past\")\n\n    dispatch({\n      type: actions.DELETE_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const deleteFriend = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.DELETE_FRIEND_START\n  });\n\n  try {\n    const resUser = await firestore.collection('friends').doc(userId).get();\n    const resInvite = await firestore.collection('friends').doc(inviteId).get(); // console.log(userPrevious)\n    // console.log(invitePrevious)\n    // console.log(!resUser.data() )\n\n    if (resUser.data()) {\n      const userPrevious = resUser.data().friends.filter(friend => friend !== inviteId);\n      firestore.collection('friends').doc(userId).update({\n        friends: userPrevious\n      });\n    }\n\n    if (resInvite.data()) {\n      const invitePrevious = resInvite.data().friends.filter(friend => friend !== userId);\n      firestore.collection('friends').doc(inviteId).update({\n        friends: invitePrevious\n      });\n    }\n\n    dispatch({\n      type: actions.DELETE_FRIEND_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_FRIEND_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/backend/store/actions/appActions.js"],"names":["actions","sendInvite","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","inviteId","friend","userId","auth","uid","type","SEND_INVITE_START","console","log","SEND_INVITE_SUCCESS","err","SEND_INVITE_FAIL","payload","message","acceptInvite","ACCEPT_INVITE_START","resUser","collection","doc","get","resInvite","userPrevious","requests","filter","request","friends","set","indexOf","update","deleteInvite","DELETE_INVITE_START","DELETE_INVITE_SUCCESS","DELETE_INVITE_FAIL","deleteFriend","DELETE_FRIEND_START","invitePrevious","DELETE_FRIEND_SUCCESS","DELETE_FRIEND_FAIL"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes.js'\n\n\nexport const sendInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    \n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    const inviteId = data.friend;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.SEND_INVITE_START })\n    try {\n        \n\n        //try passing in other firebase\n        console.log(firebase)\n        // const newRequest = {\n        //     friendId: userId,\n        //     friendFirst: firestore.firstName,\n        //     friendLast: firebase.lastName, \n        //     friendEmail: getState().firebase.auth.email, \n        //     friendPhone: firebase.profile.phone, \n        // }\n\n        // console.log(newRequest)\n\n        // const res = await firestore\n        //     .collection('friends')\n        //     .doc(inviteId)\n        //     .get();\n\n        // if (!res.data() || !res.data().requests) {\n        //     firestore\n        //     .collection('friends')\n        //     .doc(inviteId)\n        //     .set({\n        //         requests: [newRequest],\n        //     });\n            \n        // } else { \n\n        //     if(res.data().requests.indexOf(userId) === -1 && userId !== inviteId ){\n        //         firestore\n        //         .collection('friends')\n        //         .doc(inviteId)\n        //         .update({\n        //             requests: [...res.data().requests, newRequest],\n        //         });\n        //     }\n        // }\n\n        dispatch({ type: actions.SEND_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.SEND_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const acceptInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.ACCEPT_INVITE_START })\n    try {\n        const resUser = await firestore\n            .collection('friends')\n            .doc(userId)\n            .get();\n        const resInvite = await firestore\n            .collection('friends')\n            .doc(inviteId)\n            .get();\n            \n        const userPrevious = resUser.data().requests.filter(request => request !== inviteId);\n        if (!resUser.data() || !resUser.data().friends) {\n            console.log('resuser in here')\n            firestore\n            .collection('friends')\n            .doc(userId)\n            .set({\n                friends: [inviteId],\n                requests: userPrevious,\n            });\n            \n        } \n        else { \n            console.log(\"resuser\")\n            if(resUser.data().friends.indexOf(inviteId) === -1 ){\n                firestore\n                .collection('friends')\n                .doc(userId)\n                .update({\n                    friends: [...resUser.data().friends, inviteId],\n                    requests: userPrevious,\n                });\n            }\n        }\n\n\n        if (!resInvite.data() || !resInvite.data().friends) {\n            // console.log(\"resinvite in here\")\n            firestore\n            .collection('friends')\n            .doc(inviteId)\n            .set({\n                friends: [userId],\n                requests: [...resInvite.data().requests],\n            });\n            \n        } \n        \n        else { \n            // console.log(\"resinvite\")\n            if(resInvite.data().friends.indexOf(userId) === -1 ){\n                firestore\n                .collection('friends')\n                .doc(inviteId)\n                .update({\n                    friends: [...resInvite.data().friends, userId],\n                    requests: [...resInvite.data().requests],\n                });\n            }\n            \n            // console.log(\"complete\")\n        }\n\n        dispatch({ type: actions.SEND_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.SEND_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const deleteInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.DELETE_INVITE_START })\n    try {\n        const resUser = await firestore\n            .collection('friends')\n            .doc(userId)\n            .get();\n        const userPrevious = resUser.data().requests.filter(request => request !== inviteId);\n        // console.log(userPrevious)\n        firestore\n            .collection('friends')\n            .doc(userId)\n            .update({\n                requests: userPrevious,\n            });\n        // console.log(\"past\")\n        dispatch({ type: actions.DELETE_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.DELETE_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const deleteFriend = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.DELETE_FRIEND_START })\n    try {\n\n        const resUser = await firestore\n            .collection('friends')\n            .doc(userId)\n            .get();\n        const resInvite = await firestore\n            .collection('friends')\n            .doc(inviteId)\n            .get();\n        \n        // console.log(userPrevious)\n        // console.log(invitePrevious)\n        // console.log(!resUser.data() )\n        if (resUser.data() ) {\n            const userPrevious = resUser.data().friends.filter(friend => friend !== inviteId);\n            firestore\n            .collection('friends')\n            .doc(userId)\n            .update({\n                friends: userPrevious,\n            });\n        } \n        \n        if (resInvite.data() ) {\n            const invitePrevious = resInvite.data().friends.filter(friend => friend !== userId);\n            firestore\n            .collection('friends')\n            .doc(inviteId)\n            .update({\n                friends: invitePrevious,\n            });\n        } \n\n        dispatch({ type: actions.DELETE_FRIEND_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.DELETE_FRIEND_FAIL, payload: err.message })\n    }\n}"]},"metadata":{},"sourceType":"module"}