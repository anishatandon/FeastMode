{"ast":null,"code":"// Generated by CoffeeScript 1.10.0\n(function () {\n  var Card,\n      QJ,\n      extend,\n      payment,\n      bind = function (fn, me) {\n    return function () {\n      return fn.apply(me, arguments);\n    };\n  };\n\n  require('./card.css');\n\n  QJ = require('qj');\n  payment = require('payment');\n  extend = require('node.extend');\n\n  Card = function () {\n    var bindVal;\n    Card.prototype.initializedDataAttr = \"data-jp-card-initialized\";\n    Card.prototype.cardTemplate = '' + '<div class=\"jp-card-container\">' + '<div class=\"jp-card\">' + '<div class=\"jp-card-front\">' + '<div class=\"jp-card-logo jp-card-elo\">' + '<div class=\"e\">e</div>' + '<div class=\"l\">l</div>' + '<div class=\"o\">o</div>' + '</div>' + '<div class=\"jp-card-logo jp-card-visa\">Visa</div>' + '<div class=\"jp-card-logo jp-card-visaelectron\">Visa<div class=\"elec\">Electron</div></div>' + '<div class=\"jp-card-logo jp-card-mastercard\">Mastercard</div>' + '<div class=\"jp-card-logo jp-card-maestro\">Maestro</div>' + '<div class=\"jp-card-logo jp-card-amex\"></div>' + '<div class=\"jp-card-logo jp-card-discover\">discover</div>' + '<div class=\"jp-card-logo jp-card-dinersclub\"></div>' + '<div class=\"jp-card-logo jp-card-dankort\"><div class=\"dk\"><div class=\"d\"></div><div class=\"k\"></div></div></div>' + '<div class=\"jp-card-logo jp-card-jcb\">' + '<div class=\"j\">J</div>' + '<div class=\"c\">C</div>' + '<div class=\"b\">B</div>' + '</div>' + '<div class=\"jp-card-lower\">' + '<div class=\"jp-card-shiny\"></div>' + '<div class=\"jp-card-cvc jp-card-display\">{{cvc}}</div>' + '<div class=\"jp-card-number jp-card-display\">{{number}}</div>' + '<div class=\"jp-card-name jp-card-display\">{{name}}</div>' + '<div class=\"jp-card-expiry jp-card-display\" data-before=\"{{monthYear}}\" data-after=\"{{validDate}}\">{{expiry}}</div>' + '</div>' + '</div>' + '<div class=\"jp-card-back\">' + '<div class=\"jp-card-bar\"></div>' + '<div class=\"jp-card-cvc jp-card-display\">{{cvc}}</div>' + '<div class=\"jp-card-shiny\"></div>' + '</div>' + '</div>' + '</div>';\n\n    Card.prototype.template = function (tpl, data) {\n      return tpl.replace(/\\{\\{(.*?)\\}\\}/g, function (match, key, str) {\n        return data[key];\n      });\n    };\n\n    Card.prototype.cardTypes = ['jp-card-amex', 'jp-card-dankort', 'jp-card-dinersclub', 'jp-card-discover', 'jp-card-jcb', 'jp-card-laser', 'jp-card-maestro', 'jp-card-mastercard', 'jp-card-unionpay', 'jp-card-visa', 'jp-card-visaelectron', 'jp-card-elo'];\n    Card.prototype.defaults = {\n      formatting: true,\n      formSelectors: {\n        numberInput: 'input[name=\"number\"]',\n        expiryInput: 'input[name=\"expiry\"]',\n        cvcInput: 'input[name=\"cvc\"]',\n        nameInput: 'input[name=\"name\"]'\n      },\n      cardSelectors: {\n        cardContainer: '.jp-card-container',\n        card: '.jp-card',\n        numberDisplay: '.jp-card-number',\n        expiryDisplay: '.jp-card-expiry',\n        cvcDisplay: '.jp-card-cvc',\n        nameDisplay: '.jp-card-name'\n      },\n      messages: {\n        validDate: 'valid\\nthru',\n        monthYear: 'month/year'\n      },\n      placeholders: {\n        number: '&bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull; &bull;&bull;&bull;&bull;',\n        cvc: '&bull;&bull;&bull;',\n        expiry: '&bull;&bull;/&bull;&bull;',\n        name: 'Full Name'\n      },\n      masks: {\n        cardNumber: false\n      },\n      classes: {\n        valid: 'jp-card-valid',\n        invalid: 'jp-card-invalid'\n      },\n      debug: false\n    };\n\n    function Card(opts) {\n      this.maskCardNumber = bind(this.maskCardNumber, this);\n      var toInitialize;\n      this.options = extend(true, this.defaults, opts);\n\n      if (!this.options.form) {\n        console.log(\"Please provide a form\");\n        return;\n      }\n\n      this.$el = QJ(this.options.form);\n\n      if (!this.options.container) {\n        console.log(\"Please provide a container\");\n        return;\n      }\n\n      this.$container = QJ(this.options.container);\n      toInitialize = QJ.isDOMElement(this.$container) ? this.$container : this.$container[0];\n\n      if (toInitialize.getAttribute(this.initializedDataAttr)) {\n        return;\n      }\n\n      toInitialize.setAttribute(this.initializedDataAttr, true);\n      this.render();\n      this.attachHandlers();\n      this.handleInitialPlaceholders();\n    }\n\n    Card.prototype.render = function () {\n      var $cardContainer, baseWidth, name, obj, ref, ref1, selector, ua;\n      QJ.append(this.$container, this.template(this.cardTemplate, extend({}, this.options.messages, this.options.placeholders)));\n      ref = this.options.cardSelectors;\n\n      for (name in ref) {\n        selector = ref[name];\n        this[\"$\" + name] = QJ.find(this.$container, selector);\n      }\n\n      ref1 = this.options.formSelectors;\n\n      for (name in ref1) {\n        selector = ref1[name];\n        selector = this.options[name] ? this.options[name] : selector;\n        obj = QJ.find(this.$el, selector);\n\n        if (!obj.length && this.options.debug) {\n          console.error(\"Card can't find a \" + name + \" in your form.\");\n        }\n\n        this[\"$\" + name] = obj;\n      }\n\n      if (this.options.formatting) {\n        Payment.formatCardNumber(this.$numberInput);\n        Payment.formatCardCVC(this.$cvcInput);\n        Payment.formatCardExpiry(this.$expiryInput);\n      }\n\n      if (this.options.width) {\n        $cardContainer = QJ(this.options.cardSelectors.cardContainer)[0];\n        baseWidth = parseInt($cardContainer.clientWidth || window.getComputedStyle($cardContainer).width);\n        $cardContainer.style.transform = \"scale(\" + this.options.width / baseWidth + \")\";\n      }\n\n      if (typeof navigator !== \"undefined\" && navigator !== null ? navigator.userAgent : void 0) {\n        ua = navigator.userAgent.toLowerCase();\n\n        if (ua.indexOf('safari') !== -1 && ua.indexOf('chrome') === -1) {\n          QJ.addClass(this.$card, 'jp-card-safari');\n        }\n      }\n\n      if (/MSIE 10\\./i.test(navigator.userAgent)) {\n        QJ.addClass(this.$card, 'jp-card-ie-10');\n      }\n\n      if (/rv:11.0/i.test(navigator.userAgent)) {\n        return QJ.addClass(this.$card, 'jp-card-ie-11');\n      }\n    };\n\n    Card.prototype.attachHandlers = function () {\n      var expiryFilters, numberInputFilters;\n      numberInputFilters = [this.validToggler('cardNumber')];\n\n      if (this.options.masks.cardNumber) {\n        numberInputFilters.push(this.maskCardNumber);\n      }\n\n      bindVal(this.$numberInput, this.$numberDisplay, {\n        fill: false,\n        filters: numberInputFilters\n      });\n      QJ.on(this.$numberInput, 'payment.cardType', this.handle('setCardType'));\n      expiryFilters = [function (val) {\n        return val.replace(/(\\s+)/g, '');\n      }];\n      expiryFilters.push(this.validToggler('cardExpiry'));\n      bindVal(this.$expiryInput, this.$expiryDisplay, {\n        join: function (text) {\n          if (text[0].length === 2 || text[1]) {\n            return \"/\";\n          } else {\n            return \"\";\n          }\n        },\n        filters: expiryFilters\n      });\n      bindVal(this.$cvcInput, this.$cvcDisplay, {\n        filters: this.validToggler('cardCVC')\n      });\n      QJ.on(this.$cvcInput, 'focus', this.handle('flipCard'));\n      QJ.on(this.$cvcInput, 'blur', this.handle('unflipCard'));\n      return bindVal(this.$nameInput, this.$nameDisplay, {\n        fill: false,\n        filters: this.validToggler('cardHolderName'),\n        join: ' '\n      });\n    };\n\n    Card.prototype.handleInitialPlaceholders = function () {\n      var el, name, ref, results, selector;\n      ref = this.options.formSelectors;\n      results = [];\n\n      for (name in ref) {\n        selector = ref[name];\n        el = this[\"$\" + name];\n\n        if (QJ.val(el)) {\n          QJ.trigger(el, 'paste');\n          results.push(setTimeout(function () {\n            return QJ.trigger(el, 'keyup');\n          }));\n        } else {\n          results.push(void 0);\n        }\n      }\n\n      return results;\n    };\n\n    Card.prototype.handle = function (fn) {\n      return function (_this) {\n        return function (e) {\n          var args;\n          args = Array.prototype.slice.call(arguments);\n          args.unshift(e.target);\n          return _this.handlers[fn].apply(_this, args);\n        };\n      }(this);\n    };\n\n    Card.prototype.validToggler = function (validatorName) {\n      var isValid;\n\n      if (validatorName === \"cardExpiry\") {\n        isValid = function (val) {\n          var objVal;\n          objVal = Payment.fns.cardExpiryVal(val);\n          return Payment.fns.validateCardExpiry(objVal.month, objVal.year);\n        };\n      } else if (validatorName === \"cardCVC\") {\n        isValid = function (_this) {\n          return function (val) {\n            return Payment.fns.validateCardCVC(val, _this.cardType);\n          };\n        }(this);\n      } else if (validatorName === \"cardNumber\") {\n        isValid = function (val) {\n          return Payment.fns.validateCardNumber(val);\n        };\n      } else if (validatorName === \"cardHolderName\") {\n        isValid = function (val) {\n          return val !== \"\";\n        };\n      }\n\n      return function (_this) {\n        return function (val, $in, $out) {\n          var result;\n          result = isValid(val);\n\n          _this.toggleValidClass($in, result);\n\n          _this.toggleValidClass($out, result);\n\n          return val;\n        };\n      }(this);\n    };\n\n    Card.prototype.toggleValidClass = function (el, test) {\n      QJ.toggleClass(el, this.options.classes.valid, test);\n      return QJ.toggleClass(el, this.options.classes.invalid, !test);\n    };\n\n    Card.prototype.maskCardNumber = function (val, el, out) {\n      var mask, numbers;\n      mask = this.options.masks.cardNumber;\n      numbers = val.split(' ');\n\n      if (numbers.length >= 3) {\n        numbers.forEach(function (item, idx) {\n          if (idx !== numbers.length - 1) {\n            return numbers[idx] = numbers[idx].replace(/\\d/g, mask);\n          }\n        });\n        return numbers.join(' ');\n      } else {\n        return val.replace(/\\d/g, mask);\n      }\n    };\n\n    Card.prototype.handlers = {\n      setCardType: function ($el, e) {\n        var cardType;\n        cardType = e.data;\n\n        if (!QJ.hasClass(this.$card, cardType)) {\n          QJ.removeClass(this.$card, 'jp-card-unknown');\n          QJ.removeClass(this.$card, this.cardTypes.join(' '));\n          QJ.addClass(this.$card, \"jp-card-\" + cardType);\n          QJ.toggleClass(this.$card, 'jp-card-identified', cardType !== 'unknown');\n          return this.cardType = cardType;\n        }\n      },\n      flipCard: function () {\n        return QJ.addClass(this.$card, 'jp-card-flipped');\n      },\n      unflipCard: function () {\n        return QJ.removeClass(this.$card, 'jp-card-flipped');\n      }\n    };\n\n    bindVal = function (el, out, opts) {\n      var joiner, o, outDefaults;\n\n      if (opts == null) {\n        opts = {};\n      }\n\n      opts.fill = opts.fill || false;\n      opts.filters = opts.filters || [];\n\n      if (!(opts.filters instanceof Array)) {\n        opts.filters = [opts.filters];\n      }\n\n      opts.join = opts.join || \"\";\n\n      if (!(typeof opts.join === \"function\")) {\n        joiner = opts.join;\n\n        opts.join = function () {\n          return joiner;\n        };\n      }\n\n      outDefaults = function () {\n        var j, len, results;\n        results = [];\n\n        for (j = 0, len = out.length; j < len; j++) {\n          o = out[j];\n          results.push(o.textContent);\n        }\n\n        return results;\n      }();\n\n      QJ.on(el, 'focus', function () {\n        return QJ.addClass(out, 'jp-card-focused');\n      });\n      QJ.on(el, 'blur', function () {\n        return QJ.removeClass(out, 'jp-card-focused');\n      });\n      QJ.on(el, 'keyup change paste', function (e) {\n        var elem, filter, i, j, join, k, len, len1, outEl, outVal, ref, results, val;\n\n        val = function () {\n          var j, len, results;\n          results = [];\n\n          for (j = 0, len = el.length; j < len; j++) {\n            elem = el[j];\n            results.push(QJ.val(elem));\n          }\n\n          return results;\n        }();\n\n        join = opts.join(val);\n        val = val.join(join);\n\n        if (val === join) {\n          val = \"\";\n        }\n\n        ref = opts.filters;\n\n        for (j = 0, len = ref.length; j < len; j++) {\n          filter = ref[j];\n          val = filter(val, el, out);\n        }\n\n        results = [];\n\n        for (i = k = 0, len1 = out.length; k < len1; i = ++k) {\n          outEl = out[i];\n\n          if (opts.fill) {\n            outVal = val + outDefaults[i].substring(val.length);\n          } else {\n            outVal = val || outDefaults[i];\n          }\n\n          results.push(outEl.textContent = outVal);\n        }\n\n        return results;\n      });\n      return el;\n    };\n\n    return Card;\n  }();\n\n  module.exports = Card;\n  global.Card = Card;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}