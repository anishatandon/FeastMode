{"ast":null,"code":"/*!\n * basic-auth\n * Copyright(c) 2013 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n'use strict';\n/**\n * Module dependencies.\n * @private\n */\n\nvar Buffer = require('safe-buffer').Buffer;\n/**\n * Module exports.\n * @public\n */\n\n\nmodule.exports = auth;\nmodule.exports.parse = parse;\n/**\n * RegExp for basic auth credentials\n *\n * credentials = auth-scheme 1*SP token68\n * auth-scheme = \"Basic\" ; case insensitive\n * token68     = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n * @private\n */\n\nvar CREDENTIALS_REGEXP = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9._~+/-]+=*) *$/;\n/**\n * RegExp for basic auth user/pass\n *\n * user-pass   = userid \":\" password\n * userid      = *<TEXT excluding \":\">\n * password    = *TEXT\n * @private\n */\n\nvar USER_PASS_REGEXP = /^([^:]*):(.*)$/;\n/**\n * Parse the Authorization header field of a request.\n *\n * @param {object} req\n * @return {object} with .name and .pass\n * @public\n */\n\nfunction auth(req) {\n  if (!req) {\n    throw new TypeError('argument req is required');\n  }\n\n  if (typeof req !== 'object') {\n    throw new TypeError('argument req is required to be an object');\n  } // get header\n\n\n  var header = getAuthorization(req); // parse header\n\n  return parse(header);\n}\n/**\n * Decode base64 string.\n * @private\n */\n\n\nfunction decodeBase64(str) {\n  return Buffer.from(str, 'base64').toString();\n}\n/**\n * Get the Authorization header from request object.\n * @private\n */\n\n\nfunction getAuthorization(req) {\n  if (!req.headers || typeof req.headers !== 'object') {\n    throw new TypeError('argument req is required to have headers property');\n  }\n\n  return req.headers.authorization;\n}\n/**\n * Parse basic auth to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\n\nfunction parse(string) {\n  if (typeof string !== 'string') {\n    return undefined;\n  } // parse header\n\n\n  var match = CREDENTIALS_REGEXP.exec(string);\n\n  if (!match) {\n    return undefined;\n  } // decode user pass\n\n\n  var userPass = USER_PASS_REGEXP.exec(decodeBase64(match[1]));\n\n  if (!userPass) {\n    return undefined;\n  } // return credentials object\n\n\n  return new Credentials(userPass[1], userPass[2]);\n}\n/**\n * Object to represent user credentials.\n * @private\n */\n\n\nfunction Credentials(name, pass) {\n  this.name = name;\n  this.pass = pass;\n}","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/server/node_modules/basic-auth/index.js"],"names":["Buffer","require","module","exports","auth","parse","CREDENTIALS_REGEXP","USER_PASS_REGEXP","req","TypeError","header","getAuthorization","decodeBase64","str","from","toString","headers","authorization","string","undefined","match","exec","userPass","Credentials","name","pass"],"mappings":"AAAA;;;;;;;AAQA;AAEA;;;;;AAKA,IAAIA,MAAM,GAAGC,OAAO,CAAC,aAAD,CAAP,CAAuBD,MAApC;AAEA;;;;;;AAKAE,MAAM,CAACC,OAAP,GAAiBC,IAAjB;AACAF,MAAM,CAACC,OAAP,CAAeE,KAAf,GAAuBA,KAAvB;AAEA;;;;;;;;;AASA,IAAIC,kBAAkB,GAAG,wDAAzB;AAEA;;;;;;;;;AASA,IAAIC,gBAAgB,GAAG,gBAAvB;AAEA;;;;;;;;AAQA,SAASH,IAAT,CAAeI,GAAf,EAAoB;AAClB,MAAI,CAACA,GAAL,EAAU;AACR,UAAM,IAAIC,SAAJ,CAAc,0BAAd,CAAN;AACD;;AAED,MAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;AAC3B,UAAM,IAAIC,SAAJ,CAAc,0CAAd,CAAN;AACD,GAPiB,CASlB;;;AACA,MAAIC,MAAM,GAAGC,gBAAgB,CAACH,GAAD,CAA7B,CAVkB,CAYlB;;AACA,SAAOH,KAAK,CAACK,MAAD,CAAZ;AACD;AAED;;;;;;AAKA,SAASE,YAAT,CAAuBC,GAAvB,EAA4B;AAC1B,SAAOb,MAAM,CAACc,IAAP,CAAYD,GAAZ,EAAiB,QAAjB,EAA2BE,QAA3B,EAAP;AACD;AAED;;;;;;AAKA,SAASJ,gBAAT,CAA2BH,GAA3B,EAAgC;AAC9B,MAAI,CAACA,GAAG,CAACQ,OAAL,IAAgB,OAAOR,GAAG,CAACQ,OAAX,KAAuB,QAA3C,EAAqD;AACnD,UAAM,IAAIP,SAAJ,CAAc,mDAAd,CAAN;AACD;;AAED,SAAOD,GAAG,CAACQ,OAAJ,CAAYC,aAAnB;AACD;AAED;;;;;;;;;AAQA,SAASZ,KAAT,CAAgBa,MAAhB,EAAwB;AACtB,MAAI,OAAOA,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,WAAOC,SAAP;AACD,GAHqB,CAKtB;;;AACA,MAAIC,KAAK,GAAGd,kBAAkB,CAACe,IAAnB,CAAwBH,MAAxB,CAAZ;;AAEA,MAAI,CAACE,KAAL,EAAY;AACV,WAAOD,SAAP;AACD,GAVqB,CAYtB;;;AACA,MAAIG,QAAQ,GAAGf,gBAAgB,CAACc,IAAjB,CAAsBT,YAAY,CAACQ,KAAK,CAAC,CAAD,CAAN,CAAlC,CAAf;;AAEA,MAAI,CAACE,QAAL,EAAe;AACb,WAAOH,SAAP;AACD,GAjBqB,CAmBtB;;;AACA,SAAO,IAAII,WAAJ,CAAgBD,QAAQ,CAAC,CAAD,CAAxB,EAA6BA,QAAQ,CAAC,CAAD,CAArC,CAAP;AACD;AAED;;;;;;AAKA,SAASC,WAAT,CAAsBC,IAAtB,EAA4BC,IAA5B,EAAkC;AAChC,OAAKD,IAAL,GAAYA,IAAZ;AACA,OAAKC,IAAL,GAAYA,IAAZ;AACD","sourcesContent":["/*!\n * basic-auth\n * Copyright(c) 2013 TJ Holowaychuk\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2015-2016 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar Buffer = require('safe-buffer').Buffer\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = auth\nmodule.exports.parse = parse\n\n/**\n * RegExp for basic auth credentials\n *\n * credentials = auth-scheme 1*SP token68\n * auth-scheme = \"Basic\" ; case insensitive\n * token68     = 1*( ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\" / \"+\" / \"/\" ) *\"=\"\n * @private\n */\n\nvar CREDENTIALS_REGEXP = /^ *(?:[Bb][Aa][Ss][Ii][Cc]) +([A-Za-z0-9._~+/-]+=*) *$/\n\n/**\n * RegExp for basic auth user/pass\n *\n * user-pass   = userid \":\" password\n * userid      = *<TEXT excluding \":\">\n * password    = *TEXT\n * @private\n */\n\nvar USER_PASS_REGEXP = /^([^:]*):(.*)$/\n\n/**\n * Parse the Authorization header field of a request.\n *\n * @param {object} req\n * @return {object} with .name and .pass\n * @public\n */\n\nfunction auth (req) {\n  if (!req) {\n    throw new TypeError('argument req is required')\n  }\n\n  if (typeof req !== 'object') {\n    throw new TypeError('argument req is required to be an object')\n  }\n\n  // get header\n  var header = getAuthorization(req)\n\n  // parse header\n  return parse(header)\n}\n\n/**\n * Decode base64 string.\n * @private\n */\n\nfunction decodeBase64 (str) {\n  return Buffer.from(str, 'base64').toString()\n}\n\n/**\n * Get the Authorization header from request object.\n * @private\n */\n\nfunction getAuthorization (req) {\n  if (!req.headers || typeof req.headers !== 'object') {\n    throw new TypeError('argument req is required to have headers property')\n  }\n\n  return req.headers.authorization\n}\n\n/**\n * Parse basic auth to object.\n *\n * @param {string} string\n * @return {object}\n * @public\n */\n\nfunction parse (string) {\n  if (typeof string !== 'string') {\n    return undefined\n  }\n\n  // parse header\n  var match = CREDENTIALS_REGEXP.exec(string)\n\n  if (!match) {\n    return undefined\n  }\n\n  // decode user pass\n  var userPass = USER_PASS_REGEXP.exec(decodeBase64(match[1]))\n\n  if (!userPass) {\n    return undefined\n  }\n\n  // return credentials object\n  return new Credentials(userPass[1], userPass[2])\n}\n\n/**\n * Object to represent user credentials.\n * @private\n */\n\nfunction Credentials (name, pass) {\n  this.name = name\n  this.pass = pass\n}\n"]},"metadata":{},"sourceType":"module"}