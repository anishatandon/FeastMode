{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = resizeAndCropImage;\n\nvar _polyfill = require('./polyfill');\n\nvar _polyfill2 = _interopRequireDefault(_polyfill);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction resizeAndCropImage(file, w, h) {\n  if (!HTMLCanvasElement.prototype.toBlob) {\n    (0, _polyfill2.default)();\n  }\n\n  return new Promise(function (resolve, reject) {\n    // Create file reader\n    var reader = new FileReader();\n\n    reader.onload = function (readerEvent) {\n      // Create image object\n      var image = new Image();\n\n      image.onload = function (imageEvent) {\n        // Create canvas or use provided canvas\n        var canvas = document.createElement('canvas');\n        var maxWidth = w || image.width;\n        var maxHeight = h || image.height;\n        canvas.width = maxWidth;\n        canvas.height = maxHeight; // Calculate scaling\n\n        var horizontalScale = maxWidth / image.width;\n        var verticalScale = maxHeight / image.height;\n        var scale = Math.max(horizontalScale, verticalScale); // Calculate cropping\n\n        var width = scale * image.width,\n            height = scale * image.height;\n        var verticalOffset = Math.min((maxHeight - height) / 2, 0);\n        var horizontalOffset = Math.min((maxWidth - width) / 2, 0); // Obtain the context for a 2d drawing\n\n        var context = canvas.getContext('2d');\n\n        if (!context) {\n          return reject('Could not get the context of the canvas element');\n        } // Draw the resized and cropped image\n\n\n        context.drawImage(image, horizontalOffset, verticalOffset, width, height);\n        canvas.toBlob(function (blob) {\n          resolve(blob);\n        }, file.type);\n      };\n\n      image.src = readerEvent.target.result;\n    };\n\n    reader.readAsDataURL(file);\n  });\n}","map":null,"metadata":{},"sourceType":"script"}