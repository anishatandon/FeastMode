{"ast":null,"code":"import * as actions from './actionTypes.js';\nimport { storage } from 'firebase'; // SignUp action\n\nexport const signUp = data => async (dispatch, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(data.email, data.passwordOne);\n    await firestore.collection('friends').doc(res.user.uid).set({\n      friends: [],\n      requests: []\n    }); // Send verification email\n\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    await firestore.collection('users').doc(res.user.uid).set({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      username: data.username,\n      email: data.email,\n      phone: data.phone,\n      creditCard: data.creditCard,\n      creditCardType: data.creditCardType,\n      expDate: data.expDate,\n      secCode: data.secCode,\n      apps: data.apps,\n      imageUrl: \"https://firebasestorage.googleapis.com/v0/b/feast-mode.appspot.com/o/images%2Fuser.png?alt=media&token=0465572a-6147-4017-8589-cd9b17e54f04\"\n    });\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n}; // LogOut action\n\nexport const logOut = () => async ({\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n\n  try {\n    await firebase.auth().signOut();\n  } catch (err) {\n    console.log(err.message);\n  }\n}; // SignIn action\n\nexport const logIn = data => async (dispatch, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n}; // Clean up error messages action\n\nexport const clean = () => ({\n  type: actions.CLEAN_UP\n}); // Send recover password action\n\nexport const recoverPassword = data => async (dispatch, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.RECOVERY_START\n  });\n\n  try {\n    await firebase.auth().sendPasswordResetEmail(data.email);\n    dispatch({\n      type: actions.RECOVERY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.RECOVERY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Verify email action\n\nexport const verifyEmail = () => async (dispatch, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.VERIFY_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    dispatch({\n      type: actions.VERIFY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.VERIFY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Edit profile action\n\nexport const editProfile = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.PROFILE_EDIT_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    const _getState$firebase$au = getState().firebase.auth,\n          userId = _getState$firebase$au.uid,\n          userEmail = _getState$firebase$au.email;\n\n    if (data.email !== userEmail) {\n      await user.updateEmail(data.email);\n    }\n\n    await firestore.collection(\"users\").doc(userId).update({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      username: data.username,\n      phone: data.phone,\n      creditCard: data.creditCard,\n      expDate: data.expDate,\n      secCode: data.secCode,\n      creditCardType: data.creditCardType,\n      apps: data.apps\n    });\n\n    if (data.passwordOne.length > 0) {\n      await user.updatePassword(data.passwordOne);\n    }\n\n    dispatch({\n      type: actions.PROFILE_EDIT_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.PROFILE_EDIT_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const deleteProfile = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.DELETE_PROFILE_START\n  });\n\n  try {\n    const _getState$firebase$au2 = getState().firebase.auth,\n          userId = _getState$firebase$au2.uid,\n          userEmail = _getState$firebase$au2.email;\n    const user = firebase.auth().currentUser;\n    const allFriends = await firestore.collection('friends');\n    data.map(id => async () => {\n      allFriends.doc(id).set({\n        friends: firestore.collection('friends').doc(id).get().data().requests.filter(user => user.friendId == userId),\n        requests: firestore.collection('friends').doc(id).get().data().friends.filter(user => user.friendId == userId)\n      }); // const res = await firestore.collection('friends').doc(id).get();\n      // let v = 1231231\n      // console.log(res)\n      // console.log(v)\n      //     if(res)\n      //     {\n      //         console.log(res)\n      //     const requests = res.data().requests\n      //     const friends = res.data().friends\n      //     if( requests && requests.length !== 0 )\n      //     {\n      //         requests = requests.filter(user => user.friendId == userId)\n      //     }\n      //     if( friends && friends.length !== 0)\n      //     {\n      //         friends = friends.filter(user => user.friendId == userId)\n      //     }\n      //     await firestore.collection('friends').doc(id).set({\n      //         friends: friends,\n      //         requests: requests,\n      //     })\n      //     }\n    }); // firestore.collection('friends').doc(userId).delete();\n    // await firestore.collection('users').doc(userId).delete();\n    // user.delete();\n\n    dispatch({\n      type: actions.DELETE_PROFILE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_PROFILE_FAIL,\n      payload: err.message\n    });\n  }\n}; // Update profile picture action\n\nexport const updateImageUrl = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.PFP_EDIT_START\n  });\n\n  try {\n    const userId = getState().firebase.auth.uid;\n    const imageUrl = getState().firebase.profile.imageUrl;\n    let imageRef = storage().ref(\"images\").child(imageUrl);\n\n    if (imageUrl !== \"https://firebasestorage.googleapis.com/v0/b/feast-mode.appspot.com/o/images%2Fuser.png?alt=media&token=0465572a-6147-4017-8589-cd9b17e54f04\") {\n      imageRef.delete();\n    }\n\n    await firestore.collection(\"users\").doc(userId).update({\n      imageUrl: data\n    });\n    dispatch({\n      type: actions.PFP_EDIT_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.PFP_EDIT_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/backend/store/actions/authActions.js"],"names":["actions","storage","signUp","data","dispatch","getFirebase","getFirestore","firebase","firestore","type","AUTH_START","res","auth","createUserWithEmailAndPassword","email","passwordOne","collection","doc","user","uid","set","friends","requests","currentUser","sendEmailVerification","firstName","lastName","username","phone","creditCard","creditCardType","expDate","secCode","apps","imageUrl","AUTH_SUCCESS","err","AUTH_FAIL","payload","message","logOut","signOut","console","log","logIn","signInWithEmailAndPassword","password","clean","CLEAN_UP","recoverPassword","RECOVERY_START","sendPasswordResetEmail","RECOVERY_SUCCESS","RECOVERY_FAIL","verifyEmail","VERIFY_START","VERIFY_SUCCESS","VERIFY_FAIL","editProfile","getState","PROFILE_EDIT_START","userId","userEmail","updateEmail","update","length","updatePassword","PROFILE_EDIT_SUCCESS","PROFILE_EDIT_FAIL","deleteProfile","DELETE_PROFILE_START","allFriends","map","id","get","filter","friendId","DELETE_PROFILE_SUCCESS","DELETE_PROFILE_FAIL","updateImageUrl","PFP_EDIT_START","profile","imageRef","ref","child","delete","PFP_EDIT_SUCCESS","PFP_EDIT_FAIL"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes.js'\nimport { storage } from 'firebase'\n\n// SignUp action\nexport const signUp = data => async (dispatch, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.AUTH_START })\n\n    try {\n        const res = await firebase\n            .auth()\n            .createUserWithEmailAndPassword(data.email, data.passwordOne)\n\n        await firestore.collection('friends').doc(res.user.uid).set({\n            friends: [],\n            requests: [],\n        })\n\n        // Send verification email\n        const user = firebase.auth().currentUser;\n        await user.sendEmailVerification();\n\n        await firestore.collection('users').doc(res.user.uid).set({ \n            firstName: data.firstName,\n            lastName: data.lastName,\n            username: data.username,\n            email: data.email,\n            phone: data.phone,\n            creditCard: data.creditCard,\n            creditCardType: data.creditCardType,\n            expDate: data.expDate,\n            secCode: data.secCode,\n            apps: data.apps,\n            imageUrl: \"https://firebasestorage.googleapis.com/v0/b/feast-mode.appspot.com/o/images%2Fuser.png?alt=media&token=0465572a-6147-4017-8589-cd9b17e54f04\",\n        })\n\n        dispatch({ type: actions.AUTH_SUCCESS })\n\n    } catch(err) {\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n}\n\n\n// LogOut action\nexport const logOut = () => async ({ getFirebase }) => {\n    const firebase = getFirebase()\n\n    try {\n        await firebase.auth().signOut()\n\n    } catch (err) {\n        console.log(err.message)\n    }\n}\n\n\n// SignIn action\nexport const logIn = data => async (dispatch, { getFirebase }) => {\n    const firebase = getFirebase()\n    dispatch({ type: actions.AUTH_START })\n\n    try {\n        await firebase.auth().signInWithEmailAndPassword(data.email, data.password)\n        dispatch({ type: actions.AUTH_SUCCESS })\n\n    } catch(err) {\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n}\n\n\n// Clean up error messages action\nexport const clean = () => ({\n    type: actions.CLEAN_UP,\n})\n\n\n// Send recover password action\nexport const recoverPassword = data => async (dispatch, {getFirebase}) => {\n    const firebase = getFirebase()\n    dispatch({type: actions.RECOVERY_START})\n\n    try{\n        await firebase.auth().sendPasswordResetEmail(data.email)\n        dispatch({type: actions.RECOVERY_SUCCESS})\n\n    } catch(err) {\n        dispatch({type: actions.RECOVERY_FAIL, payload: err.message})\n    }\n}\n\n\n// Verify email action\nexport const verifyEmail = () => async (dispatch, { getFirebase }) => {\n    const firebase = getFirebase()\n    dispatch({ type: actions.VERIFY_START })\n    \n    try {\n        const user = firebase.auth().currentUser\n        await user.sendEmailVerification()\n        dispatch({ type: actions.VERIFY_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.VERIFY_FAIL, payload: err.message })\n    }\n}\n\n\n// Edit profile action\nexport const editProfile = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.PROFILE_EDIT_START })\n\n    try {\n        const user = firebase.auth().currentUser\n        const {uid: userId, email: userEmail} = getState().firebase.auth\n        if (data.email !== userEmail) {\n            await user.updateEmail(data.email) \n        }\n\n        await firestore.collection(\"users\").doc(userId).update({\n\n            firstName: data.firstName,\n            lastName: data.lastName,\n            username: data.username,\n            phone: data.phone,\n            creditCard: data.creditCard,\n            expDate: data.expDate,\n            secCode: data.secCode,\n            creditCardType: data.creditCardType,\n            apps: data.apps,\n        })\n\n        if (data.passwordOne.length > 0) {\n            await user.updatePassword(data.passwordOne)\n        }\n        dispatch({ type: actions.PROFILE_EDIT_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.PROFILE_EDIT_FAIL, payload: err.message })\n    }\n}\n\n\nexport const deleteProfile = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.DELETE_PROFILE_START })\n\n    try {\n        const {uid: userId, email: userEmail} = getState().firebase.auth\n        const user = firebase.auth().currentUser\n\n        const allFriends = await firestore.collection('friends')\n\n        data.map(id => async () => {\n            allFriends.doc(id).set({\n                friends: firestore.collection('friends').doc(id).get().data().requests.filter(user => user.friendId == userId),\n                requests: firestore.collection('friends').doc(id).get().data().friends.filter(user => user.friendId == userId),\n            })\n            // const res = await firestore.collection('friends').doc(id).get();\n\n            // let v = 1231231\n            // console.log(res)\n            // console.log(v)\n        //     if(res)\n        //     {\n        //         console.log(res)\n            //     const requests = res.data().requests\n            //     const friends = res.data().friends\n\n            //     if( requests && requests.length !== 0 )\n            //     {\n            //         requests = requests.filter(user => user.friendId == userId)\n            //     }\n\n            //     if( friends && friends.length !== 0)\n            //     {\n            //         friends = friends.filter(user => user.friendId == userId)\n            //     }\n\n            //     await firestore.collection('friends').doc(id).set({\n            //         friends: friends,\n            //         requests: requests,\n            //     })\n        //     }\n        })\n\n        // firestore.collection('friends').doc(userId).delete();\n        // await firestore.collection('users').doc(userId).delete();\n        // user.delete();\n        \n        dispatch({ type: actions.DELETE_PROFILE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.DELETE_PROFILE_FAIL, payload: err.message })\n    }\n}\n\n\n// Update profile picture action\nexport const updateImageUrl = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.PFP_EDIT_START })\n\n    try {\n        const {uid: userId} = getState().firebase.auth\n        const {imageUrl} = getState().firebase.profile\n        let imageRef = storage().ref(\"images\").child(imageUrl)\n\n        if (imageUrl !== \"https://firebasestorage.googleapis.com/v0/b/feast-mode.appspot.com/o/images%2Fuser.png?alt=media&token=0465572a-6147-4017-8589-cd9b17e54f04\") {\n            imageRef.delete()\n        }\n\n        await firestore.collection(\"users\").doc(userId).update({\n            imageUrl: data\n        })\n        dispatch({ type: actions.PFP_EDIT_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.PFP_EDIT_FAIL, payload: err.message })\n    }\n}"]},"metadata":{},"sourceType":"module"}