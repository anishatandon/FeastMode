{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Food/PickFood.js\";\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst PickFood = () => {\n  const ezPizzaAPI = require('ez-pizza-api');\n\n  (async () => {\n    const cityRegionOrPostalCode = 'Denver, CO, 80202';\n    const streetAddress = '1280 Grant St'; // Get a full list of stores near an address\n\n    const storesResult = await ezPizzaAPI.getStoresNearAddress(ezPizzaAPI.orderTypes.Carryout, cityRegionOrPostalCode); // Get basic info about nearest delivery store to address\n\n    const storeResult = await ezPizzaAPI.getNearestDeliveryStore(cityRegionOrPostalCode, streetAddress); // Get full info about specified store\n\n    const storeInfo = await ezPizzaAPI.getStoreInfo(storeResult.StoreID); // Get full menu for the specified store\n\n    const storeMenu = await ezPizzaAPI.getStoreMenu(storeResult.StoreID);\n    const couponId = '9193'; // Get info for the specified store and coupon\n    // Coupon ID found in the above menu request\n\n    const coupon = await ezPizzaAPI.getStoreCoupon(storeResult.StoreID, couponId); // Create an Order with the following properties\n\n    const order = {\n      Order: {\n        Address: {\n          // <- Update this\n          Street: '123 Sesame St.',\n          City: 'New York',\n          Region: 'NY',\n          PostalCode: '10001',\n          Type: 'House',\n          StreetName: 'Sesame St',\n          StreetNumber: '123'\n        },\n        // Specify any coupons here, leave empty if not using a coupon\n        Coupons: [{\n          Code: couponId,\n          Qty: 1,\n          ID: 2 // Specify your own IDs, increment if more than 1 specified\n\n        }],\n        Email: 'coolguy@gmail.com',\n        // <- Update this\n        FirstName: 'Cool',\n        // <- Update this\n        LastName: 'Guy',\n        // <- Update this\n        LanguageCode: 'en',\n        OrderChannel: 'OLO',\n        OrderMethod: 'Web',\n        OrderTaker: null,\n        Payments: [],\n        Phone: '1234567890',\n        // <- Update this\n        PhonePrefix: '1',\n        // <- Update this\n        // An array of products. Find the corresponding code and available options in the menu response.\n        Products: [{\n          Code: '12THIN',\n          Qty: 1,\n          isNew: true,\n          Options: {\n            X: {\n              '1/1': '1'\n            },\n            C: {\n              '1/1': '1'\n            },\n            Sa: {\n              '1/1': '1'\n            },\n            J: {\n              '1/2': '1'\n            },\n            Z: {\n              '2/2': '1'\n            }\n          }\n        }, {\n          Code: 'MARBRWNE',\n          Qty: 1,\n          isNew: true,\n          Options: {}\n        }, {\n          Code: 'B16PBIT',\n          Options: {},\n          Qty: 1,\n          isNew: true\n        }],\n        ServiceMethod: ezPizzaAPI.orderTypes.Delivery,\n        // <- Update this can be Delivery or Carryout\n        SourceOrganizationURI: 'order.dominos.com',\n        StoreID: storeResult.StoreID,\n        Tags: {},\n        Version: '1.0',\n        NoCombine: true,\n        Partners: {},\n        OrderInfoCollection: []\n      }\n    };\n    const orderValid = await ezPizzaAPI.validateOrder(order);\n    order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n    const pricedOrder = await ezPizzaAPI.priceOrder(order);\n    const Amount = pricedOrder.Order.Amounts.Customer; // get total amount for order\n    // specify the amount and credit card info OR see how to use cash on delivery below\n\n    order.Order.Payments.push({\n      Amount,\n      Type: 'CreditCard',\n      Number: 'â€‹4242424242424242',\n      CardType: 'VISA',\n      Expiration: '0424',\n      SecurityCode: '424',\n      PostalCode: '80202'\n    }); // OR\n    // specify the amount type as Cash\n\n    order.Order.Payments.push({\n      Amount,\n      Type: 'Cash' // <- Pay cash on delivery\n\n    });\n    const placedOrder = await ezPizzaAPI.placeOrder(order); // For a succesful order, look for:\n    // StoreOrderID\n    // EmailHash\n    // StatusItems: [ { Code: 'Success' } ] }\n    // Be sure to check your email before trying again.\n    // Sometimes this has a failure status but the order still goes through...\n\n    console.log(placedOrder); // Getting the orderID may vary. Validate by looking at the placedOrder response\n\n    const orderID = placedOrder.Order.StoreOrderID.split('#')[1]; // <- This might change depending on store\n\n    const orderStatus = await ezPizzaAPI.trackOrder(storeResult.StoreID, orderID);\n    console.log(orderStatus);\n  })();\n\n  return React.createElement(\"div\", {\n    className: \"restaurants\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"h1\", {\n    className: \"title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \" keep this here for now, use for dominos? Ahgjkdwefgiew\"), React.createElement(\"button\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Click click\"));\n};\n\nexport default PickFood;","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Food/PickFood.js"],"names":["React","Link","ROUTES","PickFood","ezPizzaAPI","require","cityRegionOrPostalCode","streetAddress","storesResult","getStoresNearAddress","orderTypes","Carryout","storeResult","getNearestDeliveryStore","storeInfo","getStoreInfo","StoreID","storeMenu","getStoreMenu","couponId","coupon","getStoreCoupon","order","Order","Address","Street","City","Region","PostalCode","Type","StreetName","StreetNumber","Coupons","Code","Qty","ID","Email","FirstName","LastName","LanguageCode","OrderChannel","OrderMethod","OrderTaker","Payments","Phone","PhonePrefix","Products","isNew","Options","X","C","Sa","J","Z","ServiceMethod","Delivery","SourceOrganizationURI","Tags","Version","NoCombine","Partners","OrderInfoCollection","orderValid","validateOrder","OrderID","pricedOrder","priceOrder","Amount","Amounts","Customer","push","Number","CardType","Expiration","SecurityCode","placedOrder","placeOrder","console","log","orderID","StoreOrderID","split","orderStatus","trackOrder"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Link } from 'react-router-dom';\nimport * as ROUTES from '../../constants/routes';\n\nconst PickFood = () => {\n\n    const ezPizzaAPI = require('ez-pizza-api');\n\n(async () => {\n  const cityRegionOrPostalCode = 'Denver, CO, 80202';\n  const streetAddress = '1280 Grant St';\n\n  // Get a full list of stores near an address\n  const storesResult = await ezPizzaAPI\n    .getStoresNearAddress(ezPizzaAPI.orderTypes.Carryout, cityRegionOrPostalCode);\n\n  // Get basic info about nearest delivery store to address\n  const storeResult = await ezPizzaAPI\n    .getNearestDeliveryStore(cityRegionOrPostalCode, streetAddress);\n\n  // Get full info about specified store\n  const storeInfo = await ezPizzaAPI\n    .getStoreInfo(storeResult.StoreID);\n\n  // Get full menu for the specified store\n  const storeMenu = await ezPizzaAPI\n    .getStoreMenu(storeResult.StoreID);\n\n  const couponId = '9193';\n  // Get info for the specified store and coupon\n  // Coupon ID found in the above menu request\n  const coupon = await ezPizzaAPI\n    .getStoreCoupon(storeResult.StoreID, couponId);\n\n  // Create an Order with the following properties\n  const order = {\n    Order: {\n      Address: { // <- Update this\n        Street: '123 Sesame St.',\n        City: 'New York',\n        Region: 'NY',\n        PostalCode: '10001',\n        Type: 'House',\n        StreetName: 'Sesame St',\n        StreetNumber: '123',\n      },\n      // Specify any coupons here, leave empty if not using a coupon\n      Coupons: [{\n        Code: couponId,\n        Qty: 1,\n        ID: 2, // Specify your own IDs, increment if more than 1 specified\n      }],\n      Email: 'coolguy@gmail.com', // <- Update this\n      FirstName: 'Cool', // <- Update this\n      LastName: 'Guy', // <- Update this\n      LanguageCode: 'en',\n      OrderChannel: 'OLO',\n      OrderMethod: 'Web',\n      OrderTaker: null,\n      Payments: [],\n      Phone: '1234567890', // <- Update this\n      PhonePrefix: '1', // <- Update this\n      // An array of products. Find the corresponding code and available options in the menu response.\n      Products: [{\n        Code: '12THIN',\n        Qty: 1,\n        isNew: true,\n        Options: {\n          X: {\n            '1/1': '1',\n          },\n          C: {\n            '1/1': '1',\n          },\n          Sa: {\n            '1/1': '1',\n          },\n          J: {\n            '1/2': '1',\n          },\n          Z: {\n            '2/2': '1',\n          },\n        },\n      }, {\n        Code: 'MARBRWNE',\n        Qty: 1,\n        isNew: true,\n        Options: {},\n      }, {\n        Code: 'B16PBIT',\n        Options: {},\n        Qty: 1,\n        isNew: true,\n      }],\n      ServiceMethod: ezPizzaAPI.orderTypes.Delivery, // <- Update this can be Delivery or Carryout\n      SourceOrganizationURI: 'order.dominos.com',\n      StoreID: storeResult.StoreID,\n      Tags: {},\n      Version: '1.0',\n      NoCombine: true,\n      Partners: {},\n      OrderInfoCollection: [],\n    },\n  };\n\n  const orderValid = await ezPizzaAPI.validateOrder(order);\n  order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n  const pricedOrder = await ezPizzaAPI.priceOrder(order);\n  const Amount = pricedOrder.Order.Amounts.Customer; // get total amount for order\n\n  // specify the amount and credit card info OR see how to use cash on delivery below\n  order.Order.Payments.push({\n    Amount,\n    Type: 'CreditCard',\n    Number: 'â€‹4242424242424242',\n    CardType: 'VISA',\n    Expiration: '0424',\n    SecurityCode: '424',\n    PostalCode: '80202',\n  });\n\n  // OR\n  // specify the amount type as Cash\n  order.Order.Payments.push({\n    Amount,\n    Type: 'Cash', // <- Pay cash on delivery\n  });\n\n  const placedOrder = await ezPizzaAPI.placeOrder(order);\n  // For a succesful order, look for:\n  // StoreOrderID\n  // EmailHash\n  // StatusItems: [ { Code: 'Success' } ] }\n\n  // Be sure to check your email before trying again.\n  // Sometimes this has a failure status but the order still goes through...\n  console.log(placedOrder);\n\n  // Getting the orderID may vary. Validate by looking at the placedOrder response\n  const orderID = placedOrder.Order.StoreOrderID.split('#')[1]; // <- This might change depending on store\n  const orderStatus = await ezPizzaAPI.trackOrder(storeResult.StoreID, orderID);\n  console.log(orderStatus);\n})();\n\n    return (\n        <div className = \"restaurants\">\n            <h1 className = \"title\"> keep this here for now, use for dominos? Ahgjkdwefgiew</h1>\n            <button>Click click</button>\n        </div>\n    )\n}\n\nexport default PickFood"]},"metadata":{},"sourceType":"module"}