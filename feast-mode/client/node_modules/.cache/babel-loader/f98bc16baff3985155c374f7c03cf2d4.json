{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/LogIn/index.js\";\nimport React, { useEffect } from 'react';\nimport { Field, ErrorMessage, Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport * as actions from '../../../backend/store/actions';\nimport LogInSchema from './LogInSchemas.js';\nimport { StyledForm } from '../../../style/UI/FormWrappers.js';\nimport TextInput from '../../../style/UI/Inputs.js';\nimport Button from '../../../style/UI/Buttons.js';\nimport { Message, MessageWrapper } from '../../../style/UI/Message.js';\n\nconst LogInForm = ({\n  login,\n  loading,\n  error,\n  cleanUp\n}) => {\n  useEffect(() => {\n    return () => {\n      cleanUp();\n    };\n  }, [cleanUp]);\n  return React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    validationSchema: LogInSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setSubmitting\n    }) => {\n      await login(values);\n      resetForm();\n      setSubmitting(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, ({\n    isSubmitting,\n    isValid\n  }) => React.createElement(StyledForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(Field, {\n    name: \"email\",\n    type: \"email\",\n    placeholder: \"Your email...\",\n    component: Input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(Field, {\n    name: \"password\",\n    type: \"password\",\n    placeholder: \"Your password...\",\n    component: Input,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), \" \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }), React.createElement(Button, {\n    disabled: !isValid || isSubmitting,\n    loading: loading ? 'Logging in...' : null,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Log In\"), React.createElement(MessageWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Message, {\n    error: true,\n    show: error,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, error))));\n};\n\nconst mapStateToProps = ({\n  auth\n}) => ({\n  loading: auth.loading,\n  error: auth.error\n});\n\nconst mapDispatchToProps = {\n  login: actions.logIn,\n  cleanUp: actions.clean\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(LogInForm);","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/LogIn/index.js"],"names":["React","useEffect","Field","ErrorMessage","Formik","connect","actions","LogInSchema","StyledForm","TextInput","Button","Message","MessageWrapper","LogInForm","login","loading","error","cleanUp","email","password","values","resetForm","setSubmitting","isSubmitting","isValid","Input","mapStateToProps","auth","mapDispatchToProps","logIn","clean"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react'\nimport { Field, ErrorMessage, Formik } from 'formik'\nimport { connect } from 'react-redux'\n\nimport * as actions from '../../../backend/store/actions'\nimport LogInSchema from './LogInSchemas.js'\n\nimport { StyledForm } from '../../../style/UI/FormWrappers.js'\nimport TextInput from '../../../style/UI/Inputs.js'\nimport Button from '../../../style/UI/Buttons.js'\nimport { Message, MessageWrapper } from '../../../style/UI/Message.js'\n\nconst LogInForm = ({ login, loading, error, cleanUp }) => {\n  useEffect(() => {\n    return () => {\n      cleanUp()\n    }\n  }, [cleanUp])\n\n  return(\n    <Formik\n      initialValues = {{\n        email: \"\",\n        password: \"\",\n      }}\n      validationSchema = {LogInSchema}\n      onSubmit = {async ( values, { resetForm, setSubmitting }) => {\n        await login(values)\n        resetForm()\n        setSubmitting(false)\n      }}\n    >\n      {({ isSubmitting, isValid }) => (\n        <StyledForm>\n          \n          <Field name = \"email\" type = \"email\" placeholder = \"Your email...\" component = {Input}/> <br/>\n          <Field name = \"password\" type = \"password\" placeholder = \"Your password...\" component = {Input}/> <br/>\n\n          <Button\n            disabled = {!isValid || isSubmitting}\n            loading = {loading ? 'Logging in...' : null}\n            type = \"submit\"\n          > \n            Log In \n          </Button>\n\n          <MessageWrapper>\n            <Message error show = {error}>\n              {error}\n            </Message>\n          </MessageWrapper>\n\n        </StyledForm>\n      )}\n    </Formik>\n  )\n}\n\nconst mapStateToProps = ({ auth }) => ({\n  loading: auth.loading,\n  error: auth.error,\n})\n\nconst mapDispatchToProps = {\n  login: actions.logIn,\n  cleanUp: actions.clean,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogInForm)"]},"metadata":{},"sourceType":"module"}