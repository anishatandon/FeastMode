{"ast":null,"code":"const express = require(\"express\");\n\nconst cors = require(\"cors\");\n\nconst morgan = require(\"morgan\");\n\nconst fetch = require(\"node-fetch\");\n\nrequire(\"dotenv\").config();\n\nconst API_URL = 'https://order.dominos.com/power';\nconst app = express();\napp.use(morgan(\"tiny\"));\napp.use(cors());\nconst cityRegionOrPostalCode = 'Claremont, CA, 91711';\nconst streetAddress = '';\nconst orderType = 'Delivery';\n\nasync function getStoresNearAddress(orderType, cityRegionOrPostalCode = '', streetAddress = '') {\n  const response = await app.get(\"/dominos\", (req, res) => {\n    fetch(\"\".concat(API_URL, \"/store-locator?type=\").concat(orderType, \"&c=\").concat(cityRegionOrPostalCode, \"&s=\").concat(streetAddress)).then(response => response.json()).then(json => {\n      res.json(json.Stores[0]);\n    });\n  });\n  return response.json();\n}\n\nfunction notFound(req, res, next) {\n  res.status(404);\n  const error = new Error(\"Not Found\");\n  next(error);\n}\n\nfunction errorHandler(error, req, res, next) {\n  res.status(res.statusCode || 500);\n  res.json({\n    message: error.message\n  });\n}\n\ngetStoresNearAddress(orderType, cityRegionOrPostalCode, streetAddress);\napp.use(notFound);\napp.use(errorHandler);\nconst port = process.env.PORT || 5000;\napp.listen(port, () => {\n  console.log(\"Listening on port\", port);\n});","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/server/index.js"],"names":["express","require","cors","morgan","fetch","config","API_URL","app","use","cityRegionOrPostalCode","streetAddress","orderType","getStoresNearAddress","response","get","req","res","then","json","Stores","notFound","next","status","error","Error","errorHandler","statusCode","message","port","process","env","PORT","listen","console","log"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAE,MAAF,CAApB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAE,QAAF,CAAtB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,YAAD,CAArB;;AACAA,OAAO,CAAE,QAAF,CAAP,CAAmBI,MAAnB;;AAEA,MAAMC,OAAO,GAAG,iCAAhB;AAEA,MAAMC,GAAG,GAAGP,OAAO,EAAnB;AACAO,GAAG,CAACC,GAAJ,CAAQL,MAAM,CAAC,MAAD,CAAd;AACAI,GAAG,CAACC,GAAJ,CAAQN,IAAI,EAAZ;AAEA,MAAMO,sBAAsB,GAAG,sBAA/B;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA,MAAMC,SAAS,GAAG,UAAlB;;AAEA,eAAeC,oBAAf,CACID,SADJ,EAEIF,sBAAsB,GAAG,EAF7B,EAGIC,aAAa,GAAG,EAHpB,EAII;AACA,QAAMG,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAJ,CAAQ,UAAR,EAAoB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrDZ,IAAAA,KAAK,WAAIE,OAAJ,iCAAkCK,SAAlC,gBAAiDF,sBAAjD,gBAA6EC,aAA7E,EAAL,CACKO,IADL,CACUJ,QAAQ,IAAIA,QAAQ,CAACK,IAAT,EADtB,EAEKD,IAFL,CAEUC,IAAI,IAAI;AACVF,MAAAA,GAAG,CAACE,IAAJ,CAASA,IAAI,CAACC,MAAL,CAAY,CAAZ,CAAT;AACH,KAJL;AAKH,GANsB,CAAvB;AAOA,SAAON,QAAQ,CAACK,IAAT,EAAP;AACH;;AAED,SAASE,QAAT,CAAkBL,GAAlB,EAAuBC,GAAvB,EAA4BK,IAA5B,EAAkC;AAC9BL,EAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX;AACA,QAAMC,KAAK,GAAG,IAAIC,KAAJ,CAAU,WAAV,CAAd;AACAH,EAAAA,IAAI,CAACE,KAAD,CAAJ;AACH;;AAED,SAASE,YAAT,CAAsBF,KAAtB,EAA6BR,GAA7B,EAAkCC,GAAlC,EAAuCK,IAAvC,EAA6C;AACzCL,EAAAA,GAAG,CAACM,MAAJ,CAAWN,GAAG,CAACU,UAAJ,IAAkB,GAA7B;AACAV,EAAAA,GAAG,CAACE,IAAJ,CAAS;AACLS,IAAAA,OAAO,EAAEJ,KAAK,CAACI;AADV,GAAT;AAGH;;AAEDf,oBAAoB,CAACD,SAAD,EAAYF,sBAAZ,EAAoCC,aAApC,CAApB;AACAH,GAAG,CAACC,GAAJ,CAAQY,QAAR;AACAb,GAAG,CAACC,GAAJ,CAAQiB,YAAR;AAEA,MAAMG,IAAI,GAAGC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAxB,GAAG,CAACyB,MAAJ,CAAWJ,IAAX,EAAiB,MAAM;AACnBK,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCN,IAAjC;AACH,CAFD","sourcesContent":["const express = require(\"express\")\nconst cors = require (\"cors\")\nconst morgan = require (\"morgan\")\nconst fetch = require(\"node-fetch\")\nrequire (\"dotenv\").config()\n\nconst API_URL = 'https://order.dominos.com/power';\n\nconst app = express()\napp.use(morgan(\"tiny\"))\napp.use(cors())\n\nconst cityRegionOrPostalCode = 'Claremont, CA, 91711';\nconst streetAddress = ''\nconst orderType = 'Delivery'\n\nasync function getStoresNearAddress(\n    orderType,\n    cityRegionOrPostalCode = '',\n    streetAddress = '',\n  ) {\n    const response = await app.get(\"/dominos\", (req, res) => {\n        fetch(`${API_URL}/store-locator?type=${orderType}&c=${cityRegionOrPostalCode}&s=${streetAddress}`)\n            .then(response => response.json())\n            .then(json => {\n                res.json(json.Stores[0])\n            })\n    });\n    return response.json();\n}\n\nfunction notFound(req, res, next) {\n    res.status(404)\n    const error = new Error(\"Not Found\")\n    next(error)\n}\n\nfunction errorHandler(error, req, res, next) {\n    res.status(res.statusCode || 500)\n    res.json({\n        message: error.message\n    })\n}\n\ngetStoresNearAddress(orderType, cityRegionOrPostalCode, streetAddress)\napp.use(notFound)\napp.use(errorHandler)\n\nconst port = process.env.PORT || 5000\napp.listen(port, () => {\n    console.log(\"Listening on port\", port)\n})"]},"metadata":{},"sourceType":"module"}