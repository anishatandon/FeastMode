{"ast":null,"code":"var _jsxFileName = \"/Users/summer19/Desktop/FeastMode/feast-mode/client/src/components/Location/Map.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nconst evtNames = ['click', 'dragend'];\nexport class Map extends React.Component {\n  constructor(props) {\n    super(props);\n    const _this$props$initialCe = this.props.initialCenter,\n          lat = _this$props$initialCe.lat,\n          lng = _this$props$initialCe.lng;\n    this.state = {\n      currentLocation: {\n        lat: lat,\n        lng: lng\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevProps.google !== this.props.google) {\n      this.loadMap();\n    }\n\n    if (prevState.currentLocation !== this.state.currentLocation) {\n      this.recenterMap();\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.centerAroundCurrentLocation) {\n      if (navigator && navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(pos => {\n          const coords = pos.coords;\n          this.setState({\n            currentLocation: {\n              lat: coords.latitude,\n              lng: coords.longitude\n            }\n          });\n        });\n      }\n    }\n\n    this.loadMap();\n  }\n\n  handleEvent(evtName) {\n    let timeout;\n    const handlerName = evtName;\n    return e => {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n\n      timeout = setTimeout(() => {\n        if (this.props[handlerName]) {\n          this.props[handlerName](this.props, this.map, e);\n        }\n      }, 0);\n    };\n  }\n\n  loadMap() {\n    if (this.props && this.props.google) {\n      // google is available\n      const google = this.props.google;\n      const maps = google.maps;\n      const mapRef = this.refs.map;\n      const node = ReactDOM.findDOMNode(mapRef);\n      let _this$props = this.props,\n          initialCenter = _this$props.initialCenter,\n          zoom = _this$props.zoom;\n      const _this$state$currentLo = this.state.currentLocation,\n            lat = _this$state$currentLo.lat,\n            lng = _this$state$currentLo.lng;\n      const center = new maps.LatLng(lat, lng);\n      const mapConfig = Object.assign({}, {\n        center: center,\n        zoom: zoom\n      });\n      this.map = new maps.Map(node, mapConfig);\n      evtNames.forEach(e => {\n        this.map.addListener(e, this.handleEvent(e));\n      });\n      let centerChangedTimeout;\n      this.map.addListener('dragend', evt => {\n        if (centerChangedTimeout) {\n          clearTimeout(centerChangedTimeout);\n          centerChangedTimeout = null;\n        }\n\n        centerChangedTimeout = setTimeout(() => {\n          this.props.onMove(this.map);\n        }, 0);\n      });\n    }\n  }\n\n  recenterMap() {\n    const map = this.map;\n    const curr = this.state.currentLocation;\n    const google = this.props.google;\n    const maps = google.maps;\n\n    if (map) {\n      let center = new maps.LatLng(curr.lat, curr.lng);\n      map.panTo(center);\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: \"map\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, \"Loading map...\");\n  }\n\n}\nMap.propTypes = {\n  google: PropTypes.object,\n  zoom: PropTypes.number,\n  initialCenter: PropTypes.object,\n  centerAroundCurrentLocation: PropTypes.bool,\n  onMove: PropTypes.func\n};\nMap.defaultProps = {\n  onMove: function () {},\n  // default prop\n  zoom: 13,\n  // San Francisco, by default\n  initialCenter: {\n    lat: 37.774929,\n    lng: -122.419416\n  },\n  centerAroundCurrentLocation: false\n};\nexport default Map;","map":{"version":3,"sources":["/Users/summer19/Desktop/FeastMode/feast-mode/client/src/components/Location/Map.js"],"names":["React","ReactDOM","PropTypes","evtNames","Map","Component","constructor","props","initialCenter","lat","lng","state","currentLocation","componentDidUpdate","prevProps","prevState","google","loadMap","recenterMap","componentDidMount","centerAroundCurrentLocation","navigator","geolocation","getCurrentPosition","pos","coords","setState","latitude","longitude","handleEvent","evtName","timeout","handlerName","e","clearTimeout","setTimeout","map","maps","mapRef","refs","node","findDOMNode","zoom","center","LatLng","mapConfig","Object","assign","forEach","addListener","centerChangedTimeout","evt","onMove","curr","panTo","render","propTypes","object","number","bool","func","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAIA,MAAMC,QAAQ,GAAG,CAAC,OAAD,EAAU,SAAV,CAAjB;AAEA,OAAO,MAAMC,GAAN,SAAkBJ,KAAK,CAACK,SAAxB,CAAkC;AACrCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,kCAGI,KAAKA,KAAL,CAAWC,aAHf;AAAA,UAGRC,GAHQ,yBAGRA,GAHQ;AAAA,UAGHC,GAHG,yBAGHA,GAHG;AAIf,SAAKC,KAAL,GAAa;AACTC,MAAAA,eAAe,EAAE;AACbH,QAAAA,GAAG,EAAEA,GADQ;AAEbC,QAAAA,GAAG,EAAEA;AAFQ;AADR,KAAb;AAMH;;AAGDG,EAAAA,kBAAkB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACrC,QAAID,SAAS,CAACE,MAAV,KAAqB,KAAKT,KAAL,CAAWS,MAApC,EAA4C;AACxC,WAAKC,OAAL;AACH;;AACD,QAAIF,SAAS,CAACH,eAAV,KAA8B,KAAKD,KAAL,CAAWC,eAA7C,EAA8D;AAC1D,WAAKM,WAAL;AACH;AACF;;AAGHC,EAAAA,iBAAiB,GAAG;AAChB,QAAI,KAAKZ,KAAL,CAAWa,2BAAf,EAA4C;AACxC,UAAIC,SAAS,IAAIA,SAAS,CAACC,WAA3B,EAAwC;AACpCD,QAAAA,SAAS,CAACC,WAAV,CAAsBC,kBAAtB,CAA0CC,GAAD,IAAS;AAC9C,gBAAMC,MAAM,GAAGD,GAAG,CAACC,MAAnB;AACA,eAAKC,QAAL,CAAc;AACVd,YAAAA,eAAe,EAAE;AACbH,cAAAA,GAAG,EAAEgB,MAAM,CAACE,QADC;AAEbjB,cAAAA,GAAG,EAAEe,MAAM,CAACG;AAFC;AADP,WAAd;AAMH,SARD;AASH;AACJ;;AACD,SAAKX,OAAL;AACH;;AAGDY,EAAAA,WAAW,CAACC,OAAD,EAAU;AACjB,QAAIC,OAAJ;AACA,UAAMC,WAAW,GAAGF,OAApB;AAEA,WAAQG,CAAD,IAAO;AACV,UAAIF,OAAJ,EAAa;AACTG,QAAAA,YAAY,CAACH,OAAD,CAAZ;AACAA,QAAAA,OAAO,GAAG,IAAV;AACH;;AACDA,MAAAA,OAAO,GAAGI,UAAU,CAAC,MAAM;AACvB,YAAI,KAAK5B,KAAL,CAAWyB,WAAX,CAAJ,EAA6B;AAC7B,eAAKzB,KAAL,CAAWyB,WAAX,EAAwB,KAAKzB,KAA7B,EAAoC,KAAK6B,GAAzC,EAA8CH,CAA9C;AACC;AACJ,OAJmB,EAIjB,CAJiB,CAApB;AAKH,KAVD;AAYH;;AAGDhB,EAAAA,OAAO,GAAG;AACN,QAAI,KAAKV,KAAL,IAAc,KAAKA,KAAL,CAAWS,MAA7B,EAAqC;AACjC;AADiC,YAE1BA,MAF0B,GAEhB,KAAKT,KAFW,CAE1BS,MAF0B;AAGjC,YAAMqB,IAAI,GAAGrB,MAAM,CAACqB,IAApB;AAEA,YAAMC,MAAM,GAAG,KAAKC,IAAL,CAAUH,GAAzB;AACA,YAAMI,IAAI,GAAGvC,QAAQ,CAACwC,WAAT,CAAqBH,MAArB,CAAb;AANiC,wBAQL,KAAK/B,KARA;AAAA,UAQ5BC,aAR4B,eAQ5BA,aAR4B;AAAA,UAQbkC,IARa,eAQbA,IARa;AAAA,oCASd,KAAK/B,KAAL,CAAWC,eATG;AAAA,YAS1BH,GAT0B,yBAS1BA,GAT0B;AAAA,YASrBC,GATqB,yBASrBA,GATqB;AAUjC,YAAMiC,MAAM,GAAG,IAAIN,IAAI,CAACO,MAAT,CAAgBnC,GAAhB,EAAqBC,GAArB,CAAf;AACA,YAAMmC,SAAS,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB;AAChCJ,QAAAA,MAAM,EAAEA,MADwB;AAEhCD,QAAAA,IAAI,EAAEA;AAF0B,OAAlB,CAAlB;AAKA,WAAKN,GAAL,GAAW,IAAIC,IAAI,CAACjC,GAAT,CAAaoC,IAAb,EAAmBK,SAAnB,CAAX;AAGA1C,MAAAA,QAAQ,CAAC6C,OAAT,CAAiBf,CAAC,IAAI;AAClB,aAAKG,GAAL,CAASa,WAAT,CAAqBhB,CAArB,EAAwB,KAAKJ,WAAL,CAAiBI,CAAjB,CAAxB;AACH,OAFD;AAKA,UAAIiB,oBAAJ;AACA,WAAKd,GAAL,CAASa,WAAT,CAAqB,SAArB,EAAiCE,GAAD,IAAS;AACrC,YAAID,oBAAJ,EAA0B;AACtBhB,UAAAA,YAAY,CAACgB,oBAAD,CAAZ;AACAA,UAAAA,oBAAoB,GAAG,IAAvB;AACH;;AACDA,QAAAA,oBAAoB,GAAGf,UAAU,CAAC,MAAM;AACxC,eAAK5B,KAAL,CAAW6C,MAAX,CAAkB,KAAKhB,GAAvB;AACC,SAFgC,EAE9B,CAF8B,CAAjC;AAGH,OARD;AASH;AACJ;;AAGDlB,EAAAA,WAAW,GAAG;AACV,UAAMkB,GAAG,GAAG,KAAKA,GAAjB;AACA,UAAMiB,IAAI,GAAG,KAAK1C,KAAL,CAAWC,eAAxB;AAEA,UAAMI,MAAM,GAAG,KAAKT,KAAL,CAAWS,MAA1B;AACA,UAAMqB,IAAI,GAAGrB,MAAM,CAACqB,IAApB;;AAEA,QAAID,GAAJ,EAAS;AACL,UAAIO,MAAM,GAAG,IAAIN,IAAI,CAACO,MAAT,CAAgBS,IAAI,CAAC5C,GAArB,EAA0B4C,IAAI,CAAC3C,GAA/B,CAAb;AACA0B,MAAAA,GAAG,CAACkB,KAAJ,CAAUX,MAAV;AACH;AACN;;AAGCY,EAAAA,MAAM,GAAG;AACL,WACI;AAAK,MAAA,GAAG,EAAC,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADJ;AAKH;;AAxHoC;AA2HvCnD,GAAG,CAACoD,SAAJ,GAAgB;AACdxC,EAAAA,MAAM,EAAEd,SAAS,CAACuD,MADJ;AAEdf,EAAAA,IAAI,EAAExC,SAAS,CAACwD,MAFF;AAGdlD,EAAAA,aAAa,EAAEN,SAAS,CAACuD,MAHX;AAIdrC,EAAAA,2BAA2B,EAAElB,SAAS,CAACyD,IAJzB;AAKdP,EAAAA,MAAM,EAAElD,SAAS,CAAC0D;AALJ,CAAhB;AAOAxD,GAAG,CAACyD,YAAJ,GAAmB;AACjBT,EAAAA,MAAM,EAAE,YAAW,CAAE,CADJ;AACM;AACvBV,EAAAA,IAAI,EAAE,EAFW;AAGjB;AACAlC,EAAAA,aAAa,EAAE;AACbC,IAAAA,GAAG,EAAE,SADQ;AAEbC,IAAAA,GAAG,EAAE,CAAC;AAFO,GAJE;AAQjBU,EAAAA,2BAA2B,EAAE;AARZ,CAAnB;AAYF,eAAehB,GAAf","sourcesContent":["import React from 'react'\nimport ReactDOM from 'react-dom'\nimport PropTypes from 'prop-types';\n\n\n\nconst evtNames = ['click', 'dragend'];\n\nexport class Map extends React.Component {\n    constructor(props) {\n        super(props);\n    \n        const {lat, lng} = this.props.initialCenter;\n        this.state = {\n            currentLocation: {\n                lat: lat,\n                lng: lng\n            }\n        }\n    }\n\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.google !== this.props.google) {\n            this.loadMap();\n        }\n        if (prevState.currentLocation !== this.state.currentLocation) {\n            this.recenterMap();\n        }\n      }\n    \n\n    componentDidMount() {\n        if (this.props.centerAroundCurrentLocation) {\n            if (navigator && navigator.geolocation) {\n                navigator.geolocation.getCurrentPosition((pos) => {\n                    const coords = pos.coords;\n                    this.setState({\n                        currentLocation: {\n                            lat: coords.latitude,\n                            lng: coords.longitude\n                        }\n                    })\n                })\n            }\n        }\n        this.loadMap();\n    }\n\n\n    handleEvent(evtName) {\n        let timeout;\n        const handlerName = evtName;\n\n        return (e) => {\n            if (timeout) {\n                clearTimeout(timeout);\n                timeout = null;\n            }\n            timeout = setTimeout(() => {\n                if (this.props[handlerName]) {\n                this.props[handlerName](this.props, this.map, e);\n                }\n            }, 0);\n        }\n      \n    }\n\n  \n    loadMap() {\n        if (this.props && this.props.google) {\n            // google is available\n            const {google} = this.props;\n            const maps = google.maps;\n\n            const mapRef = this.refs.map;\n            const node = ReactDOM.findDOMNode(mapRef);\n\n            let {initialCenter, zoom} = this.props;\n            const {lat, lng} = this.state.currentLocation;\n            const center = new maps.LatLng(lat, lng);\n            const mapConfig = Object.assign({}, {\n                center: center,\n                zoom: zoom\n            })\n\n            this.map = new maps.Map(node, mapConfig);\n\n\n            evtNames.forEach(e => {\n                this.map.addListener(e, this.handleEvent(e));\n            });\n\n\n            let centerChangedTimeout;\n            this.map.addListener('dragend', (evt) => {\n                if (centerChangedTimeout) {\n                    clearTimeout(centerChangedTimeout);\n                    centerChangedTimeout = null;\n                }\n                centerChangedTimeout = setTimeout(() => {\n                this.props.onMove(this.map);\n                }, 0);\n            })\n        }\n    }\n\n\n    recenterMap() {\n        const map = this.map;\n        const curr = this.state.currentLocation;\n\n        const google = this.props.google;\n        const maps = google.maps;\n\n        if (map) {\n            let center = new maps.LatLng(curr.lat, curr.lng)\n            map.panTo(center)\n        }\n  }\n    \n\n    render() {\n        return (\n            <div ref='map'>\n                Loading map...\n            </div>\n        )\n    }\n  }\n\n  Map.propTypes = {\n    google: PropTypes.object,\n    zoom: PropTypes.number,\n    initialCenter: PropTypes.object,\n    centerAroundCurrentLocation: PropTypes.bool,\n    onMove: PropTypes.func\n  }\n  Map.defaultProps = {\n    onMove: function() {}, // default prop\n    zoom: 13,\n    // San Francisco, by default\n    initialCenter: {\n      lat: 37.774929,\n      lng: -122.419416\n    },\n    centerAroundCurrentLocation: false\n  }\n\n\nexport default Map"]},"metadata":{},"sourceType":"module"}