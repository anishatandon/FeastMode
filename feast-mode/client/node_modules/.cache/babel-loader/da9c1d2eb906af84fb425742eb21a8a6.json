{"ast":null,"code":"/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\nconst fs = require('fs');\n\nconst path = require('path');\n\nfunction log(message\n/*: string */\n) {\n  console.log(\"[dotenv][DEBUG] \".concat(message));\n}\n\nconst NEWLINE = '\\n';\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/;\nconst RE_NEWLINES = /\\\\n/g; // Parses src into an Object\n\nfunction parse(src\n/*: string | Buffer */\n, options\n/*: ?DotenvParseOptions */\n)\n/*: DotenvParseOutput */\n{\n  const debug = Boolean(options && options.debug);\n  const obj = {}; // convert Buffers before splitting into lines and processing\n\n  src.toString().split(NEWLINE).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL); // matched?\n\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]; // default undefined or missing values to empty string\n\n      let val = keyValueArr[2] || '';\n      const end = val.length - 1;\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"';\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"; // if single or double quoted, remove quotes\n\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end); // if double quoted, expand newlines\n\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE);\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim();\n      }\n\n      obj[key] = val;\n    } else if (debug) {\n      log(\"did not match key and value when parsing line \".concat(idx + 1, \": \").concat(line));\n    }\n  });\n  return obj;\n} // Populates process.env from .env file\n\n\nfunction config(options\n/*: ?DotenvConfigOptions */\n)\n/*: DotenvConfigOutput */\n{\n  let dotenvPath = path.resolve(process.cwd(), '.env');\n  let encoding\n  /*: string */\n  = 'utf8';\n  let debug = false;\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path;\n    }\n\n    if (options.encoding != null) {\n      encoding = options.encoding;\n    }\n\n    if (options.debug != null) {\n      debug = true;\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, {\n      encoding\n    }), {\n      debug\n    });\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key];\n      } else if (debug) {\n        log(\"\\\"\".concat(key, \"\\\" is already defined in `process.env` and will not be overwritten\"));\n      }\n    });\n    return {\n      parsed\n    };\n  } catch (e) {\n    return {\n      error: e\n    };\n  }\n}\n\nmodule.exports.config = config;\nmodule.exports.parse = parse;","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/server/node_modules/dotenv/lib/main.js"],"names":["fs","require","path","log","message","console","NEWLINE","RE_INI_KEY_VAL","RE_NEWLINES","parse","src","options","debug","Boolean","obj","toString","split","forEach","line","idx","keyValueArr","match","key","val","end","length","isDoubleQuoted","isSingleQuoted","substring","replace","trim","config","dotenvPath","resolve","process","cwd","encoding","parsed","readFileSync","Object","keys","env","hasOwnProperty","e","error","module","exports"],"mappings":"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","sourcesContent":["/* @flow */\n/*::\n\ntype DotenvParseOptions = {\n  debug?: boolean\n}\n\n// keys and values from src\ntype DotenvParseOutput = { [string]: string }\n\ntype DotenvConfigOptions = {\n  path?: string, // path to .env file\n  encoding?: string, // encoding of .env file\n  debug?: string // turn on logging for debugging purposes\n}\n\ntype DotenvConfigOutput = {\n  parsed?: DotenvParseOutput,\n  error?: Error\n}\n\n*/\n\nconst fs = require('fs')\nconst path = require('path')\n\nfunction log (message /*: string */) {\n  console.log(`[dotenv][DEBUG] ${message}`)\n}\n\nconst NEWLINE = '\\n'\nconst RE_INI_KEY_VAL = /^\\s*([\\w.-]+)\\s*=\\s*(.*)?\\s*$/\nconst RE_NEWLINES = /\\\\n/g\n\n// Parses src into an Object\nfunction parse (src /*: string | Buffer */, options /*: ?DotenvParseOptions */) /*: DotenvParseOutput */ {\n  const debug = Boolean(options && options.debug)\n  const obj = {}\n\n  // convert Buffers before splitting into lines and processing\n  src.toString().split(NEWLINE).forEach(function (line, idx) {\n    // matching \"KEY' and 'VAL' in 'KEY=VAL'\n    const keyValueArr = line.match(RE_INI_KEY_VAL)\n    // matched?\n    if (keyValueArr != null) {\n      const key = keyValueArr[1]\n      // default undefined or missing values to empty string\n      let val = (keyValueArr[2] || '')\n      const end = val.length - 1\n      const isDoubleQuoted = val[0] === '\"' && val[end] === '\"'\n      const isSingleQuoted = val[0] === \"'\" && val[end] === \"'\"\n\n      // if single or double quoted, remove quotes\n      if (isSingleQuoted || isDoubleQuoted) {\n        val = val.substring(1, end)\n\n        // if double quoted, expand newlines\n        if (isDoubleQuoted) {\n          val = val.replace(RE_NEWLINES, NEWLINE)\n        }\n      } else {\n        // remove surrounding whitespace\n        val = val.trim()\n      }\n\n      obj[key] = val\n    } else if (debug) {\n      log(`did not match key and value when parsing line ${idx + 1}: ${line}`)\n    }\n  })\n\n  return obj\n}\n\n// Populates process.env from .env file\nfunction config (options /*: ?DotenvConfigOptions */) /*: DotenvConfigOutput */ {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding /*: string */ = 'utf8'\n  let debug = false\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = options.path\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n    if (options.debug != null) {\n      debug = true\n    }\n  }\n\n  try {\n    // specifying an encoding returns a string instead of a buffer\n    const parsed = parse(fs.readFileSync(dotenvPath, { encoding }), { debug })\n\n    Object.keys(parsed).forEach(function (key) {\n      if (!process.env.hasOwnProperty(key)) {\n        process.env[key] = parsed[key]\n      } else if (debug) {\n        log(`\"${key}\" is already defined in \\`process.env\\` and will not be overwritten`)\n      }\n    })\n\n    return { parsed }\n  } catch (e) {\n    return { error: e }\n  }\n}\n\nmodule.exports.config = config\nmodule.exports.parse = parse\n"]},"metadata":{},"sourceType":"module"}