{"ast":null,"code":"import * as actions from './actionTypes.js';\nexport const sendInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.SEND_INVITE_START\n  });\n\n  try {\n    const newRequest = {\n      friendId: userId,\n      friendFirst: getState().firebase.profile.firstName,\n      friendLast: getState().firebase.profile.lastName,\n      friendEmail: getState().firebase.auth.email,\n      friendPhone: getState().firebase.profile.phone\n    };\n    const res = await firestore.collection('friends').doc(inviteId).get();\n\n    if (!res.data() || !res.data().requests) {\n      firestore.collection('friends').doc(inviteId).set({\n        requests: [newRequest]\n      });\n    } else {\n      const idList = res.data().requests.map(user => user.friendId);\n\n      if (idList.indexOf(userId) === -1 && userId !== inviteId) {\n        firestore.collection('friends').doc(inviteId).update({\n          requests: [...res.data().requests, newRequest]\n        });\n      }\n    }\n\n    dispatch({\n      type: actions.SEND_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.SEND_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const acceptInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firestore = getFirestore();\n  const inviteId = data.friendId;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.ACCEPT_INVITE_START\n  });\n\n  try {\n    const resUser = await firestore.collection('friends').doc(userId).get();\n    const resInvite = await firestore.collection('friends').doc(inviteId).get();\n    const newUser = {\n      friendId: userId,\n      friendFirst: getState().firebase.profile.firstName,\n      friendLast: getState().firebase.profile.lastName,\n      friendEmail: getState().firebase.auth.email,\n      friendPhone: getState().firebase.profile.phone\n    };\n    const newInvite = {\n      friendId: inviteId,\n      friendFirst: data.friendFirst,\n      friendLast: data.friendLast,\n      friendEmail: data.friendEmail,\n      friendPhone: data.friendPhone\n    };\n    const userPrevious = resUser.data().requests.filter(request => request.friendId !== inviteId);\n\n    if (!resUser.data() || !resUser.data().friends) {\n      firestore.collection('friends').doc(userId).set({\n        friends: [newInvite],\n        requests: userPrevious\n      });\n    } else {\n      if (resUser.data().friends.indexOf(inviteId) === -1) {\n        firestore.collection('friends').doc(userId).update({\n          friends: [...resUser.data().friends, newInvite],\n          requests: userPrevious\n        });\n      }\n    }\n\n    if (!resInvite.data() || !resInvite.data().friends) {\n      firestore.collection('friends').doc(inviteId).set({\n        friends: [newUser],\n        requests: [...resInvite.data().requests]\n      });\n    } else {\n      if (resInvite.data().friends.indexOf(userId) === -1) {\n        firestore.collection('friends').doc(inviteId).update({\n          friends: [...resInvite.data().friends, newUser],\n          requests: [...resInvite.data().requests]\n        });\n      }\n    }\n\n    dispatch({\n      type: actions.SEND_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.SEND_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const deleteInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.DELETE_INVITE_START\n  });\n\n  try {\n    const resUser = await firestore.collection('friends').doc(userId).get();\n    const userPrevious = resUser.data().requests.filter(request => request.friendId !== inviteId); // console.log(userPrevious)\n\n    firestore.collection('friends').doc(userId).update({\n      requests: userPrevious\n    }); // console.log(\"past\")\n\n    dispatch({\n      type: actions.DELETE_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const deleteFriend = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.DELETE_FRIEND_START\n  });\n\n  try {\n    const resUser = await firestore.collection('friends').doc(userId).get();\n    const resInvite = await firestore.collection('friends').doc(inviteId).get();\n    console.log(resUser);\n\n    if (resUser.data()) {\n      const userPrevious = resUser.data().friends.filter(friend => friend.friendId !== inviteId);\n      firestore.collection('friends').doc(userId).update({\n        friends: userPrevious\n      });\n    }\n\n    if (resInvite.data()) {\n      const invitePrevious = resInvite.data().friends.filter(friend => friend.friendId !== userId);\n      firestore.collection('friends').doc(inviteId).update({\n        friends: invitePrevious\n      });\n    }\n\n    dispatch({\n      type: actions.DELETE_FRIEND_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_FRIEND_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/backend/store/actions/appActions.js"],"names":["actions","sendInvite","data","dispatch","getState","getFirebase","getFirestore","firestore","inviteId","userId","firebase","auth","uid","type","SEND_INVITE_START","newRequest","friendId","friendFirst","profile","firstName","friendLast","lastName","friendEmail","email","friendPhone","phone","res","collection","doc","get","requests","set","idList","map","user","indexOf","update","SEND_INVITE_SUCCESS","err","SEND_INVITE_FAIL","payload","message","acceptInvite","ACCEPT_INVITE_START","resUser","resInvite","newUser","newInvite","userPrevious","filter","request","friends","deleteInvite","DELETE_INVITE_START","DELETE_INVITE_SUCCESS","DELETE_INVITE_FAIL","deleteFriend","DELETE_FRIEND_START","console","log","friend","invitePrevious","DELETE_FRIEND_SUCCESS","DELETE_FRIEND_FAIL"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes.js'\n\nexport const sendInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.SEND_INVITE_START })\n    try {\n        const newRequest = {\n            friendId: userId,\n            friendFirst: getState().firebase.profile.firstName,\n            friendLast: getState().firebase.profile.lastName, \n            friendEmail: getState().firebase.auth.email, \n            friendPhone: getState().firebase.profile.phone, \n        }\n\n        const res = await firestore\n            .collection('friends')\n            .doc(inviteId)\n            .get();\n\n        \n\n        if (!res.data() || !res.data().requests) {\n            firestore\n            .collection('friends')\n            .doc(inviteId)\n            .set({\n                requests: [newRequest],\n            });\n        } \n\n        else { \n            const idList = res.data().requests.map(user => user.friendId)\n            if(idList.indexOf(userId) === -1 && userId !== inviteId ){\n                firestore\n                .collection('friends')\n                .doc(inviteId)\n                .update({\n                    requests: [...res.data().requests, newRequest],\n                });\n            }\n        }\n\n        dispatch({ type: actions.SEND_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.SEND_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const acceptInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore()\n    const inviteId = data.friendId;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.ACCEPT_INVITE_START })\n    try {\n        const resUser = await firestore\n            .collection('friends')\n            .doc(userId)\n            .get();\n\n        const resInvite = await firestore\n            .collection('friends')\n            .doc(inviteId)\n            .get();\n\n        const newUser = {\n            friendId: userId,\n            friendFirst: getState().firebase.profile.firstName,\n            friendLast: getState().firebase.profile.lastName, \n            friendEmail: getState().firebase.auth.email, \n            friendPhone: getState().firebase.profile.phone, \n        }\n\n        const newInvite = {\n            friendId: inviteId, \n            friendFirst: data.friendFirst,\n            friendLast: data.friendLast,\n            friendEmail: data.friendEmail,\n            friendPhone: data.friendPhone,\n        }\n            \n        const userPrevious = resUser.data().requests.filter(request => request.friendId !== inviteId);\n        \n        if (!resUser.data() || !resUser.data().friends) {\n            firestore\n            .collection('friends')\n            .doc(userId)\n            .set({\n                friends: [newInvite],\n                requests: userPrevious,\n            });\n        } \n\n        else { \n            if(resUser.data().friends.indexOf(inviteId) === -1 ){\n                firestore\n                .collection('friends')\n                .doc(userId)\n                .update({\n                    friends: [...resUser.data().friends, newInvite],\n                    requests: userPrevious,\n                });\n            }\n        }\n\n        if (!resInvite.data() || !resInvite.data().friends) {\n            firestore\n            .collection('friends')\n            .doc(inviteId)\n            .set({\n                friends: [newUser],\n                requests: [...resInvite.data().requests],\n            });\n        } \n        \n        else { \n            if(resInvite.data().friends.indexOf(userId) === -1 ){\n                firestore\n                .collection('friends')\n                .doc(inviteId)\n                .update({\n                    friends: [...resInvite.data().friends, newUser],\n                    requests: [...resInvite.data().requests],\n                });\n            }\n        }\n\n        dispatch({ type: actions.SEND_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.SEND_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const deleteInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.DELETE_INVITE_START })\n    try {\n        const resUser = await firestore\n            .collection('friends')\n            .doc(userId)\n            .get();\n\n        const userPrevious = resUser.data().requests.filter(request => request.friendId !== inviteId);\n        // console.log(userPrevious)\n        firestore\n            .collection('friends')\n            .doc(userId)\n            .update({\n                requests: userPrevious,\n            });\n        // console.log(\"past\")\n        dispatch({ type: actions.DELETE_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.DELETE_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const deleteFriend = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.DELETE_FRIEND_START })\n    try {\n\n        const resUser = await firestore\n            .collection('friends')\n            .doc(userId)\n            .get();\n        const resInvite = await firestore\n            .collection('friends')\n            .doc(inviteId)\n            .get();\n\n        console.log(resUser)\n\n        if (resUser.data() ) {\n            const userPrevious = resUser.data().friends.filter(friend => friend.friendId !== inviteId);\n            firestore\n            .collection('friends')\n            .doc(userId)\n            .update({\n                friends: userPrevious,\n            });\n        } \n        \n        if (resInvite.data() ) {\n            const invitePrevious = resInvite.data().friends.filter(friend => friend.friendId !== userId);\n            firestore\n            .collection('friends')\n            .doc(inviteId)\n            .update({\n                friends: invitePrevious,\n            });\n        } \n\n        dispatch({ type: actions.DELETE_FRIEND_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.DELETE_FRIEND_FAIL, payload: err.message })\n    }\n}"]},"metadata":{},"sourceType":"module"}