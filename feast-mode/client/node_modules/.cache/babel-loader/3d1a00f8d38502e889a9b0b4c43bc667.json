{"ast":null,"code":"'use strict'; // Load Modules\n\nconst RFC3986 = require('./rfc3986'); // Declare internals\n\n\nconst internals = {\n  Uri: {\n    createUriRegex: function (optionalScheme, allowRelative) {\n      let scheme = RFC3986.scheme; // If we were passed a scheme, use it instead of the generic one\n\n      if (optionalScheme) {\n        // Have to put this in a non-capturing group to handle the OR statements\n        scheme = '(?:' + optionalScheme + ')';\n      }\n\n      const withScheme = '(?:' + scheme + ':' + RFC3986.hierPart + ')';\n      const prefix = allowRelative ? '(?:' + withScheme + '|' + RFC3986.relativeRef + ')' : withScheme;\n      /**\n       * URI = scheme \":\" hier-part [ \"?\" query ] [ \"#\" fragment ]\n       *\n       * OR\n       *\n       * relative-ref = relative-part [ \"?\" query ] [ \"#\" fragment ]\n       */\n\n      return new RegExp('^' + prefix + '(?:\\\\?' + RFC3986.query + ')?' + '(?:#' + RFC3986.fragment + ')?$');\n    }\n  }\n};\nmodule.exports = internals.Uri;","map":null,"metadata":{},"sourceType":"script"}