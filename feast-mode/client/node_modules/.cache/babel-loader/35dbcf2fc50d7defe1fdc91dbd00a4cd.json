{"ast":null,"code":"import * as actions from './actionTypes.js';\nimport { useReducer } from 'react'; // SignUp action\n\nexport const signUp = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(data.email, data.passwordOne); // Send verification email\n\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    await firestore.collection('users').doc(res.user.uid).set({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      username: data.username,\n      email: data.email,\n      phone: data.phone,\n      creditCard: data.creditCard,\n      creditCardType: data.creditCardType,\n      expDate: data.expiry,\n      secCode: data.cvc,\n      apps: data.apps,\n      picture: data.picture,\n      friends: [],\n      requests: []\n    });\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n}; // LogOut action\n\nexport const logOut = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n\n  try {\n    await firebase.auth().signOut();\n  } catch (err) {\n    console.log(err.message);\n  }\n}; // SignIn action\n\nexport const logIn = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n}; // Clean up error messages action\n\nexport const clean = () => ({\n  type: actions.CLEAN_UP\n}); // Send recover password action\n\nexport const recoverPassword = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.RECOVERY_START\n  });\n\n  try {\n    await firebase.auth().sendPasswordResetEmail(data.email);\n    dispatch({\n      type: actions.RECOVERY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.RECOVERY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Verify email action\n\nexport const verifyEmail = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.VERIFY_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    dispatch({\n      type: actions.VERIFY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.VERIFY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Edit profile action\n\nexport const editProfile = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.PROFILE_EDIT_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    const _getState$firebase$au = getState().firebase.auth,\n          userId = _getState$firebase$au.uid,\n          userEmail = _getState$firebase$au.email;\n\n    if (data.email !== userEmail) {\n      await user.updateEmail(data.email);\n    }\n\n    await firestore.collection(\"users\").doc(userId).set({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      username: data.username,\n      phone: data.phone,\n      creditCard: data.creditCard,\n      expDate: data.expiry,\n      secCode: data.cvc,\n      creditCardType: data.creditCardType,\n      apps: data.apps,\n      picture: data.picture\n    });\n\n    if (data.passwordOne.length > 0) {\n      await user.updatePassword(data.passwordOne);\n    }\n\n    dispatch({\n      type: actions.PROFILE_EDIT_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.PROFILE_EDIT_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/backend/store/actions/authActions.js"],"names":["actions","useReducer","signUp","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","type","AUTH_START","res","auth","createUserWithEmailAndPassword","email","passwordOne","user","currentUser","sendEmailVerification","collection","doc","uid","set","firstName","lastName","username","phone","creditCard","creditCardType","expDate","expiry","secCode","cvc","apps","picture","friends","requests","AUTH_SUCCESS","err","AUTH_FAIL","payload","message","logOut","signOut","console","log","logIn","signInWithEmailAndPassword","password","clean","CLEAN_UP","recoverPassword","RECOVERY_START","sendPasswordResetEmail","RECOVERY_SUCCESS","RECOVERY_FAIL","verifyEmail","VERIFY_START","VERIFY_SUCCESS","VERIFY_FAIL","editProfile","PROFILE_EDIT_START","userId","userEmail","updateEmail","length","updatePassword","PROFILE_EDIT_SUCCESS","PROFILE_EDIT_FAIL"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes.js'\nimport { useReducer } from 'react';\n\n// SignUp action\nexport const signUp = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.AUTH_START })\n    try {\n        const res = await firebase\n            .auth()\n            .createUserWithEmailAndPassword(data.email, data.passwordOne)\n\n        // Send verification email\n        const user = firebase.auth().currentUser;\n        await user.sendEmailVerification();\n\n        await firestore.collection('users').doc(res.user.uid).set({ \n            firstName: data.firstName,\n            lastName: data.lastName,\n            username: data.username,\n            email: data.email,\n            phone: data.phone,\n            creditCard: data.creditCard,\n            creditCardType: data.creditCardType,\n            expDate: data.expiry,\n            secCode: data.cvc,\n            apps: data.apps,\n            picture: data.picture,\n            friends: [],\n            requests: [],\n        });\n\n        dispatch({ type: actions.AUTH_SUCCESS });\n\n    } catch(err) {\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n}\n\n// LogOut action\nexport const logOut = () => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    try {\n        await firebase.auth().signOut()\n\n    } catch (err) {\n        console.log(err.message)\n    }\n}\n\n// SignIn action\nexport const logIn = data => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    dispatch({ type: actions.AUTH_START })\n    try {\n        await firebase.auth().signInWithEmailAndPassword(data.email, data.password)\n        dispatch({ type: actions.AUTH_SUCCESS })\n\n    } catch(err) {\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n}\n\n// Clean up error messages action\nexport const clean = () => ({\n    type: actions.CLEAN_UP,\n})\n\n// Send recover password action\nexport const recoverPassword = data => async (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase();\n    dispatch({type: actions.RECOVERY_START});\n    try{\n        await firebase.auth().sendPasswordResetEmail(data.email);\n        dispatch({type: actions.RECOVERY_SUCCESS});\n\n    } catch(err) {\n        dispatch({type: actions.RECOVERY_FAIL, payload: err.message});\n    }\n}\n\n// Verify email action\nexport const verifyEmail = () => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    dispatch({ type: actions.VERIFY_START })\n    try {\n        const user = firebase.auth().currentUser\n        await user.sendEmailVerification()\n        dispatch({ type: actions.VERIFY_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.VERIFY_FAIL, payload: err.message })\n    }\n}\n\n// Edit profile action\nexport const editProfile = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.PROFILE_EDIT_START })\n    try {\n        const user = firebase.auth().currentUser\n        const {uid: userId, email: userEmail} = getState().firebase.auth\n        if (data.email !== userEmail) {\n            await user.updateEmail(data.email) \n        }\n\n        await firestore.collection(\"users\").doc(userId).set({\n            firstName: data.firstName,\n            lastName: data.lastName,\n            username: data.username,\n            phone: data.phone,\n            creditCard: data.creditCard,\n            expDate: data.expiry,\n            secCode: data.cvc,\n            creditCardType: data.creditCardType,\n            apps: data.apps, \n            picture: data.picture, \n        })\n\n        if (data.passwordOne.length > 0) {\n            await user.updatePassword(data.passwordOne)\n        }\n        dispatch({ type: actions.PROFILE_EDIT_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.PROFILE_EDIT_FAIL, payload: err.message })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}