{"ast":null,"code":"var sanitizer = require('./sanitize.js');\n\nmodule.exports = function (json, options) {\n  if (json instanceof Buffer) {\n    json = json.toString();\n  }\n\n  var obj = null;\n\n  if (typeof json == 'string') {\n    try {\n      obj = JSON.parse(json);\n    } catch (e) {\n      throw new Error(\"The JSON structure is invalid\");\n    }\n  } else {\n    obj = json;\n  }\n\n  var toXml = new ToXml(options);\n  toXml.parse(obj);\n  return toXml.xml;\n};\n\nToXml.prototype.parse = function (obj) {\n  var self = this;\n  var keys = Object.keys(obj);\n  var len = keys.length; // First pass, extract strings only\n\n  for (var i = 0; i < len; i++) {\n    var key = keys[i],\n        value = obj[key],\n        isArray = Array.isArray(value);\n    var type = typeof value;\n\n    if (type == 'string' || type == 'number' || type == 'boolean' || isArray) {\n      var it = isArray ? value : [value];\n      it.forEach(function (subVal) {\n        if (typeof subVal != 'object') {\n          if (key == '$t') {\n            self.addTextContent(subVal);\n          } else {\n            self.addAttr(key, subVal);\n          }\n        }\n      });\n    }\n  } // Second path, now handle sub-objects and arrays\n\n\n  for (var i = 0; i < len; i++) {\n    var key = keys[i];\n\n    if (Array.isArray(obj[key])) {\n      var elems = obj[key];\n      var l = elems.length;\n\n      for (var j = 0; j < l; j++) {\n        var elem = elems[j];\n\n        if (typeof elem == 'object') {\n          self.openTag(key);\n          self.parse(elem);\n          self.closeTag(key);\n        }\n      }\n    } else if (typeof obj[key] == 'object') {\n      self.openTag(key);\n      self.parse(obj[key]);\n      self.closeTag(key);\n    }\n  }\n};\n\nToXml.prototype.openTag = function (key) {\n  this.completeTag();\n  this.xml += '<' + key;\n  this.tagIncomplete = true;\n};\n\nToXml.prototype.addAttr = function (key, val) {\n  if (this.options.sanitize) {\n    val = sanitizer.sanitize(val);\n  }\n\n  this.xml += ' ' + key + '=\"' + val + '\"';\n};\n\nToXml.prototype.addTextContent = function (text) {\n  this.completeTag();\n  this.xml += text;\n};\n\nToXml.prototype.closeTag = function (key) {\n  this.completeTag();\n  this.xml += '</' + key + '>';\n};\n\nToXml.prototype.completeTag = function () {\n  if (this.tagIncomplete) {\n    this.xml += '>';\n    this.tagIncomplete = false;\n  }\n};\n\nfunction ToXml(options) {\n  var defaultOpts = {\n    sanitize: false\n  };\n\n  if (options) {\n    for (var opt in options) {\n      defaultOpts[opt] = options[opt];\n    }\n  }\n\n  this.options = defaultOpts;\n  this.xml = '';\n  this.tagIncomplete = false;\n}","map":null,"metadata":{},"sourceType":"script"}