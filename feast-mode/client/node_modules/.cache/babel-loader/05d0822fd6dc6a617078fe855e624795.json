{"ast":null,"code":"'use strict';\n\nvar urls = require('./urls.json');\n\nvar httpJson = require('./http-json');\n\nvar util = require('util');\n\nvar Order = function (parameters) {\n  if (!parameters) {\n    parameters = {};\n  } //default order\n\n\n  this.Address = '';\n  this.Coupons = [];\n  this.CustomerID = '';\n  this.Email = '';\n  this.Extension = '';\n  this.FirstName = '';\n  this.LastName = '';\n  this.LanguageCode = 'en';\n  this.OrderChannel = 'OLO';\n  this.OrderID = '';\n  this.OrderMethod = 'Web';\n  this.OrderTaker = null;\n  this.Payments = [];\n  this.Phone = '';\n  this.Products = [];\n  this.Market = '';\n  this.Currency = '';\n  this.ServiceMethod = parameters.deliveryMethod || 'Delivery';\n  this.SourceOrganizationURI = urls.sourceUri;\n  this.StoreID = parameters.storeID || '';\n  this.Tags = {};\n  this.Version = '1.0';\n  this.NoCombine = true;\n  this.Partners = {};\n  this.NewUser = true;\n  this.metaData = {};\n  this.Amounts = {};\n  this.BusinessDate = '';\n  this.EstimatedWaitMinutes = '';\n  this.PriceOrderTime = '';\n  this.AmountsBreakdown;\n\n  if (parameters['customer']) {\n    var Customer = parameters.customer;\n    this.Address = Customer.address;\n    this.CustomerID = Customer.ID;\n    this.Email = Customer.email;\n    this.FirstName = Customer.firstName;\n    this.LastName = Customer.lastName;\n    this.Phone = Customer.phone;\n    return this;\n  }\n\n  if (parameters['Order'] || parameters['order']) {\n    //Used to initialize order object from Dominos results (Also handy for initializing from DB)\n    var prevOrder = parameters.Order;\n    var Customer = parameters.customer;\n    this.Address = Customer ? Customer.address ? Customer.address : prevOrder.Address : prevOrder.Address;\n    this.CustomerID = Customer ? Customer.address ? Customer.ID : prevOrder.CustomerID : prevOrder.CustomerID;\n    this.Email = Customer ? Customer.address ? Customer.email : prevOrder.Email : prevOrder.Email;\n    this.FirstName = Customer ? Customer.address ? Customer.firstName : prevOrder.FirstName : prevOrder.FirstName;\n    this.LastName = Customer ? Customer.address ? Customer.lastName : prevOrder.LastName : prevOrder.LastName;\n    this.OrderID = prevOrder.OrderID;\n    this.Products = prevOrder.Products;\n    this.Market = prevOrder.Market;\n    this.Currency = prevOrder.Currency;\n    this.StoreID = prevOrder.StoreID;\n    this.Amounts = prevOrder.Amounts || {};\n    this.BusinessDate = prevOrder.BusinessDate || '';\n    this.EstimatedWaitMinutes = prevOrder.EstimatedWaitMinutes || '';\n    this.PriceOrderTime = prevOrder.PriceOrderTime || '';\n    this.AmountsBreakdown = prevOrder.AmountsBreakdown || {};\n    return this;\n  }\n};\n\nOrder.prototype.addCoupon = function (Coupon) {\n  //Add coupon to Order\n  this.Coupons.push(Coupon);\n};\n\nOrder.prototype.removeCoupon = function (Coupon) {\n  //Remove coupon from Order\n  var index = this.Coupons.indexOf(Coupon);\n\n  if (index != -1) {\n    this.Coupons.splice(index, 1);\n  }\n};\n\nOrder.prototype.addItem = function (Item) {\n  //Add product to Order\n  this.Products.push(Item);\n};\n\nOrder.prototype.removeItem = function (Item) {\n  //Remove product from Order\n  var index = this.Products.indexOf(Item);\n\n  if (index != -1) {\n    this.Products.splice(index, 1);\n  }\n};\n\nOrder.prototype.validate = function (callback) {\n  //Validate Order\n  if (!this.Products || !callback) {\n    if (callback) {\n      callback({\n        success: false,\n        message: 'At least one Item must be added!'\n      });\n    }\n\n    return;\n  } //Blame Dominos, this isn't my doing.\n\n\n  var stringified = JSON.stringify({\n    'Order': this\n  });\n  httpJson.post(urls.order.validate, stringified, this.mergeResponse.bind(this, callback));\n};\n\nOrder.prototype.price = function (callback) {\n  if (!this.Products || !callback) {\n    if (callback) {\n      callback({\n        success: false,\n        message: 'At least one Item must be added!'\n      });\n    }\n\n    return;\n  }\n\n  var stringified = JSON.stringify({\n    'Order': this\n  });\n  httpJson.post(urls.order.price, stringified, this.mergeResponse.bind(this, callback));\n};\n\nOrder.prototype.place = function (callback) {\n  if (!this.Products || !callback) {\n    if (callback) {\n      callback({\n        success: false,\n        message: 'At least one product must be added!'\n      });\n    }\n  }\n\n  var stringified = JSON.stringify({\n    'Order': this\n  });\n  httpJson.post(urls.order.place, stringified, callback);\n};\n\nOrder.prototype.mergeResponse = function (callback, response) {\n  for (var key in response.result.Order) {\n    if (util.isArray(response.result.Order[key]) && !response.result.Order[key].length) {\n      continue;\n    }\n\n    this[key] = response.result.Order[key];\n  } //console.log(util.inspect(this.Products, { showHidden: true, depth: 5 }));\n\n\n  if (callback) {\n    callback(response);\n  }\n};\n\nOrder.prototype.validateCC = function (number) {\n  var re = {\n    visa: /^4[0-9]{12}(?:[0-9]{3})?$/,\n    mastercard: /^5[1-5][0-9]{14}$/,\n    amex: /^3[47][0-9]{13}$/,\n    diners: /^3(?:0[0-5]|[68][0-9])[0-9]{11}$/,\n    discover: /^6(?:011|5[0-9]{2})[0-9]{12}$/,\n    jcb: /^(?:2131|1800|35\\d{3})\\d{11}$/,\n    enroute: /^(?:2014|2149)\\d{11}$/\n  };\n  if (re.visa.test(number)) return 'VISA';\n  if (re.mastercard.test(number)) return 'MASTERCARD';\n  if (re.amex.test(number)) return 'AMEX';\n  if (re.diners.test(number)) return 'DINERS';\n  if (re.discover.test(number)) return 'DISCOVER';\n  if (re.jcb.test(number)) return 'JCB';\n  if (re.enroute.test(number)) return 'JCB';\n  return \"\";\n};\n\nOrder.prototype.PaymentObject = function () {\n  Object.defineProperties(this, {\n    \"Type\": {\n      writable: false,\n      enumerable: true,\n      value: \"CreditCard\"\n    },\n    \"Amount\": {\n      writable: true,\n      enumerable: true,\n      value: 0\n    },\n    \"Number\": {\n      writable: true,\n      enumerable: true,\n      value: \"\"\n    },\n    \"CardType\": {\n      writable: true,\n      enumerable: true,\n      value: \"\" //uppercase\n\n    },\n    \"Expiration\": {\n      writable: true,\n      enumerable: true,\n      value: \"\" //digits only\n\n    },\n    \"SecurityCode\": {\n      writable: true,\n      enumerable: true,\n      value: \"\"\n    },\n    \"PostalCode\": {\n      writable: true,\n      enumerable: true,\n      value: \"\"\n    }\n  });\n};\n\nmodule.exports = Order;","map":null,"metadata":{},"sourceType":"script"}