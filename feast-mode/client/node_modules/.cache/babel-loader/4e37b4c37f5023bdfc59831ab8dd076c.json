{"ast":null,"code":"var http = require('request');\n\nvar urls = require('./urls.json');\n\nmodule.exports.post = function (url, req, callback) {\n  if (typeof req != 'string') req = JSON.stringify(req);\n  var requestBody = {\n    uri: url,\n    headers: {\n      Referer: urls.referer,\n      'Content-Type': 'application/json'\n    },\n    body: req\n  };\n  http.post(requestBody, function (error, res, body) {\n    if (error) {\n      return callback({\n        success: false,\n        message: error\n      });\n    }\n\n    if (res.statusCode !== 200) {\n      return callback({\n        success: false,\n        message: 'HTML Status Code Error ' + res.statusCode\n      });\n    }\n\n    try {\n      var parsed = JSON.parse(body);\n    } catch (error) {\n      console.log(error);\n      return callback({\n        success: false,\n        message: error\n      });\n    }\n\n    return callback({\n      success: true,\n      result: parsed\n    });\n  });\n};\n\nmodule.exports.get = function (url, callback) {\n  var requestBody = {\n    uri: url,\n    headers: {\n      'Referer': urls.referer\n    }\n  };\n  http.get(requestBody, function (error, res, body) {\n    if (error) {\n      //If request errored out.\n      callback({\n        success: false,\n        message: error\n      });\n      return;\n    }\n\n    if (res.statusCode !== 200) {\n      //If request didn't error but response isn't status code 200.\n      callback({\n        success: false,\n        message: 'HTML Status Code Error ' + res.statusCode\n      });\n      return;\n    }\n\n    try {\n      var parsed = JSON.parse(body);\n    } catch (error) {\n      console.log(error);\n      return callback({\n        success: false,\n        message: error\n      });\n    }\n\n    return callback({\n      success: true,\n      result: parsed\n    });\n  });\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/dominos/src/http-json.js"],"names":["http","require","urls","module","exports","post","url","req","callback","JSON","stringify","requestBody","uri","headers","Referer","referer","body","error","res","success","message","statusCode","parsed","parse","console","log","result","get"],"mappings":"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","sourcesContent":["var http = require('request');\nvar urls = require('./urls.json')\n\nmodule.exports.post = function(url, req, callback) {\n    if(typeof req !=  'string')\n        req = JSON.stringify(req);\n\n    var requestBody = {\n        uri: url,\n        headers: {\n            Referer: urls.referer,\n            'Content-Type': 'application/json'\n        },\n        body: req\n    };\n    http.post(requestBody, function (error, res, body) {\n      if (error) {\n          return callback({\n            success: false,\n            message: error\n          });\n      }\n\n      if (res.statusCode !== 200) {\n          return callback({\n              success: false,\n              message: 'HTML Status Code Error ' + res.statusCode\n          });\n      }\n\n      try {\n          var parsed = JSON.parse(body);\n      }\n      catch(error){\n        console.log(error);\n        return callback({\n            success: false,\n            message: error\n        });\n      }\n\n      return callback({\n          success: true,\n          result: parsed\n      });\n  });\n}\n\nmodule.exports.get = function(url, callback){\n    var requestBody = {\n        uri: url,\n        headers: {\n            'Referer': urls.referer\n        }\n    };\n    http.get(requestBody, function (error, res, body) {\n            if (error){  //If request errored out.\n                callback({\n                    success: false,\n                    message: error\n                });\n                return;\n            }\n            if (res.statusCode !== 200){  //If request didn't error but response isn't status code 200.\n                callback({\n                    success: false,\n                    message: 'HTML Status Code Error ' + res.statusCode\n                });\n                return;\n            }\n\n            try {\n                var parsed = JSON.parse(body);\n            }\n            catch(error){\n              console.log(error);\n              return callback({\n                  success: false,\n                  message: error\n              });\n            }\n\n            return callback({\n                success: true,\n                result: parsed\n            });\n        }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}