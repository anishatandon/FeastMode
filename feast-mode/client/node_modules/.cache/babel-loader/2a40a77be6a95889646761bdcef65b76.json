{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _v = require('uuid/v4');\n\nvar _v2 = _interopRequireDefault(_v);\n\nvar _image = require('./utils/image');\n\nvar _image2 = _interopRequireDefault(_image);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * FirebaseFileUploader for React\n * \n */\n\n\nvar generateRandomFilename = function generateRandomFilename() {\n  return (0, _v2.default)();\n};\n\nfunction extractExtension(filename) {\n  return /(?:\\.([^.]+))?$/.exec(filename)[0];\n}\n\nvar FirebaseFileUploader = function (_Component) {\n  _inherits(FirebaseFileUploader, _Component);\n\n  function FirebaseFileUploader() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, FirebaseFileUploader);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FirebaseFileUploader.__proto__ || Object.getPrototypeOf(FirebaseFileUploader)).call.apply(_ref, [this].concat(args))), _this), _this.uploadTasks = [], _this.handleFileSelection = function (event) {\n      var files = event.target.files;\n\n      for (var i = 0; i < files.length; i++) {\n        _this.startUpload(files[i]);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(FirebaseFileUploader, [{\n    key: 'componentWillUnmount',\n    // Cancel all running uploads before unmount\n    value: function componentWillUnmount() {\n      this.cancelRunningUploads();\n    }\n  }, {\n    key: 'cancelRunningUploads',\n    value: function cancelRunningUploads() {\n      while (this.uploadTasks.length > 0) {\n        var _task = this.uploadTasks.pop();\n\n        if (_task.snapshot.state === 'running') {\n          _task.cancel();\n        }\n      }\n    } // Remove a specific task from the uploadTasks\n\n  }, {\n    key: 'removeTask',\n    value: function removeTask(task) {\n      for (var i = 0; i < this.uploadTasks.length; i++) {\n        if (this.uploadTasks[i] === task) {\n          this.uploadTasks.splice(i, 1);\n          return;\n        }\n      }\n    }\n  }, {\n    key: 'startUpload',\n    value: function startUpload(file) {\n      var _this2 = this;\n\n      var _props = this.props,\n          onUploadStart = _props.onUploadStart,\n          onProgress = _props.onProgress,\n          onUploadError = _props.onUploadError,\n          onUploadSuccess = _props.onUploadSuccess,\n          storageRef = _props.storageRef,\n          metadata = _props.metadata,\n          randomizeFilename = _props.randomizeFilename,\n          filename = _props.filename;\n      var filenameToUse = void 0;\n\n      if (filename) {\n        filenameToUse = typeof filename === 'function' ? filename(file) : filename;\n      } else {\n        filenameToUse = randomizeFilename ? generateRandomFilename() : file.name;\n      } // Ensure there is an extension in the filename\n\n\n      if (!extractExtension(filenameToUse)) {\n        filenameToUse += extractExtension(file.name);\n      }\n\n      Promise.resolve().then(function () {\n        var shouldResize = file.type.match(/image.*/) && (_this2.props.maxWidth || _this2.props.maxHeight);\n\n        if (shouldResize) {\n          return (0, _image2.default)(file, _this2.props.maxWidth, _this2.props.maxHeight);\n        }\n\n        return file;\n      }).then(function (file) {\n        var task = storageRef.child(filenameToUse).put(file, metadata);\n\n        if (onUploadStart) {\n          onUploadStart(file, task);\n        }\n\n        task.on('state_changed', function (snapshot) {\n          return onProgress && onProgress(Math.round(100 * snapshot.bytesTransferred / snapshot.totalBytes), task);\n        }, function (error) {\n          return onUploadError && onUploadError(error, task);\n        }, function () {\n          _this2.removeTask(task);\n\n          return onUploadSuccess && onUploadSuccess(task.snapshot.metadata.name, task);\n        });\n\n        _this2.uploadTasks.push(task);\n      });\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          storageRef = _props2.storageRef,\n          onUploadStart = _props2.onUploadStart,\n          onProgress = _props2.onProgress,\n          onUploadSuccess = _props2.onUploadSuccess,\n          onUploadError = _props2.onUploadError,\n          randomizeFilename = _props2.randomizeFilename,\n          metadata = _props2.metadata,\n          filename = _props2.filename,\n          maxWidth = _props2.maxWidth,\n          maxHeight = _props2.maxHeight,\n          hidden = _props2.hidden,\n          _props2$as = _props2.as,\n          Input = _props2$as === undefined ? 'input' : _props2$as,\n          props = _objectWithoutProperties(_props2, ['storageRef', 'onUploadStart', 'onProgress', 'onUploadSuccess', 'onUploadError', 'randomizeFilename', 'metadata', 'filename', 'maxWidth', 'maxHeight', 'hidden', 'as']);\n\n      var inputStyle = hidden ? Object.assign({}, props.style, {\n        width: '0.1px',\n        height: '0.1px',\n        opacity: 0,\n        overflow: 'hidden',\n        position: 'absolute',\n        zIndex: -1\n      }) : props.style;\n      return _react2.default.createElement(Input, _extends({\n        type: 'file',\n        onChange: this.handleFileSelection\n      }, props, {\n        style: inputStyle\n      }));\n    }\n  }]);\n\n  return FirebaseFileUploader;\n}(_react.Component);\n\nexports.default = FirebaseFileUploader;","map":null,"metadata":{},"sourceType":"script"}