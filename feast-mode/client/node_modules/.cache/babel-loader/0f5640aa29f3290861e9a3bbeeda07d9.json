{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar expat = require('bindings')('node_expat');\n\nvar Stream = require('stream').Stream;\n\nvar Parser = function (encoding) {\n  this.encoding = encoding;\n\n  this._getNewParser();\n\n  this.parser.emit = this.emit.bind(this); // Stream API\n\n  this.writable = true;\n  this.readable = true;\n};\n\nutil.inherits(Parser, Stream);\n\nParser.prototype._getNewParser = function () {\n  this.parser = new expat.Parser(this.encoding);\n};\n\nParser.prototype.parse = function (buf, isFinal) {\n  return this.parser.parse(buf, isFinal);\n};\n\nParser.prototype.setEncoding = function (encoding) {\n  this.encoding = encoding;\n  return this.parser.setEncoding(this.encoding);\n};\n\nParser.prototype.setUnknownEncoding = function (map, convert) {\n  return this.parser.setUnknownEncoding(map, convert);\n};\n\nParser.prototype.getError = function () {\n  return this.parser.getError();\n};\n\nParser.prototype.stop = function () {\n  return this.parser.stop();\n};\n\nParser.prototype.pause = function () {\n  return this.stop();\n};\n\nParser.prototype.resume = function () {\n  return this.parser.resume();\n};\n\nParser.prototype.destroy = function () {\n  this.parser.stop();\n  this.end();\n};\n\nParser.prototype.destroySoon = function () {\n  this.destroy();\n};\n\nParser.prototype.write = function (data) {\n  var error, result;\n\n  try {\n    result = this.parse(data);\n\n    if (!result) {\n      error = this.getError();\n    }\n  } catch (e) {\n    error = e;\n  }\n\n  if (error) {\n    this.emit('error', error);\n    this.emit('close');\n  }\n\n  return result;\n};\n\nParser.prototype.end = function (data) {\n  var error, result;\n\n  try {\n    result = this.parse(data || '', true);\n\n    if (!result) {\n      error = this.getError();\n    }\n  } catch (e) {\n    error = e;\n  }\n\n  if (!error) {\n    this.emit('end');\n  } else {\n    this.emit('error', error);\n  }\n\n  this.emit('close');\n};\n\nParser.prototype.reset = function () {\n  return this.parser.reset();\n};\n\nParser.prototype.getCurrentLineNumber = function () {\n  return this.parser.getCurrentLineNumber();\n};\n\nParser.prototype.getCurrentColumnNumber = function () {\n  return this.parser.getCurrentColumnNumber();\n};\n\nParser.prototype.getCurrentByteIndex = function () {\n  return this.parser.getCurrentByteIndex();\n};\n\nexports.Parser = Parser;\n\nexports.createParser = function (cb) {\n  var parser = new Parser();\n\n  if (cb) {\n    parser.on('startElement', cb);\n  }\n\n  return parser;\n};","map":null,"metadata":{},"sourceType":"script"}