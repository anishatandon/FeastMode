{"ast":null,"code":"/**\n * Module dependencies.\n */\nvar sep = require('path').sep || '/';\n/**\n * Module exports.\n */\n\nmodule.exports = fileUriToPath;\n/**\n * File URI to Path function.\n *\n * @param {String} uri\n * @return {String} path\n * @api public\n */\n\nfunction fileUriToPath(uri) {\n  if ('string' != typeof uri || uri.length <= 7 || 'file://' != uri.substring(0, 7)) {\n    throw new TypeError('must pass in a file:// URI to convert to a file path');\n  }\n\n  var rest = decodeURI(uri.substring(7));\n  var firstSlash = rest.indexOf('/');\n  var host = rest.substring(0, firstSlash);\n  var path = rest.substring(firstSlash + 1); // 2.  Scheme Definition\n  // As a special case, <host> can be the string \"localhost\" or the empty\n  // string; this is interpreted as \"the machine from which the URL is\n  // being interpreted\".\n\n  if ('localhost' == host) host = '';\n\n  if (host) {\n    host = sep + sep + host;\n  } // 3.2  Drives, drive letters, mount points, file system root\n  // Drive letters are mapped into the top of a file URI in various ways,\n  // depending on the implementation; some applications substitute\n  // vertical bar (\"|\") for the colon after the drive letter, yielding\n  // \"file:///c|/tmp/test.txt\".  In some cases, the colon is left\n  // unchanged, as in \"file:///c:/tmp/test.txt\".  In other cases, the\n  // colon is simply omitted, as in \"file:///c/tmp/test.txt\".\n\n\n  path = path.replace(/^(.+)\\|/, '$1:'); // for Windows, we need to invert the path separators from what a URI uses\n\n  if (sep == '\\\\') {\n    path = path.replace(/\\//g, '\\\\');\n  }\n\n  if (/^.+\\:/.test(path)) {// has Windows drive at beginning of path\n  } else {\n    // unix pathâ€¦\n    path = sep + path;\n  }\n\n  return host + path;\n}","map":null,"metadata":{},"sourceType":"script"}