{"ast":null,"code":"export const getCreditCardType = accountNumber => {\n  let result = \"unknown\";\n\n  if (/^5[1-5]/.test(accountNumber)) {\n    result = \"mastercard\";\n  } // MasterCard\n  else if (/^4/.test(accountNumber)) {\n      result = \"Visa\";\n    } //Visa\n    else if (/^3[47]/.test(accountNumber)) {\n        result = \"American Express\";\n      } // AmEx\n\n\n  return result;\n};\nexport const displayCreditCardType = type => {\n  switch (type) {\n    case \"mastercard\":\n      break;\n\n    case \"visa\":\n      break;\n\n    case \"amex\":\n      break;\n\n    default:\n      break;\n  }\n};\nexport const isValidIdentifier = identifier => {\n  let sum = 0;\n  let alt = false;\n  let i = identifier.length - 1;\n  let num;\n\n  while (i >= 0) {\n    //get the next digit\n    num = parseInt(identifier.charAt(i), 10); //if it's not a valid number, abort\n\n    if (isNaN(num)) {\n      return false;\n    } //if it's an alternate number...\n\n\n    if (alt) {\n      num *= 2;\n\n      if (num > 9) {\n        num = num % 10 + 1;\n      }\n    }\n\n    alt = !alt; //flip the alternate bit\n\n    sum += num; //add to the rest of the sum\n\n    i--; //go to next digit\n  }\n\n  return sum % 10 === 0; //determine if it's valid\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/CreditCard.js"],"names":["getCreditCardType","accountNumber","result","test","displayCreditCardType","type","isValidIdentifier","identifier","sum","alt","i","length","num","parseInt","charAt","isNaN"],"mappings":"AACA,OAAO,MAAMA,iBAAiB,GAAGC,aAAa,IAAI;AAChD,MAAIC,MAAM,GAAG,SAAb;;AAEA,MAAI,UAAUC,IAAV,CAAeF,aAAf,CAAJ,EAAmC;AAAEC,IAAAA,MAAM,GAAG,YAAT;AAAuB,GAA5D,CAA6D;AAA7D,OACK,IAAI,KAAKC,IAAL,CAAUF,aAAV,CAAJ,EAA8B;AAAEC,MAAAA,MAAM,GAAG,MAAT;AAAiB,KAAjD,CAAkD;AAAlD,SACA,IAAI,SAASC,IAAT,CAAcF,aAAd,CAAJ,EAAkC;AAAEC,QAAAA,MAAM,GAAG,kBAAT;AAA6B,OALtB,CAKuB;;;AAEvE,SAAOA,MAAP;AACD,CARM;AAUP,OAAO,MAAME,qBAAqB,GAAIC,IAAD,IAAU;AAC3C,UAAQA,IAAR;AACI,SAAK,YAAL;AACI;;AAEJ,SAAK,MAAL;AACI;;AAEJ,SAAK,MAAL;AACI;;AAEJ;AACI;AAXR;AAaH,CAdM;AAgBP,OAAO,MAAMC,iBAAiB,GAAGC,UAAU,IAAI;AAC3C,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAG,KAAV;AACA,MAAIC,CAAC,GAAGH,UAAU,CAACI,MAAX,GAAkB,CAA1B;AACA,MAAIC,GAAJ;;AAEA,SAAOF,CAAC,IAAI,CAAZ,EAAe;AACX;AACAE,IAAAA,GAAG,GAAGC,QAAQ,CAACN,UAAU,CAACO,MAAX,CAAkBJ,CAAlB,CAAD,EAAuB,EAAvB,CAAd,CAFW,CAIX;;AACA,QAAIK,KAAK,CAACH,GAAD,CAAT,EAAgB;AAAE,aAAO,KAAP;AAAc,KALrB,CAOX;;;AACA,QAAIH,GAAJ,EAAS;AACLG,MAAAA,GAAG,IAAI,CAAP;;AACA,UAAIA,GAAG,GAAG,CAAV,EAAY;AACRA,QAAAA,GAAG,GAAIA,GAAG,GAAG,EAAP,GAAa,CAAnB;AACH;AACJ;;AAEDH,IAAAA,GAAG,GAAG,CAACA,GAAP,CAfW,CAeA;;AACXD,IAAAA,GAAG,IAAII,GAAP,CAhBW,CAgBA;;AACXF,IAAAA,CAAC,GAjBU,CAiBP;AACP;;AAED,SAAQF,GAAG,GAAG,EAAN,KAAa,CAArB,CA1B2C,CA0BnB;AAC3B,CA3BM","sourcesContent":["\nexport const getCreditCardType = accountNumber => {\n  let result = \"unknown\"\n  \n  if (/^5[1-5]/.test(accountNumber)) { result = \"mastercard\" } // MasterCard\n  else if (/^4/.test(accountNumber)) { result = \"Visa\" } //Visa\n  else if (/^3[47]/.test(accountNumber)) { result = \"American Express\" } // AmEx\n\n  return result\n}\n\nexport const displayCreditCardType = (type) => {\n    switch (type) {\n        case \"mastercard\":\n            break;\n\n        case \"visa\":\n            break;\n\n        case \"amex\":\n            break;\n\n        default:\n            break;\n    }\n}\n\nexport const isValidIdentifier = identifier => {\n    let sum = 0\n    let alt = false\n    let i = identifier.length-1\n    let num\n\n    while (i >= 0) {\n        //get the next digit\n        num = parseInt(identifier.charAt(i), 10)\n\n        //if it's not a valid number, abort\n        if (isNaN(num)) { return false }\n\n        //if it's an alternate number...\n        if (alt) {\n            num *= 2\n            if (num > 9){\n                num = (num % 10) + 1\n            }\n        } \n        \n        alt = !alt //flip the alternate bit\n        sum += num //add to the rest of the sum\n        i-- //go to next digit\n    }\n\n    return (sum % 10 === 0) //determine if it's valid\n}"]},"metadata":{},"sourceType":"module"}