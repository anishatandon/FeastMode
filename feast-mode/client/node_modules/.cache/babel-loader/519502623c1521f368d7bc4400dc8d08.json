{"ast":null,"code":"'use strict'; // Load modules\n\nconst Dns = require('dns'); // Declare internals\n\n\nconst internals = {\n  hasOwn: Object.prototype.hasOwnProperty,\n  indexOf: Array.prototype.indexOf,\n  defaultThreshold: 16,\n  maxIPv6Groups: 8,\n  categories: {\n    valid: 1,\n    dnsWarn: 7,\n    rfc5321: 15,\n    cfws: 31,\n    deprecated: 63,\n    rfc5322: 127,\n    error: 255\n  },\n  diagnoses: {\n    // Address is valid\n    valid: 0,\n    // Address is valid, but the DNS check failed\n    dnsWarnNoMXRecord: 5,\n    dnsWarnNoRecord: 6,\n    // Address is valid for SMTP but has unusual elements\n    rfc5321TLD: 9,\n    rfc5321TLDNumeric: 10,\n    rfc5321QuotedString: 11,\n    rfc5321AddressLiteral: 12,\n    // Address is valid for message, but must be modified for envelope\n    cfwsComment: 17,\n    cfwsFWS: 18,\n    // Address contains deprecated elements, but may still be valid in some contexts\n    deprecatedLocalPart: 33,\n    deprecatedFWS: 34,\n    deprecatedQTEXT: 35,\n    deprecatedQP: 36,\n    deprecatedComment: 37,\n    deprecatedCTEXT: 38,\n    deprecatedIPv6: 39,\n    deprecatedCFWSNearAt: 49,\n    // Address is only valid according to broad definition in RFC 5322, but is otherwise invalid\n    rfc5322Domain: 65,\n    rfc5322TooLong: 66,\n    rfc5322LocalTooLong: 67,\n    rfc5322DomainTooLong: 68,\n    rfc5322LabelTooLong: 69,\n    rfc5322DomainLiteral: 70,\n    rfc5322DomainLiteralOBSDText: 71,\n    rfc5322IPv6GroupCount: 72,\n    rfc5322IPv62x2xColon: 73,\n    rfc5322IPv6BadCharacter: 74,\n    rfc5322IPv6MaxGroups: 75,\n    rfc5322IPv6ColonStart: 76,\n    rfc5322IPv6ColonEnd: 77,\n    // Address is invalid for any purpose\n    errExpectingDTEXT: 129,\n    errNoLocalPart: 130,\n    errNoDomain: 131,\n    errConsecutiveDots: 132,\n    errATEXTAfterCFWS: 133,\n    errATEXTAfterQS: 134,\n    errATEXTAfterDomainLiteral: 135,\n    errExpectingQPair: 136,\n    errExpectingATEXT: 137,\n    errExpectingQTEXT: 138,\n    errExpectingCTEXT: 139,\n    errBackslashEnd: 140,\n    errDotStart: 141,\n    errDotEnd: 142,\n    errDomainHyphenStart: 143,\n    errDomainHyphenEnd: 144,\n    errUnclosedQuotedString: 145,\n    errUnclosedComment: 146,\n    errUnclosedDomainLiteral: 147,\n    errFWSCRLFx2: 148,\n    errFWSCRLFEnd: 149,\n    errCRNoLF: 150,\n    errUnknownTLD: 160,\n    errDomainTooShort: 161\n  },\n  components: {\n    localpart: 0,\n    domain: 1,\n    literal: 2,\n    contextComment: 3,\n    contextFWS: 4,\n    contextQuotedString: 5,\n    contextQuotedPair: 6\n  }\n}; // $lab:coverage:off$\n\ninternals.defer = typeof process !== 'undefined' && process && typeof process.nextTick === 'function' ? process.nextTick.bind(process) : function (callback) {\n  return setTimeout(callback, 0);\n}; // $lab:coverage:on$\n\ninternals.specials = function () {\n  const specials = '()<>[]:;@\\\\,.\"'; // US-ASCII visible characters not valid for atext (http://tools.ietf.org/html/rfc5322#section-3.2.3)\n\n  const lookup = new Array(0x100);\n\n  for (let i = 0xff; i >= 0; --i) {\n    lookup[i] = false;\n  }\n\n  for (let i = 0; i < specials.length; ++i) {\n    lookup[specials.charCodeAt(i)] = true;\n  }\n\n  return function (code) {\n    return lookup[code];\n  };\n}();\n\ninternals.regex = {\n  ipV4: /\\b(?:(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)\\.){3}(?:25[0-5]|2[0-4]\\d|[01]?\\d\\d?)$/,\n  ipV6: /^[a-fA-F\\d]{0,4}$/\n};\n\ninternals.checkIpV6 = function (items) {\n  return items.every(value => internals.regex.ipV6.test(value));\n};\n\ninternals.validDomain = function (tldAtom, options) {\n  if (options.tldBlacklist) {\n    if (Array.isArray(options.tldBlacklist)) {\n      return internals.indexOf.call(options.tldBlacklist, tldAtom) === -1;\n    }\n\n    return !internals.hasOwn.call(options.tldBlacklist, tldAtom);\n  }\n\n  if (Array.isArray(options.tldWhitelist)) {\n    return internals.indexOf.call(options.tldWhitelist, tldAtom) !== -1;\n  }\n\n  return internals.hasOwn.call(options.tldWhitelist, tldAtom);\n};\n/**\n * Check that an email address conforms to RFCs 5321, 5322 and others\n *\n * We distinguish clearly between a Mailbox as defined by RFC 5321 and an\n * addr-spec as defined by RFC 5322. Depending on the context, either can be\n * regarded as a valid email address. The RFC 5321 Mailbox specification is\n * more restrictive (comments, white space and obsolete forms are not allowed).\n *\n * @param {string} email The email address to check. See README for specifics.\n * @param {Object} options The (optional) options:\n *   {boolean} checkDNS If true then will check DNS for MX records. If\n *     true this call to isEmail _will_ be asynchronous.\n *   {*} errorLevel Determines the boundary between valid and invalid\n *     addresses.\n *   {*} tldBlacklist The set of domains to consider invalid.\n *   {*} tldWhitelist The set of domains to consider valid.\n *   {*} minDomainAtoms The minimum number of domain atoms which must be present\n *     for the address to be valid.\n * @param {function(number|boolean)} callback The (optional) callback handler.\n * @return {*}\n */\n\n\nexports.validate = internals.validate = function (email, options, callback) {\n  options = options || {};\n\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  if (typeof callback !== 'function') {\n    if (options.checkDNS) {\n      throw new TypeError('expected callback function for checkDNS option');\n    }\n\n    callback = null;\n  }\n\n  let diagnose;\n  let threshold;\n\n  if (typeof options.errorLevel === 'number') {\n    diagnose = true;\n    threshold = options.errorLevel;\n  } else {\n    diagnose = !!options.errorLevel;\n    threshold = internals.diagnoses.valid;\n  }\n\n  if (options.tldWhitelist) {\n    if (typeof options.tldWhitelist === 'string') {\n      options.tldWhitelist = [options.tldWhitelist];\n    } else if (typeof options.tldWhitelist !== 'object') {\n      throw new TypeError('expected array or object tldWhitelist');\n    }\n  }\n\n  if (options.tldBlacklist) {\n    if (typeof options.tldBlacklist === 'string') {\n      options.tldBlacklist = [options.tldBlacklist];\n    } else if (typeof options.tldBlacklist !== 'object') {\n      throw new TypeError('expected array or object tldBlacklist');\n    }\n  }\n\n  if (options.minDomainAtoms && (options.minDomainAtoms !== (+options.minDomainAtoms | 0) || options.minDomainAtoms < 0)) {\n    throw new TypeError('expected positive integer minDomainAtoms');\n  }\n\n  let maxResult = internals.diagnoses.valid;\n\n  const updateResult = value => {\n    if (value > maxResult) {\n      maxResult = value;\n    }\n  };\n\n  const context = {\n    now: internals.components.localpart,\n    prev: internals.components.localpart,\n    stack: [internals.components.localpart]\n  };\n  let prevToken = '';\n  const parseData = {\n    local: '',\n    domain: ''\n  };\n  const atomData = {\n    locals: [''],\n    domains: ['']\n  };\n  let elementCount = 0;\n  let elementLength = 0;\n  let crlfCount = 0;\n  let charCode;\n  let hyphenFlag = false;\n  let assertEnd = false;\n  const emailLength = email.length;\n  let token; // Token is used outside the loop, must declare similarly\n\n  for (let i = 0; i < emailLength; ++i) {\n    token = email[i];\n\n    switch (context.now) {\n      // Local-part\n      case internals.components.localpart:\n        // http://tools.ietf.org/html/rfc5322#section-3.4.1\n        //   local-part      =   dot-atom / quoted-string / obs-local-part\n        //\n        //   dot-atom        =   [CFWS] dot-atom-text [CFWS]\n        //\n        //   dot-atom-text   =   1*atext *(\".\" 1*atext)\n        //\n        //   quoted-string   =   [CFWS]\n        //                       DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n        //                       [CFWS]\n        //\n        //   obs-local-part  =   word *(\".\" word)\n        //\n        //   word            =   atom / quoted-string\n        //\n        //   atom            =   [CFWS] 1*atext [CFWS]\n        switch (token) {\n          // Comment\n          case '(':\n            if (elementLength === 0) {\n              // Comments are OK at the beginning of an element\n              updateResult(elementCount === 0 ? internals.diagnoses.cfwsComment : internals.diagnoses.deprecatedComment);\n            } else {\n              updateResult(internals.diagnoses.cfwsComment); // Cannot start a comment in an element, should be end\n\n              assertEnd = true;\n            }\n\n            context.stack.push(context.now);\n            context.now = internals.components.contextComment;\n            break;\n          // Next dot-atom element\n\n          case '.':\n            if (elementLength === 0) {\n              // Another dot, already?\n              updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);\n            } else {\n              // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form\n              if (assertEnd) {\n                updateResult(internals.diagnoses.deprecatedLocalPart);\n              } // CFWS & quoted strings are OK again now we're at the beginning of an element (although they are obsolete forms)\n\n\n              assertEnd = false;\n              elementLength = 0;\n              ++elementCount;\n              parseData.local += token;\n              atomData.locals[elementCount] = '';\n            }\n\n            break;\n          // Quoted string\n\n          case '\"':\n            if (elementLength === 0) {\n              // The entire local-part can be a quoted string for RFC 5321; if one atom is quoted it's an RFC 5322 obsolete form\n              updateResult(elementCount === 0 ? internals.diagnoses.rfc5321QuotedString : internals.diagnoses.deprecatedLocalPart);\n              parseData.local += token;\n              atomData.locals[elementCount] += token;\n              ++elementLength; // Quoted string must be the entire element\n\n              assertEnd = true;\n              context.stack.push(context.now);\n              context.now = internals.components.contextQuotedString;\n            } else {\n              updateResult(internals.diagnoses.errExpectingATEXT);\n            }\n\n            break;\n          // Folding white space\n\n          case '\\r':\n            if (emailLength === ++i || email[i] !== '\\n') {\n              // Fatal error\n              updateResult(internals.diagnoses.errCRNoLF);\n              break;\n            }\n\n          // Fallthrough\n\n          case ' ':\n          case '\\t':\n            if (elementLength === 0) {\n              updateResult(elementCount === 0 ? internals.diagnoses.cfwsFWS : internals.diagnoses.deprecatedFWS);\n            } else {\n              // We can't start FWS in the middle of an element, better be end\n              assertEnd = true;\n            }\n\n            context.stack.push(context.now);\n            context.now = internals.components.contextFWS;\n            prevToken = token;\n            break;\n\n          case '@':\n            // At this point we should have a valid local-part\n            // $lab:coverage:off$\n            if (context.stack.length !== 1) {\n              throw new Error('unexpected item on context stack');\n            } // $lab:coverage:on$\n\n\n            if (parseData.local.length === 0) {\n              // Fatal error\n              updateResult(internals.diagnoses.errNoLocalPart);\n            } else if (elementLength === 0) {\n              // Fatal error\n              updateResult(internals.diagnoses.errDotEnd);\n            } // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.1 the maximum total length of a user name or other local-part is 64\n            //    octets\n            else if (parseData.local.length > 64) {\n                updateResult(internals.diagnoses.rfc5322LocalTooLong);\n              } // http://tools.ietf.org/html/rfc5322#section-3.4.1 comments and folding white space SHOULD NOT be used around \"@\" in the\n              //    addr-spec\n              //\n              // http://tools.ietf.org/html/rfc2119\n              // 4. SHOULD NOT this phrase, or the phrase \"NOT RECOMMENDED\" mean that there may exist valid reasons in particular\n              //    circumstances when the particular behavior is acceptable or even useful, but the full implications should be understood\n              //    and the case carefully weighed before implementing any behavior described with this label.\n              else if (context.prev === internals.components.contextComment || context.prev === internals.components.contextFWS) {\n                  updateResult(internals.diagnoses.deprecatedCFWSNearAt);\n                } // Clear everything down for the domain parsing\n\n\n            context.now = internals.components.domain;\n            context.stack[0] = internals.components.domain;\n            elementCount = 0;\n            elementLength = 0;\n            assertEnd = false; // CFWS can only appear at the end of the element\n\n            break;\n          // ATEXT\n\n          default:\n            // http://tools.ietf.org/html/rfc5322#section-3.2.3\n            //    atext = ALPHA / DIGIT / ; Printable US-ASCII\n            //            \"!\" / \"#\" /     ;  characters not including\n            //            \"$\" / \"%\" /     ;  specials.  Used for atoms.\n            //            \"&\" / \"'\" /\n            //            \"*\" / \"+\" /\n            //            \"-\" / \"/\" /\n            //            \"=\" / \"?\" /\n            //            \"^\" / \"_\" /\n            //            \"`\" / \"{\" /\n            //            \"|\" / \"}\" /\n            //            \"~\"\n            if (assertEnd) {\n              // We have encountered atext where it is no longer valid\n              switch (context.prev) {\n                case internals.components.contextComment:\n                case internals.components.contextFWS:\n                  updateResult(internals.diagnoses.errATEXTAfterCFWS);\n                  break;\n\n                case internals.components.contextQuotedString:\n                  updateResult(internals.diagnoses.errATEXTAfterQS);\n                  break;\n                // $lab:coverage:off$\n\n                default:\n                  throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);\n                // $lab:coverage:on$\n              }\n            } else {\n              context.prev = context.now;\n              charCode = token.charCodeAt(0); // Especially if charCode == 10\n\n              if (charCode < 33 || charCode > 126 || internals.specials(charCode)) {\n                // Fatal error\n                updateResult(internals.diagnoses.errExpectingATEXT);\n              }\n\n              parseData.local += token;\n              atomData.locals[elementCount] += token;\n              ++elementLength;\n            }\n\n        }\n\n        break;\n\n      case internals.components.domain:\n        // http://tools.ietf.org/html/rfc5322#section-3.4.1\n        //   domain          =   dot-atom / domain-literal / obs-domain\n        //\n        //   dot-atom        =   [CFWS] dot-atom-text [CFWS]\n        //\n        //   dot-atom-text   =   1*atext *(\".\" 1*atext)\n        //\n        //   domain-literal  =   [CFWS] \"[\" *([FWS] dtext) [FWS] \"]\" [CFWS]\n        //\n        //   dtext           =   %d33-90 /          ; Printable US-ASCII\n        //                       %d94-126 /         ;  characters not including\n        //                       obs-dtext          ;  \"[\", \"]\", or \"\\\"\n        //\n        //   obs-domain      =   atom *(\".\" atom)\n        //\n        //   atom            =   [CFWS] 1*atext [CFWS]\n        // http://tools.ietf.org/html/rfc5321#section-4.1.2\n        //   Mailbox        = Local-part \"@\" ( Domain / address-literal )\n        //\n        //   Domain         = sub-domain *(\".\" sub-domain)\n        //\n        //   address-literal  = \"[\" ( IPv4-address-literal /\n        //                    IPv6-address-literal /\n        //                    General-address-literal ) \"]\"\n        //                    ; See Section 4.1.3\n        // http://tools.ietf.org/html/rfc5322#section-3.4.1\n        //      Note: A liberal syntax for the domain portion of addr-spec is\n        //      given here.  However, the domain portion contains addressing\n        //      information specified by and used in other protocols (e.g.,\n        //      [RFC1034], [RFC1035], [RFC1123], [RFC5321]).  It is therefore\n        //      incumbent upon implementations to conform to the syntax of\n        //      addresses for the context in which they are used.\n        //\n        // is_email() author's note: it's not clear how to interpret this in\n        // he context of a general email address validator. The conclusion I\n        // have reached is this: \"addressing information\" must comply with\n        // RFC 5321 (and in turn RFC 1035), anything that is \"semantically\n        // invisible\" must comply only with RFC 5322.\n        switch (token) {\n          // Comment\n          case '(':\n            if (elementLength === 0) {\n              // Comments at the start of the domain are deprecated in the text, comments at the start of a subdomain are obs-domain\n              // http://tools.ietf.org/html/rfc5322#section-3.4.1\n              updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedComment);\n            } else {\n              // We can't start a comment mid-element, better be at the end\n              assertEnd = true;\n              updateResult(internals.diagnoses.cfwsComment);\n            }\n\n            context.stack.push(context.now);\n            context.now = internals.components.contextComment;\n            break;\n          // Next dot-atom element\n\n          case '.':\n            if (elementLength === 0) {\n              // Another dot, already? Fatal error.\n              updateResult(elementCount === 0 ? internals.diagnoses.errDotStart : internals.diagnoses.errConsecutiveDots);\n            } else if (hyphenFlag) {\n              // Previous subdomain ended in a hyphen. Fatal error.\n              updateResult(internals.diagnoses.errDomainHyphenEnd);\n            } else if (elementLength > 63) {\n              // Nowhere in RFC 5321 does it say explicitly that the domain part of a Mailbox must be a valid domain according to the\n              // DNS standards set out in RFC 1035, but this *is* implied in several places. For instance, wherever the idea of host\n              // routing is discussed the RFC says that the domain must be looked up in the DNS. This would be nonsense unless the\n              // domain was designed to be a valid DNS domain. Hence we must conclude that the RFC 1035 restriction on label length\n              // also applies to RFC 5321 domains.\n              //\n              // http://tools.ietf.org/html/rfc1035#section-2.3.4\n              // labels          63 octets or less\n              updateResult(internals.diagnoses.rfc5322LabelTooLong);\n            } // CFWS is OK again now we're at the beginning of an element (although\n            // it may be obsolete CFWS)\n\n\n            assertEnd = false;\n            elementLength = 0;\n            ++elementCount;\n            atomData.domains[elementCount] = '';\n            parseData.domain += token;\n            break;\n          // Domain literal\n\n          case '[':\n            if (parseData.domain.length === 0) {\n              // Domain literal must be the only component\n              assertEnd = true;\n              ++elementLength;\n              context.stack.push(context.now);\n              context.now = internals.components.literal;\n              parseData.domain += token;\n              atomData.domains[elementCount] += token;\n              parseData.literal = '';\n            } else {\n              // Fatal error\n              updateResult(internals.diagnoses.errExpectingATEXT);\n            }\n\n            break;\n          // Folding white space\n\n          case '\\r':\n            if (emailLength === ++i || email[i] !== '\\n') {\n              // Fatal error\n              updateResult(internals.diagnoses.errCRNoLF);\n              break;\n            }\n\n          // Fallthrough\n\n          case ' ':\n          case '\\t':\n            if (elementLength === 0) {\n              updateResult(elementCount === 0 ? internals.diagnoses.deprecatedCFWSNearAt : internals.diagnoses.deprecatedFWS);\n            } else {\n              // We can't start FWS in the middle of an element, so this better be the end\n              updateResult(internals.diagnoses.cfwsFWS);\n              assertEnd = true;\n            }\n\n            context.stack.push(context.now);\n            context.now = internals.components.contextFWS;\n            prevToken = token;\n            break;\n          // This must be ATEXT\n\n          default:\n            // RFC 5322 allows any atext...\n            // http://tools.ietf.org/html/rfc5322#section-3.2.3\n            //    atext = ALPHA / DIGIT / ; Printable US-ASCII\n            //            \"!\" / \"#\" /     ;  characters not including\n            //            \"$\" / \"%\" /     ;  specials.  Used for atoms.\n            //            \"&\" / \"'\" /\n            //            \"*\" / \"+\" /\n            //            \"-\" / \"/\" /\n            //            \"=\" / \"?\" /\n            //            \"^\" / \"_\" /\n            //            \"`\" / \"{\" /\n            //            \"|\" / \"}\" /\n            //            \"~\"\n            // But RFC 5321 only allows letter-digit-hyphen to comply with DNS rules\n            //   (RFCs 1034 & 1123)\n            // http://tools.ietf.org/html/rfc5321#section-4.1.2\n            //   sub-domain     = Let-dig [Ldh-str]\n            //\n            //   Let-dig        = ALPHA / DIGIT\n            //\n            //   Ldh-str        = *( ALPHA / DIGIT / \"-\" ) Let-dig\n            //\n            if (assertEnd) {\n              // We have encountered ATEXT where it is no longer valid\n              switch (context.prev) {\n                case internals.components.contextComment:\n                case internals.components.contextFWS:\n                  updateResult(internals.diagnoses.errATEXTAfterCFWS);\n                  break;\n\n                case internals.components.literal:\n                  updateResult(internals.diagnoses.errATEXTAfterDomainLiteral);\n                  break;\n                // $lab:coverage:off$\n\n                default:\n                  throw new Error('more atext found where none is allowed, but unrecognized prev context: ' + context.prev);\n                // $lab:coverage:on$\n              }\n            }\n\n            charCode = token.charCodeAt(0); // Assume this token isn't a hyphen unless we discover it is\n\n            hyphenFlag = false;\n\n            if (charCode < 33 || charCode > 126 || internals.specials(charCode)) {\n              // Fatal error\n              updateResult(internals.diagnoses.errExpectingATEXT);\n            } else if (token === '-') {\n              if (elementLength === 0) {\n                // Hyphens cannot be at the beginning of a subdomain, fatal error\n                updateResult(internals.diagnoses.errDomainHyphenStart);\n              }\n\n              hyphenFlag = true;\n            } // Check if it's a neither a number nor a latin letter\n            else if (charCode < 48 || charCode > 122 || charCode > 57 && charCode < 65 || charCode > 90 && charCode < 97) {\n                // This is not an RFC 5321 subdomain, but still OK by RFC 5322\n                updateResult(internals.diagnoses.rfc5322Domain);\n              }\n\n            parseData.domain += token;\n            atomData.domains[elementCount] += token;\n            ++elementLength;\n        }\n\n        break;\n      // Domain literal\n\n      case internals.components.literal:\n        // http://tools.ietf.org/html/rfc5322#section-3.4.1\n        //   domain-literal  =   [CFWS] \"[\" *([FWS] dtext) [FWS] \"]\" [CFWS]\n        //\n        //   dtext           =   %d33-90 /          ; Printable US-ASCII\n        //                       %d94-126 /         ;  characters not including\n        //                       obs-dtext          ;  \"[\", \"]\", or \"\\\"\n        //\n        //   obs-dtext       =   obs-NO-WS-CTL / quoted-pair\n        switch (token) {\n          // End of domain literal\n          case ']':\n            if (maxResult < internals.categories.deprecated) {\n              // Could be a valid RFC 5321 address literal, so let's check\n              // http://tools.ietf.org/html/rfc5321#section-4.1.2\n              //   address-literal  = \"[\" ( IPv4-address-literal /\n              //                    IPv6-address-literal /\n              //                    General-address-literal ) \"]\"\n              //                    ; See Section 4.1.3\n              //\n              // http://tools.ietf.org/html/rfc5321#section-4.1.3\n              //   IPv4-address-literal  = Snum 3(\".\"  Snum)\n              //\n              //   IPv6-address-literal  = \"IPv6:\" IPv6-addr\n              //\n              //   General-address-literal  = Standardized-tag \":\" 1*dcontent\n              //\n              //   Standardized-tag  = Ldh-str\n              //                     ; Standardized-tag MUST be specified in a\n              //                     ; Standards-Track RFC and registered with IANA\n              //\n              //   dcontent      = %d33-90 / ; Printable US-ASCII\n              //                 %d94-126 ; excl. \"[\", \"\\\", \"]\"\n              //\n              //   Snum          = 1*3DIGIT\n              //                 ; representing a decimal integer\n              //                 ; value in the range 0 through 255\n              //\n              //   IPv6-addr     = IPv6-full / IPv6-comp / IPv6v4-full / IPv6v4-comp\n              //\n              //   IPv6-hex      = 1*4HEXDIG\n              //\n              //   IPv6-full     = IPv6-hex 7(\":\" IPv6-hex)\n              //\n              //   IPv6-comp     = [IPv6-hex *5(\":\" IPv6-hex)] \"::\"\n              //                 [IPv6-hex *5(\":\" IPv6-hex)]\n              //                 ; The \"::\" represents at least 2 16-bit groups of\n              //                 ; zeros.  No more than 6 groups in addition to the\n              //                 ; \"::\" may be present.\n              //\n              //   IPv6v4-full   = IPv6-hex 5(\":\" IPv6-hex) \":\" IPv4-address-literal\n              //\n              //   IPv6v4-comp   = [IPv6-hex *3(\":\" IPv6-hex)] \"::\"\n              //                 [IPv6-hex *3(\":\" IPv6-hex) \":\"]\n              //                 IPv4-address-literal\n              //                 ; The \"::\" represents at least 2 16-bit groups of\n              //                 ; zeros.  No more than 4 groups in addition to the\n              //                 ; \"::\" and IPv4-address-literal may be present.\n              let index = -1;\n              let addressLiteral = parseData.literal;\n              const matchesIP = internals.regex.ipV4.exec(addressLiteral); // Maybe extract IPv4 part from the end of the address-literal\n\n              if (matchesIP) {\n                index = matchesIP.index;\n\n                if (index !== 0) {\n                  // Convert IPv4 part to IPv6 format for futher testing\n                  addressLiteral = addressLiteral.slice(0, index) + '0:0';\n                }\n              }\n\n              if (index === 0) {\n                // Nothing there except a valid IPv4 address, so...\n                updateResult(internals.diagnoses.rfc5321AddressLiteral);\n              } else if (addressLiteral.slice(0, 5).toLowerCase() !== 'ipv6:') {\n                updateResult(internals.diagnoses.rfc5322DomainLiteral);\n              } else {\n                const match = addressLiteral.slice(5);\n                let maxGroups = internals.maxIPv6Groups;\n                const groups = match.split(':');\n                index = match.indexOf('::');\n\n                if (!~index) {\n                  // Need exactly the right number of groups\n                  if (groups.length !== maxGroups) {\n                    updateResult(internals.diagnoses.rfc5322IPv6GroupCount);\n                  }\n                } else if (index !== match.lastIndexOf('::')) {\n                  updateResult(internals.diagnoses.rfc5322IPv62x2xColon);\n                } else {\n                  if (index === 0 || index === match.length - 2) {\n                    // RFC 4291 allows :: at the start or end of an address with 7 other groups in addition\n                    ++maxGroups;\n                  }\n\n                  if (groups.length > maxGroups) {\n                    updateResult(internals.diagnoses.rfc5322IPv6MaxGroups);\n                  } else if (groups.length === maxGroups) {\n                    // Eliding a single \"::\"\n                    updateResult(internals.diagnoses.deprecatedIPv6);\n                  }\n                } // IPv6 testing strategy\n\n\n                if (match[0] === ':' && match[1] !== ':') {\n                  updateResult(internals.diagnoses.rfc5322IPv6ColonStart);\n                } else if (match[match.length - 1] === ':' && match[match.length - 2] !== ':') {\n                  updateResult(internals.diagnoses.rfc5322IPv6ColonEnd);\n                } else if (internals.checkIpV6(groups)) {\n                  updateResult(internals.diagnoses.rfc5321AddressLiteral);\n                } else {\n                  updateResult(internals.diagnoses.rfc5322IPv6BadCharacter);\n                }\n              }\n            } else {\n              updateResult(internals.diagnoses.rfc5322DomainLiteral);\n            }\n\n            parseData.domain += token;\n            atomData.domains[elementCount] += token;\n            ++elementLength;\n            context.prev = context.now;\n            context.now = context.stack.pop();\n            break;\n\n          case '\\\\':\n            updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);\n            context.stack.push(context.now);\n            context.now = internals.components.contextQuotedPair;\n            break;\n          // Folding white space\n\n          case '\\r':\n            if (emailLength === ++i || email[i] !== '\\n') {\n              updateResult(internals.diagnoses.errCRNoLF);\n              break;\n            }\n\n          // Fallthrough\n\n          case ' ':\n          case '\\t':\n            updateResult(internals.diagnoses.cfwsFWS);\n            context.stack.push(context.now);\n            context.now = internals.components.contextFWS;\n            prevToken = token;\n            break;\n          // DTEXT\n\n          default:\n            // http://tools.ietf.org/html/rfc5322#section-3.4.1\n            //   dtext         =   %d33-90 /  ; Printable US-ASCII\n            //                     %d94-126 / ;  characters not including\n            //                     obs-dtext  ;  \"[\", \"]\", or \"\\\"\n            //\n            //   obs-dtext     =   obs-NO-WS-CTL / quoted-pair\n            //\n            //   obs-NO-WS-CTL =   %d1-8 /    ; US-ASCII control\n            //                     %d11 /     ;  characters that do not\n            //                     %d12 /     ;  include the carriage\n            //                     %d14-31 /  ;  return, line feed, and\n            //                     %d127      ;  white space characters\n            charCode = token.charCodeAt(0); // '\\r', '\\n', ' ', and '\\t' have already been parsed above\n\n            if (charCode > 127 || charCode === 0 || token === '[') {\n              // Fatal error\n              updateResult(internals.diagnoses.errExpectingDTEXT);\n              break;\n            } else if (charCode < 33 || charCode === 127) {\n              updateResult(internals.diagnoses.rfc5322DomainLiteralOBSDText);\n            }\n\n            parseData.literal += token;\n            parseData.domain += token;\n            atomData.domains[elementCount] += token;\n            ++elementLength;\n        }\n\n        break;\n      // Quoted string\n\n      case internals.components.contextQuotedString:\n        // http://tools.ietf.org/html/rfc5322#section-3.2.4\n        //   quoted-string = [CFWS]\n        //                   DQUOTE *([FWS] qcontent) [FWS] DQUOTE\n        //                   [CFWS]\n        //\n        //   qcontent      = qtext / quoted-pair\n        switch (token) {\n          // Quoted pair\n          case '\\\\':\n            context.stack.push(context.now);\n            context.now = internals.components.contextQuotedPair;\n            break;\n          // Folding white space. Spaces are allowed as regular characters inside a quoted string - it's only FWS if we include '\\t' or '\\r\\n'\n\n          case '\\r':\n            if (emailLength === ++i || email[i] !== '\\n') {\n              // Fatal error\n              updateResult(internals.diagnoses.errCRNoLF);\n              break;\n            }\n\n          // Fallthrough\n\n          case '\\t':\n            // http://tools.ietf.org/html/rfc5322#section-3.2.2\n            //   Runs of FWS, comment, or CFWS that occur between lexical tokens in\n            //   a structured header field are semantically interpreted as a single\n            //   space character.\n            // http://tools.ietf.org/html/rfc5322#section-3.2.4\n            //   the CRLF in any FWS/CFWS that appears within the quoted-string [is]\n            //   semantically \"invisible\" and therefore not part of the\n            //   quoted-string\n            parseData.local += ' ';\n            atomData.locals[elementCount] += ' ';\n            ++elementLength;\n            updateResult(internals.diagnoses.cfwsFWS);\n            context.stack.push(context.now);\n            context.now = internals.components.contextFWS;\n            prevToken = token;\n            break;\n          // End of quoted string\n\n          case '\"':\n            parseData.local += token;\n            atomData.locals[elementCount] += token;\n            ++elementLength;\n            context.prev = context.now;\n            context.now = context.stack.pop();\n            break;\n          // QTEXT\n\n          default:\n            // http://tools.ietf.org/html/rfc5322#section-3.2.4\n            //   qtext          =   %d33 /             ; Printable US-ASCII\n            //                      %d35-91 /          ;  characters not including\n            //                      %d93-126 /         ;  \"\\\" or the quote character\n            //                      obs-qtext\n            //\n            //   obs-qtext      =   obs-NO-WS-CTL\n            //\n            //   obs-NO-WS-CTL  =   %d1-8 /            ; US-ASCII control\n            //                      %d11 /             ;  characters that do not\n            //                      %d12 /             ;  include the carriage\n            //                      %d14-31 /          ;  return, line feed, and\n            //                      %d127              ;  white space characters\n            charCode = token.charCodeAt(0);\n\n            if (charCode > 127 || charCode === 0 || charCode === 10) {\n              updateResult(internals.diagnoses.errExpectingQTEXT);\n            } else if (charCode < 32 || charCode === 127) {\n              updateResult(internals.diagnoses.deprecatedQTEXT);\n            }\n\n            parseData.local += token;\n            atomData.locals[elementCount] += token;\n            ++elementLength;\n        } // http://tools.ietf.org/html/rfc5322#section-3.4.1\n        //   If the string can be represented as a dot-atom (that is, it contains\n        //   no characters other than atext characters or \".\" surrounded by atext\n        //   characters), then the dot-atom form SHOULD be used and the quoted-\n        //   string form SHOULD NOT be used.\n\n\n        break;\n      // Quoted pair\n\n      case internals.components.contextQuotedPair:\n        // http://tools.ietf.org/html/rfc5322#section-3.2.1\n        //   quoted-pair     =   (\"\\\" (VCHAR / WSP)) / obs-qp\n        //\n        //   VCHAR           =  %d33-126   ; visible (printing) characters\n        //   WSP             =  SP / HTAB  ; white space\n        //\n        //   obs-qp          =   \"\\\" (%d0 / obs-NO-WS-CTL / LF / CR)\n        //\n        //   obs-NO-WS-CTL   =   %d1-8 /   ; US-ASCII control\n        //                       %d11 /    ;  characters that do not\n        //                       %d12 /    ;  include the carriage\n        //                       %d14-31 / ;  return, line feed, and\n        //                       %d127     ;  white space characters\n        //\n        // i.e. obs-qp       =  \"\\\" (%d0-8, %d10-31 / %d127)\n        charCode = token.charCodeAt(0);\n\n        if (charCode > 127) {\n          // Fatal error\n          updateResult(internals.diagnoses.errExpectingQPair);\n        } else if (charCode < 31 && charCode !== 9 || charCode === 127) {\n          // ' ' and '\\t' are allowed\n          updateResult(internals.diagnoses.deprecatedQP);\n        } // At this point we know where this qpair occurred so we could check to see if the character actually needed to be quoted at all.\n        // http://tools.ietf.org/html/rfc5321#section-4.1.2\n        //   the sending system SHOULD transmit the form that uses the minimum quoting possible.\n\n\n        context.prev = context.now; // End of qpair\n\n        context.now = context.stack.pop();\n        token = '\\\\' + token;\n\n        switch (context.now) {\n          case internals.components.contextComment:\n            break;\n\n          case internals.components.contextQuotedString:\n            parseData.local += token;\n            atomData.locals[elementCount] += token; // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash\n\n            elementLength += 2;\n            break;\n\n          case internals.components.literal:\n            parseData.domain += token;\n            atomData.domains[elementCount] += token; // The maximum sizes specified by RFC 5321 are octet counts, so we must include the backslash\n\n            elementLength += 2;\n            break;\n          // $lab:coverage:off$\n\n          default:\n            throw new Error('quoted pair logic invoked in an invalid context: ' + context.now);\n          // $lab:coverage:on$\n        }\n\n        break;\n      // Comment\n\n      case internals.components.contextComment:\n        // http://tools.ietf.org/html/rfc5322#section-3.2.2\n        //   comment  = \"(\" *([FWS] ccontent) [FWS] \")\"\n        //\n        //   ccontent = ctext / quoted-pair / comment\n        switch (token) {\n          // Nested comment\n          case '(':\n            // Nested comments are ok\n            context.stack.push(context.now);\n            context.now = internals.components.contextComment;\n            break;\n          // End of comment\n\n          case ')':\n            context.prev = context.now;\n            context.now = context.stack.pop();\n            break;\n          // Quoted pair\n\n          case '\\\\':\n            context.stack.push(context.now);\n            context.now = internals.components.contextQuotedPair;\n            break;\n          // Folding white space\n\n          case '\\r':\n            if (emailLength === ++i || email[i] !== '\\n') {\n              // Fatal error\n              updateResult(internals.diagnoses.errCRNoLF);\n              break;\n            }\n\n          // Fallthrough\n\n          case ' ':\n          case '\\t':\n            updateResult(internals.diagnoses.cfwsFWS);\n            context.stack.push(context.now);\n            context.now = internals.components.contextFWS;\n            prevToken = token;\n            break;\n          // CTEXT\n\n          default:\n            // http://tools.ietf.org/html/rfc5322#section-3.2.3\n            //   ctext         = %d33-39 /  ; Printable US-ASCII\n            //                   %d42-91 /  ;  characters not including\n            //                   %d93-126 / ;  \"(\", \")\", or \"\\\"\n            //                   obs-ctext\n            //\n            //   obs-ctext     = obs-NO-WS-CTL\n            //\n            //   obs-NO-WS-CTL = %d1-8 /    ; US-ASCII control\n            //                   %d11 /     ;  characters that do not\n            //                   %d12 /     ;  include the carriage\n            //                   %d14-31 /  ;  return, line feed, and\n            //                   %d127      ;  white space characters\n            charCode = token.charCodeAt(0);\n\n            if (charCode > 127 || charCode === 0 || charCode === 10) {\n              // Fatal error\n              updateResult(internals.diagnoses.errExpectingCTEXT);\n              break;\n            } else if (charCode < 32 || charCode === 127) {\n              updateResult(internals.diagnoses.deprecatedCTEXT);\n            }\n\n        }\n\n        break;\n      // Folding white space\n\n      case internals.components.contextFWS:\n        // http://tools.ietf.org/html/rfc5322#section-3.2.2\n        //   FWS     =   ([*WSP CRLF] 1*WSP) /  obs-FWS\n        //                                   ; Folding white space\n        // But note the erratum:\n        // http://www.rfc-editor.org/errata_search.php?rfc=5322&eid=1908:\n        //   In the obsolete syntax, any amount of folding white space MAY be\n        //   inserted where the obs-FWS rule is allowed.  This creates the\n        //   possibility of having two consecutive \"folds\" in a line, and\n        //   therefore the possibility that a line which makes up a folded header\n        //   field could be composed entirely of white space.\n        //\n        //   obs-FWS =   1*([CRLF] WSP)\n        if (prevToken === '\\r') {\n          if (token === '\\r') {\n            // Fatal error\n            updateResult(internals.diagnoses.errFWSCRLFx2);\n            break;\n          }\n\n          if (++crlfCount > 1) {\n            // Multiple folds => obsolete FWS\n            updateResult(internals.diagnoses.deprecatedFWS);\n          } else {\n            crlfCount = 1;\n          }\n        }\n\n        switch (token) {\n          case '\\r':\n            if (emailLength === ++i || email[i] !== '\\n') {\n              // Fatal error\n              updateResult(internals.diagnoses.errCRNoLF);\n            }\n\n            break;\n\n          case ' ':\n          case '\\t':\n            break;\n\n          default:\n            if (prevToken === '\\r') {\n              // Fatal error\n              updateResult(internals.diagnoses.errFWSCRLFEnd);\n            }\n\n            crlfCount = 0; // End of FWS\n\n            context.prev = context.now;\n            context.now = context.stack.pop(); // Look at this token again in the parent context\n\n            --i;\n        }\n\n        prevToken = token;\n        break;\n      // Unexpected context\n      // $lab:coverage:off$\n\n      default:\n        throw new Error('unknown context: ' + context.now);\n      // $lab:coverage:on$\n    } // Primary state machine\n\n\n    if (maxResult > internals.categories.rfc5322) {\n      // Fatal error, no point continuing\n      break;\n    }\n  } // Token loop\n  // Check for errors\n\n\n  if (maxResult < internals.categories.rfc5322) {\n    // Fatal errors\n    if (context.now === internals.components.contextQuotedString) {\n      updateResult(internals.diagnoses.errUnclosedQuotedString);\n    } else if (context.now === internals.components.contextQuotedPair) {\n      updateResult(internals.diagnoses.errBackslashEnd);\n    } else if (context.now === internals.components.contextComment) {\n      updateResult(internals.diagnoses.errUnclosedComment);\n    } else if (context.now === internals.components.literal) {\n      updateResult(internals.diagnoses.errUnclosedDomainLiteral);\n    } else if (token === '\\r') {\n      updateResult(internals.diagnoses.errFWSCRLFEnd);\n    } else if (parseData.domain.length === 0) {\n      updateResult(internals.diagnoses.errNoDomain);\n    } else if (elementLength === 0) {\n      updateResult(internals.diagnoses.errDotEnd);\n    } else if (hyphenFlag) {\n      updateResult(internals.diagnoses.errDomainHyphenEnd);\n    } // Other errors\n    else if (parseData.domain.length > 255) {\n        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.2\n        //   The maximum total length of a domain name or number is 255 octets.\n        updateResult(internals.diagnoses.rfc5322DomainTooLong);\n      } else if (parseData.local.length + parseData.domain.length +\n      /* '@' */\n      1 > 254) {\n        // http://tools.ietf.org/html/rfc5321#section-4.1.2\n        //   Forward-path   = Path\n        //\n        //   Path           = \"<\" [ A-d-l \":\" ] Mailbox \">\"\n        //\n        // http://tools.ietf.org/html/rfc5321#section-4.5.3.1.3\n        //   The maximum total length of a reverse-path or forward-path is 256 octets (including the punctuation and element separators).\n        //\n        // Thus, even without (obsolete) routing information, the Mailbox can only be 254 characters long. This is confirmed by this verified\n        // erratum to RFC 3696:\n        //\n        // http://www.rfc-editor.org/errata_search.php?rfc=3696&eid=1690\n        //   However, there is a restriction in RFC 2821 on the length of an address in MAIL and RCPT commands of 254 characters.  Since\n        //   addresses that do not fit in those fields are not normally useful, the upper limit on address lengths should normally be considered\n        //   to be 254.\n        updateResult(internals.diagnoses.rfc5322TooLong);\n      } else if (elementLength > 63) {\n        // http://tools.ietf.org/html/rfc1035#section-2.3.4\n        // labels   63 octets or less\n        updateResult(internals.diagnoses.rfc5322LabelTooLong);\n      } else if (options.minDomainAtoms && atomData.domains.length < options.minDomainAtoms) {\n        updateResult(internals.diagnoses.errDomainTooShort);\n      } else if (options.tldWhitelist || options.tldBlacklist) {\n        const tldAtom = atomData.domains[elementCount];\n\n        if (!internals.validDomain(tldAtom, options)) {\n          updateResult(internals.diagnoses.errUnknownTLD);\n        }\n      }\n  } // Check for errors\n\n\n  let dnsPositive = false;\n  let finishImmediately = false;\n\n  const finish = () => {\n    if (!dnsPositive && maxResult < internals.categories.dnsWarn) {\n      // Per RFC 5321, domain atoms are limited to letter-digit-hyphen, so we only need to check code <= 57 to check for a digit\n      const code = atomData.domains[elementCount].charCodeAt(0);\n\n      if (code <= 57) {\n        updateResult(internals.diagnoses.rfc5321TLDNumeric);\n      } else if (elementCount === 0) {\n        updateResult(internals.diagnoses.rfc5321TLD);\n      }\n    }\n\n    if (maxResult < threshold) {\n      maxResult = internals.diagnoses.valid;\n    }\n\n    const finishResult = diagnose ? maxResult : maxResult < internals.defaultThreshold;\n\n    if (callback) {\n      if (finishImmediately) {\n        callback(finishResult);\n      } else {\n        internals.defer(callback.bind(null, finishResult));\n      }\n    }\n\n    return finishResult;\n  }; // Finish\n\n\n  if (options.checkDNS && maxResult < internals.categories.dnsWarn) {\n    // http://tools.ietf.org/html/rfc5321#section-2.3.5\n    //   Names that can be resolved to MX RRs or address (i.e., A or AAAA) RRs (as discussed in Section 5) are permitted, as are CNAME RRs whose\n    //   targets can be resolved, in turn, to MX or address RRs.\n    //\n    // http://tools.ietf.org/html/rfc5321#section-5.1\n    //   The lookup first attempts to locate an MX record associated with the name.  If a CNAME record is found, the resulting name is processed\n    //   as if it were the initial name. ... If an empty list of MXs is returned, the address is treated as if it was associated with an implicit\n    //   MX RR, with a preference of 0, pointing to that host.\n    //\n    // isEmail() author's note: We will regard the existence of a CNAME to be sufficient evidence of the domain's existence. For performance\n    // reasons we will not repeat the DNS lookup for the CNAME's target, but we will raise a warning because we didn't immediately find an MX\n    // record.\n    if (elementCount === 0) {\n      // Checking TLD DNS only works if you explicitly check from the root\n      parseData.domain += '.';\n    }\n\n    const dnsDomain = parseData.domain;\n    Dns.resolveMx(dnsDomain, (err, mxRecords) => {\n      // If we have a fatal error, then we must assume that there are no records\n      if (err && err.code !== Dns.NODATA) {\n        updateResult(internals.diagnoses.dnsWarnNoRecord);\n        return finish();\n      }\n\n      if (mxRecords && mxRecords.length) {\n        dnsPositive = true;\n        return finish();\n      }\n\n      let count = 3;\n      let done = false;\n      updateResult(internals.diagnoses.dnsWarnNoMXRecord);\n\n      const handleRecords = (ignoreError, records) => {\n        if (done) {\n          return;\n        }\n\n        --count;\n\n        if (records && records.length) {\n          done = true;\n          return finish();\n        }\n\n        if (count === 0) {\n          // No usable records for the domain can be found\n          updateResult(internals.diagnoses.dnsWarnNoRecord);\n          done = true;\n          finish();\n        }\n      };\n\n      Dns.resolveCname(dnsDomain, handleRecords);\n      Dns.resolve4(dnsDomain, handleRecords);\n      Dns.resolve6(dnsDomain, handleRecords);\n    });\n    finishImmediately = true;\n  } else {\n    const result = finish();\n    finishImmediately = true;\n    return result;\n  } // CheckDNS\n\n};\n\nexports.diagnoses = internals.validate.diagnoses = function () {\n  const diag = {};\n  const keys = Object.keys(internals.diagnoses);\n\n  for (let i = 0; i < keys.length; ++i) {\n    const key = keys[i];\n    diag[key] = internals.diagnoses[key];\n  }\n\n  return diag;\n}();","map":null,"metadata":{},"sourceType":"script"}