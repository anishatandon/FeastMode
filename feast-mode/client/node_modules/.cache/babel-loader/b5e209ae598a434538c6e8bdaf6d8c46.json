{"ast":null,"code":"import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/storage';\nconst config = {\n  apiKey: \"AIzaSyA2GpyDPNZxR9u5_iA425p-3XLKrPwjAyA\",\n  authDomain: \"feast-mode.firebaseapp.com\",\n  databaseURL: \"https://feast-mode.firebaseio.com\",\n  projectId: \"feast-mode\",\n  storageBucket: \"feast-mode.appspot.com\",\n  // added storage in firebase - AL\n  messagingSenderId: \"824628144237\",\n  appId: \"1:824628144237:web:e2171ef9638afce7\"\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.doEmailUpdate = email => this.auth.currentUser.updateEmail(email);\n\n    this.doProfileUpdate = dictionary => this.auth.currentUser.updateProfile(dictionary);\n\n    this.doDeleteUser = () => this.auth.delete();\n\n    this.user = uid => this.db.ref(\"users/\".concat(uid));\n\n    this.users = () => this.db.ref('users');\n\n    this.userID = () => this.auth.currentUser;\n\n    app.initializeApp(config); // initialize the app\n\n    this.firestore = app.firestore();\n    this.auth = app.auth();\n    this.db = app.database();\n    this.storage = app.storage();\n  } // *** Auth API ***\n\n\n} //   firebase.initializeApp(config);\n//   export const provider = new firebase.auth.GoogleAuthProvider();\n//   export const auth = firebase.auth();\n\n\nexport const storage = Firebase.storage;\nexport { app };\nexport default Firebase;","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/backend/Firebase/firebase.js"],"names":["app","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","currentUser","updatePassword","doEmailUpdate","updateEmail","doProfileUpdate","dictionary","updateProfile","doDeleteUser","delete","user","uid","db","ref","users","userID","initializeApp","firestore","database","storage"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,kBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,4BAFC;AAGbC,EAAAA,WAAW,EAAE,mCAHA;AAIbC,EAAAA,SAAS,EAAE,YAJE;AAKbC,EAAAA,aAAa,EAAE,wBALF;AAK4B;AACzCC,EAAAA,iBAAiB,EAAE,cANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;;AAUA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAAA,SAWdC,gCAXc,GAWqB,CAACC,KAAD,EAAQC,QAAR,KACjC,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CAZY;;AAAA,SAcdG,4BAdc,GAciB,CAACJ,KAAD,EAAQC,QAAR,KAC7B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAfY;;AAAA,SAiBdK,SAjBc,GAiBF,MAAM,KAAKJ,IAAL,CAAUK,OAAV,EAjBJ;;AAAA,SAmBdC,eAnBc,GAmBIR,KAAK,IACrB,KAAKE,IAAL,CAAUO,sBAAV,CAAiCT,KAAjC,CApBY;;AAAA,SAsBdU,gBAtBc,GAsBKT,QAAQ,IACzB,KAAKC,IAAL,CAAUS,WAAV,CAAsBC,cAAtB,CAAqCX,QAArC,CAvBY;;AAAA,SAyBdY,aAzBc,GAyBEb,KAAK,IACnB,KAAKE,IAAL,CAAUS,WAAV,CAAsBG,WAAtB,CAAkCd,KAAlC,CA1BY;;AAAA,SA4Bde,eA5Bc,GA4BIC,UAAU,IAC1B,KAAKd,IAAL,CAAUS,WAAV,CAAsBM,aAAtB,CAAoCD,UAApC,CA7BY;;AAAA,SA+BdE,YA/Bc,GA+BC,MACb,KAAKhB,IAAL,CAAUiB,MAAV,EAhCY;;AAAA,SAkCdC,IAlCc,GAkCPC,GAAG,IAAI,KAAKC,EAAL,CAAQC,GAAR,iBAAqBF,GAArB,EAlCA;;AAAA,SAoCdG,KApCc,GAoCN,MAAM,KAAKF,EAAL,CAAQC,GAAR,CAAY,OAAZ,CApCA;;AAAA,SAsCdE,MAtCc,GAsCL,MAAM,KAAKvB,IAAL,CAAUS,WAtCX;;AACZvB,IAAAA,GAAG,CAACsC,aAAJ,CAAkBrC,MAAlB,EADY,CACe;;AAE3B,SAAKsC,SAAL,GAAiBvC,GAAG,CAACuC,SAAJ,EAAjB;AACA,SAAKzB,IAAL,GAAYd,GAAG,CAACc,IAAJ,EAAZ;AACA,SAAKoB,EAAL,GAAUlC,GAAG,CAACwC,QAAJ,EAAV;AACA,SAAKC,OAAL,GAAezC,GAAG,CAACyC,OAAJ,EAAf;AACD,GARY,CAUb;;;AAVa,C,CA2Cf;AACA;AACA;;;AAEA,OAAO,MAAMA,OAAO,GAAGhC,QAAQ,CAACgC,OAAzB;AACP,SAASzC,GAAT;AAGA,eAAeS,QAAf","sourcesContent":["import app from 'firebase/app';\nimport 'firebase/auth';\nimport 'firebase/storage';\n\nconst config = {\n  apiKey: \"AIzaSyA2GpyDPNZxR9u5_iA425p-3XLKrPwjAyA\",\n  authDomain: \"feast-mode.firebaseapp.com\",\n  databaseURL: \"https://feast-mode.firebaseio.com\",\n  projectId: \"feast-mode\",\n  storageBucket: \"feast-mode.appspot.com\", // added storage in firebase - AL\n  messagingSenderId: \"824628144237\",\n  appId: \"1:824628144237:web:e2171ef9638afce7\",\n}\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config); // initialize the app\n\n    this.firestore = app.firestore()\n    this.auth = app.auth();\n    this.db = app.database();\n    this.storage = app.storage();\n  }\n\n  // *** Auth API ***\n\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email =>\n    this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = password =>\n    this.auth.currentUser.updatePassword(password);\n\n  doEmailUpdate = email =>\n    this.auth.currentUser.updateEmail(email);\n\n  doProfileUpdate = dictionary =>\n    this.auth.currentUser.updateProfile(dictionary);\n\n  doDeleteUser = () =>\n    this.auth.delete()\n\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref('users');\n\n  userID = () => this.auth.currentUser\n}\n\n\n//   firebase.initializeApp(config);\n//   export const provider = new firebase.auth.GoogleAuthProvider();\n//   export const auth = firebase.auth();\n\nexport const storage = Firebase.storage;\nexport { app }\n\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}