{"ast":null,"code":"'use strict';\n\nvar httpJson = require('./http-json');\n\nvar urls = require('./urls.json');\n\nvar util = require('util');\n\nvar fs = require('fs');\n\nvar Menu = require('./Menu.js');\n\nvar Store = function (parameters) {\n  this.ID = parameters.ID;\n};\n\nStore.prototype.getInfo = function (callback) {\n  if (!this.ID || !callback) {\n    if (callback) callback({\n      success: false,\n      message: 'A callback is required to get store info'\n    });\n    return;\n  }\n\n  httpJson.get(urls.store.info.replace('${storeID}', this.ID), callback);\n};\n\nStore.prototype.getMenu = function (callback, lang, noCache) {\n  if (this.cachedMenu && !noCache) {\n    callback(this.cachedMenu); //TODO as below, break compatibility by removing first parameter\n\n    return;\n  }\n\n  if (!this.ID || !callback) {\n    if (callback) callback({\n      success: false,\n      message: 'A callback is required to get a store menu'\n    });\n    return;\n  }\n\n  if (!lang) lang = 'en';\n  var url = urls.store.menu.replace('${storeID}', this.ID).replace('${lang}', lang);\n  httpJson.get(url, function (jsonObj) {\n    this.cachedMenu = new Menu(jsonObj);\n    callback(this.cachedMenu); //TODO break compatibility by removing first parameter\n  }.bind(this));\n  /*\n  httpJson.get(\n      url,\n      (function(response) {\n          fs.writeFile('sampleResp/menu'+this.ID+'.json', JSON.stringify(response, null, 4), function (err) {\n              if (err) throw err;\n              console.log('It\\'s saved!');\n          });\n      }).bind(this)\n  );\n  */\n};\n\nStore.prototype.getFriendlyNames = function (callback, lang) {\n  if (!this.ID || !callback) {\n    if (callback) callback({\n      success: false,\n      message: 'A callback is required to get a store menu'\n    });\n    return;\n  }\n\n  if (!lang) lang = 'en';\n  var url = urls.store.menu.replace('${storeID}', this.ID).replace('${lang}', lang);\n  httpJson.get(url, function (result) {\n    var itemMapping = [];\n    var keys = Object.keys(result.result.Variants);\n    keys.forEach(function (key) {\n      var json = {};\n      json[result.result.Variants[key].Name] = key;\n      itemMapping.push(json);\n    });\n    callback({\n      success: true,\n      result: itemMapping\n    });\n  });\n};\n\nmodule.exports = Store;","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/dominos/src/Store.js"],"names":["httpJson","require","urls","util","fs","Menu","Store","parameters","ID","prototype","getInfo","callback","success","message","get","store","info","replace","getMenu","lang","noCache","cachedMenu","url","menu","jsonObj","bind","getFriendlyNames","result","itemMapping","keys","Object","Variants","forEach","key","json","Name","push","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar httpJson = require('./http-json');\nvar urls = require('./urls.json');\nvar util=require('util');\nvar fs=require('fs');\nvar Menu=require('./Menu.js');\n\nvar Store = function(parameters) {\n    this.ID = parameters.ID;\n};\n\nStore.prototype.getInfo = function(callback) {\n    if( !this.ID || !callback){\n        if(callback)\n            callback(\n                {\n                    success: false,\n                    message: 'A callback is required to get store info'\n                }\n            );\n        return;\n    }\n\n    httpJson.get(urls.store.info.replace('${storeID}', this.ID), callback);\n};\n\nStore.prototype.getMenu = function(callback, lang, noCache) {\n    if (this.cachedMenu && !noCache) {\n        callback(this.cachedMenu); //TODO as below, break compatibility by removing first parameter\n        return;\n    }\n    if( !this.ID || !callback){\n        if(callback)\n            callback({\n                success: false,\n                message: 'A callback is required to get a store menu'\n            });\n        return;\n    }\n\n    if(!lang)\n        lang = 'en';\n\n    var url = urls.store.menu.replace('${storeID}', this.ID)\n        .replace('${lang}', lang);\n\n\n    httpJson.get(url,(function(jsonObj) {\n        this.cachedMenu = new Menu(jsonObj);\n        callback(this.cachedMenu); //TODO break compatibility by removing first parameter\n    }).bind(this));\n\n    /*\n    httpJson.get(\n        url,\n        (function(response) {\n            fs.writeFile('sampleResp/menu'+this.ID+'.json', JSON.stringify(response, null, 4), function (err) {\n                if (err) throw err;\n                console.log('It\\'s saved!');\n            });\n        }).bind(this)\n    );\n    */\n};\n\nStore.prototype.getFriendlyNames = function(callback, lang) {\n  if( !this.ID || !callback){\n      if(callback)\n          callback({\n              success: false,\n              message: 'A callback is required to get a store menu'\n          });\n      return;\n  }\n\n  if(!lang)\n      lang = 'en';\n\n  var url = urls.store.menu.replace('${storeID}', this.ID)\n      .replace('${lang}', lang);\n\n  httpJson.get(url, function(result) {\n    var itemMapping = [];\n    var keys = Object.keys(result.result.Variants);\n    keys.forEach(function(key) {\n      var json = {};\n      json[result.result.Variants[key].Name] = key\n      itemMapping.push(json);\n    });\n\n    callback({ success: true, result: itemMapping });\n  });\n}\n\nmodule.exports = Store;\n"]},"metadata":{},"sourceType":"module"}