{"ast":null,"code":"'use strict'; // Load modules\n\nconst Hoek = require('hoek');\n\nconst Ref = require('./ref'); // Type modules are delay-loaded to prevent circular dependencies\n// Declare internals\n\n\nconst internals = {\n  any: null,\n  date: require('./date'),\n  string: require('./string'),\n  number: require('./number'),\n  boolean: require('./boolean'),\n  alt: null,\n  object: null\n};\n\nexports.schema = function (config) {\n  internals.any = internals.any || new (require('./any'))();\n  internals.alt = internals.alt || require('./alternatives');\n  internals.object = internals.object || require('./object');\n\n  if (config !== undefined && config !== null && typeof config === 'object') {\n    if (config.isJoi) {\n      return config;\n    }\n\n    if (Array.isArray(config)) {\n      return internals.alt.try(config);\n    }\n\n    if (config instanceof RegExp) {\n      return internals.string.regex(config);\n    }\n\n    if (config instanceof Date) {\n      return internals.date.valid(config);\n    }\n\n    return internals.object.keys(config);\n  }\n\n  if (typeof config === 'string') {\n    return internals.string.valid(config);\n  }\n\n  if (typeof config === 'number') {\n    return internals.number.valid(config);\n  }\n\n  if (typeof config === 'boolean') {\n    return internals.boolean.valid(config);\n  }\n\n  if (Ref.isRef(config)) {\n    return internals.any.valid(config);\n  }\n\n  Hoek.assert(config === null, 'Invalid schema content:', config);\n  return internals.any.valid(null);\n};\n\nexports.ref = function (id) {\n  return Ref.isRef(id) ? id : Ref.create(id);\n};","map":null,"metadata":{},"sourceType":"script"}