{"ast":null,"code":"'use strict';\n\nvar util = require('util');\n\nvar Address = function (parameters) {\n  Object.defineProperties(this, {\n    parse: {\n      value: parse,\n      enumerable: true,\n      writable: false\n    },\n    getAddressLines: {\n      value: getAddressLines,\n      enumerable: true,\n      writable: false\n    },\n    Type: {\n      value: 'House',\n      enumerable: true,\n      writable: true\n    },\n    Street: {\n      value: '',\n      enumerable: true,\n      writable: true\n    },\n    City: {\n      value: '',\n      enumerable: true,\n      writable: true\n    },\n    Region: {\n      value: '',\n      enumerable: true,\n      writable: true\n    },\n    PostalCode: {\n      value: '',\n      enumerable: true,\n      writable: true\n    },\n    _init: {\n      value: init,\n      enumerable: false,\n      writable: false\n    },\n    _parameters: {\n      value: parameters,\n      enumerable: false,\n      writable: false\n    }\n  });\n\n  this._init();\n\n  function init() {\n    if (typeof this._parameters == 'object' && this._parameters.PostalCode) {\n      this.Street = this._parameters.Street;\n      this.City = this._parameters.City;\n      this.Region = this._parameters.Region;\n      this.PostalCode = this._parameters.PostalCode;\n    }\n\n    if (util.isArray(this._parameters)) {\n      this.Street = this._parameters[0];\n      this.City = this._parameters[1];\n      this.Region = this._parameters[2];\n      this.PostalCode = this._parameters[3];\n    }\n\n    if (typeof this._parameters == 'number') {\n      this._parameters += '';\n    }\n\n    if (typeof this._parameters == 'string') {\n      this.parse(this._parameters);\n    }\n\n    if (this._parameters.Type) {\n      this.Type = this._parameters.Type;\n    }\n  }\n\n  function parse(locationString) {\n    var splitAddress = locationString.split(',');\n\n    for (var i in splitAddress) {\n      splitAddress[i] = splitAddress[i].trim();\n    }\n\n    this.PostalCode = splitAddress[splitAddress.length - 1]; //need better intellegence for auto determining address parts\n    //added some, should externalize it\n    //while not perfect, it does seem to get most of the right stuff\n    //in good enough places for dominos to like it.\n\n    switch (splitAddress.length) {\n      case 1:\n        if (!this.PostalCode) {\n          this.PostalCode = '';\n          this.City = splitAddress[0];\n        }\n\n        break;\n\n      case 2:\n        if (splitAddress[0].length < 3) {\n          this.Region = splitAddress[0];\n        } else {\n          this.City = splitAddress[0];\n        }\n\n        if (!this.PostalCode) {\n          if (splitAddress[1].length > 2) {\n            if (this.City) {\n              this.Street = this.City;\n            }\n\n            this.City = splitAddress[1];\n          } else {\n            if (this.Region) {\n              this.City = this.Region;\n            }\n\n            this.Region = splitAddress[1];\n          }\n        }\n\n        break;\n\n      case 3:\n        if (splitAddress[0].length < 3) {\n          this.Region = splitAddress[0];\n        } else {\n          this.City = splitAddress[0];\n        }\n\n        if (splitAddress[1].length < 3) {\n          if (this.Region) {\n            if (this.City) {\n              this.Street = this.City;\n            }\n\n            this.City = this.Region;\n          }\n\n          this.Region = splitAddress[1];\n        } else {\n          if (this.City) {\n            this.Street = this.City;\n          }\n\n          this.City = splitAddress[1];\n        }\n\n        if (!this.PostalCode) {\n          if (splitAddress[2].length < 3) {\n            if (this.Region) {\n              if (this.City) {\n                this.Street = this.City;\n              }\n\n              this.City = this.Region;\n            }\n\n            this.Region = splitAddress[2];\n          } else {\n            if (this.City) {\n              this.Street = this.City;\n            }\n\n            this.City = splitAddress[1];\n          }\n        }\n\n        break;\n\n      case 4:\n        this.Street = splitAddress[0];\n        this.City = splitAddress[1];\n        this.Region = splitAddress[2];\n        this.PostalCode = splitAddress[3];\n    }\n\n    if (!this.PostalCode) {\n      this.PostalCode = '';\n    } //converts to string if number\n\n\n    this.PostalCode += '';\n  }\n\n  ;\n\n  function getAddressLines() {\n    var line1 = this.Street || '';\n    var line2 = (this.City ? this.City + ',' : '') + (this.Region ? this.Region + ',' : '') + this.PostalCode;\n    var lines = [line1, line2];\n    lines.line1 = line1;\n    lines.line2 = line2;\n    return lines;\n  }\n};\n\nmodule.exports = Address;","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/dominos/src/Address.js"],"names":["util","require","Address","parameters","Object","defineProperties","parse","value","enumerable","writable","getAddressLines","Type","Street","City","Region","PostalCode","_init","init","_parameters","isArray","locationString","splitAddress","split","i","trim","length","line1","line2","lines","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar util = require('util');\n\nvar Address = function(parameters) {\n    Object.defineProperties(\n        this,\n        {\n            parse:{\n                value:parse,\n                enumerable:true,\n                writable:false\n            },\n            getAddressLines:{\n                value:getAddressLines,\n                enumerable:true,\n                writable:false\n            },\n            Type:{\n                value:'House',\n                enumerable:true,\n                writable:true\n            },\n            Street:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            City:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            Region:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            PostalCode:{\n                value:'',\n                enumerable:true,\n                writable:true\n            },\n            _init:{\n                value:init,\n                enumerable:false,\n                writable:false\n            },\n            _parameters:{\n                value:parameters,\n                enumerable:false,\n                writable:false\n            }\n        }\n    );\n\n    this._init();\n\n    function init(){\n        if (typeof this._parameters == 'object' && this._parameters.PostalCode) {\n            this.Street = this._parameters.Street;\n            this.City = this._parameters.City;\n            this.Region = this._parameters.Region;\n            this.PostalCode = this._parameters.PostalCode;\n        }\n\n\n\n        if (util.isArray(this._parameters)) {\n            this.Street = this._parameters[0];\n            this.City = this._parameters[1];\n            this.Region = this._parameters[2];\n            this.PostalCode = this._parameters[3];\n        }\n\n        if (typeof this._parameters == 'number') {\n            this._parameters+='';\n        }\n\n        if (typeof this._parameters == 'string') {\n            this.parse(this._parameters);\n        }\n\n        if (this._parameters.Type) {\n            this.Type = this._parameters.Type;\n        }\n    }\n\n    function parse(locationString) {\n        var splitAddress = locationString.split(',');\n\n        for (var i in splitAddress) {\n            splitAddress[i] = splitAddress[i].trim();\n        }\n\n        this.PostalCode= splitAddress[splitAddress.length-1]\n\n        //need better intellegence for auto determining address parts\n        //added some, should externalize it\n        //while not perfect, it does seem to get most of the right stuff\n        //in good enough places for dominos to like it.\n        switch (splitAddress.length) {\n            case 1:\n                if (!this.PostalCode) {\n                    this.PostalCode='';\n                    this.City = splitAddress[0];\n                }\n                break;\n            case 2:\n                if(splitAddress[0].length<3){\n                    this.Region = splitAddress[0];\n                }else{\n                    this.City = splitAddress[0];\n                }\n                if (!this.PostalCode) {\n                    if(splitAddress[1].length>2){\n                        if(this.City){\n                            this.Street = this.City;\n                        }\n                        this.City = splitAddress[1];\n                    }else{\n                        if(this.Region){\n                            this.City=this.Region;\n                        }\n                        this.Region = splitAddress[1];\n                    }\n                }\n                break;\n            case 3:\n                if(splitAddress[0].length<3){\n                    this.Region = splitAddress[0];\n                }else{\n                    this.City = splitAddress[0];\n                }\n\n                if(splitAddress[1].length<3){\n                    if(this.Region){\n                        if(this.City){\n                            this.Street = this.City;\n                        }\n                        this.City=this.Region;\n                    }\n                    this.Region = splitAddress[1];\n                }else{\n                    if(this.City){\n                        this.Street = this.City;\n                    }\n                    this.City = splitAddress[1];\n                }\n\n                if (!this.PostalCode) {\n                    if(splitAddress[2].length<3){\n                        if(this.Region){\n                            if(this.City){\n                                this.Street = this.City;\n                            }\n                            this.City=this.Region;\n                        }\n                        this.Region = splitAddress[2];\n                    }else{\n                        if(this.City){\n                            this.Street = this.City;\n                        }\n                        this.City = splitAddress[1];\n                    }\n                }\n                break;\n            case 4:\n                this.Street = splitAddress[0];\n                this.City = splitAddress[1];\n                this.Region = splitAddress[2];\n                this.PostalCode = splitAddress[3];\n        }\n\n        if (!this.PostalCode) {\n            this.PostalCode='';\n        }\n        //converts to string if number\n        this.PostalCode+='';\n    };\n\n    function getAddressLines() {\n        var line1 = this.Street||'';\n        var line2 = (this.City ? this.City + ',' : '') +\n            (this.Region ? this.Region + ',' : '') +\n            this.PostalCode\n\n        var lines=[line1, line2];\n        lines.line1=line1;\n        lines.line2=line2;\n\n        return lines;\n    }\n};\n\nmodule.exports = Address;\n"]},"metadata":{},"sourceType":"module"}