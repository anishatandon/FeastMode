{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/components/Food/Dominos.js\";\nimport React from 'react';\n\nconst pizzapi = require('dominos'); // const orderTypes = {\n//   Delivery: 'Delivery',\n//   Carryout: 'Carryout',\n// }\n// /**\n//  * Get all stores near an address.\n//  * @param {string} orderType - The type of order. Can be Delivery or Carryout.\n//  * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n//  * @param {string} [streetAddress] - The house number and street name.\n//  * @return {Promise<object>} The list of stores near the given address.\n//  */\n// async function getStoresNearAddress(\n//   orderType,\n//   cityRegionOrPostalCode = '',\n//   streetAddress = '',\n// ) {\n//   const response = await fetch(`/dominos?type=${orderType}&c=${cityRegionOrPostalCode}&s=${streetAddress}`);\n//   return response.json();\n// }\n// /**\n//  * Get the nearest store that delivers to a given address.\n//  * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n//  * @param {string} streetAddress - The house number and street name.\n//  * @return {Promise<object>} The nearest store that will deliver to the given address.\n//  */\n// async function getNearestDeliveryStore(\n//     cityRegionOrPostalCode = '',\n//     streetAddress = '',\n//   ) {\n//   const storesResult = await getStoresNearAddress(\n//     orderTypes.Delivery,\n//     cityRegionOrPostalCode,\n//     streetAddress,\n//   );\n//   return storesResult.find(store => store.AllowDeliveryOrders);\n// } \n// /**\n//  * Get all menu info for a given store including Product Codes, Options and Coupons\n//  * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n//  * @return {Promise<object>} The menu for the given store.\n//  */\n// async function getStoreMenu(storeId) {\n//   const response = await fetch(`/store_menu?id=${storeId}`);\n//   return response.json();\n// }\n// /**\n//  * Validate the information for a given Order.\n//  * @param {object} order - The order to validate.\n//  * @return {Promise<object>} The validation response.\n//  */\n// async function validateOrder(order) {\n//   const response = await fetch(`/order?order=${JSON.stringify(order)}&endpoint=validate-order`);\n//   return response.json();\n// }\n// /**\n//  * Get the total price for a given Order. (Including Coupon discounts and added Tax).\n//  * You should make sure your order is valid with validateOrder before calling priceOrder.\n//  * @param {object} order - The order to price.\n//  * @return {Promise<object>} The pricing response.\n//  */\n// async function priceOrder(order) {\n//   const response = await fetch(`/order?order=${JSON.stringify(order)}&endpoint=price-order`);\n//   return response.json();\n// }\n// (async () => {\n//   const storesResult = await getStoresNearAddress(orderTypes.Delivery, 'Claremont, CA, 91711', '')\n//   console.log(storesResult)\n//   const storeResult = await getNearestDeliveryStore('Claremont, CA, 91711', '');\n//   console.log(storeResult)\n//   const storeMenu = await getStoreMenu(storeResult.StoreID);\n//   console.log(storeMenu)\n//   const order = {\n//     Order: {\n//       Address: { // <- Update this\n//         Street: '301 E. Twelfth St.',\n//         City: 'Claremont',\n//         Region: 'CA',\n//         PostalCode: '91711',\n//         Type: 'House',\n//         StreetName: 'E Twelfth St',\n//         StreetNumber: '301',\n//       },\n//       // Specify any coupons here, leave empty if not using a coupon\n//       Coupons: [{}],\n//       Email: 'ilistarosales@g.hmc.edu', // <- Update this\n//       FirstName: 'Ignacio', // <- Update this\n//       LastName: 'Lista', // <- Update this\n//       LanguageCode: 'en',\n//       OrderChannel: 'OLO',\n//       OrderMethod: 'Web',\n//       OrderTaker: null,\n//       Payments: [],\n//       Phone: '9096676560', // <- Update this\n//       PhonePrefix: '1', // <- Update this\n//       // An array of products. Find the corresponding code and available options in the menu response.\n//       Products: [{\n//         Code: 'S_PIZPX',\n//         Qty: 1,\n//         isNew: true,\n//         Options: {\n//           X: {\n//             '1/1': '1',\n//           },\n//           C: {\n//             '1/1': '1',\n//           },\n//           Cp: {\n//             '1/1': '1',\n//           },\n//           P: {\n//             '1/2': '1',\n//           },\n//           Cs: {\n//             '2/2': '1',\n//           },\n//         },\n//       }],\n//       ServiceMethod: orderTypes.Delivery, // <- Update this can be Delivery or Carryout\n//       SourceOrganizationURI: 'order.dominos.com',\n//       StoreID: storeResult.StoreID,\n//       Tags: {},\n//       Version: '1.0',\n//       NoCombine: true,\n//       Partners: {},\n//       OrderInfoCollection: [],\n//     },\n//   }\n//   console.log(order)\n//   const orderValid = await validateOrder(order)\n//   console.log(order)\n//   console.log(orderValid)\n//   order.Order.OrderID = orderValid.Order.OrderID // get the generated orderID from the response\n//   console.log(order.Order.OrderID)\n//   const pricedOrder = await priceOrder(orderValid)\n//   console.log(order)\n//   console.log(pricedOrder)\n//   const amount = pricedOrder.Order.Amounts.Customer // get total amount for order\n//   console.log(amount)\n// })()\n\n\nexport const App = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }, \" Hello World \");\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/components/Food/Dominos.js"],"names":["React","pizzapi","require","App"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvrB,SAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAAP;AACH,CAFM","sourcesContent":["import React from 'react'\nconst pizzapi = require('dominos')\n\n// const orderTypes = {\n//   Delivery: 'Delivery',\n//   Carryout: 'Carryout',\n// }\n\n// /**\n//  * Get all stores near an address.\n//  * @param {string} orderType - The type of order. Can be Delivery or Carryout.\n//  * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n//  * @param {string} [streetAddress] - The house number and street name.\n//  * @return {Promise<object>} The list of stores near the given address.\n//  */\n// async function getStoresNearAddress(\n//   orderType,\n//   cityRegionOrPostalCode = '',\n//   streetAddress = '',\n// ) {\n//   const response = await fetch(`/dominos?type=${orderType}&c=${cityRegionOrPostalCode}&s=${streetAddress}`);\n//   return response.json();\n// }\n\n// /**\n//  * Get the nearest store that delivers to a given address.\n//  * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n//  * @param {string} streetAddress - The house number and street name.\n//  * @return {Promise<object>} The nearest store that will deliver to the given address.\n//  */\n// async function getNearestDeliveryStore(\n//     cityRegionOrPostalCode = '',\n//     streetAddress = '',\n//   ) {\n//   const storesResult = await getStoresNearAddress(\n//     orderTypes.Delivery,\n//     cityRegionOrPostalCode,\n//     streetAddress,\n//   );\n//   return storesResult.find(store => store.AllowDeliveryOrders);\n// } \n\n// /**\n//  * Get all menu info for a given store including Product Codes, Options and Coupons\n//  * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n//  * @return {Promise<object>} The menu for the given store.\n//  */\n// async function getStoreMenu(storeId) {\n//   const response = await fetch(`/store_menu?id=${storeId}`);\n//   return response.json();\n// }\n\n// /**\n//  * Validate the information for a given Order.\n//  * @param {object} order - The order to validate.\n//  * @return {Promise<object>} The validation response.\n//  */\n// async function validateOrder(order) {\n//   const response = await fetch(`/order?order=${JSON.stringify(order)}&endpoint=validate-order`);\n//   return response.json();\n// }\n\n// /**\n//  * Get the total price for a given Order. (Including Coupon discounts and added Tax).\n//  * You should make sure your order is valid with validateOrder before calling priceOrder.\n//  * @param {object} order - The order to price.\n//  * @return {Promise<object>} The pricing response.\n//  */\n// async function priceOrder(order) {\n//   const response = await fetch(`/order?order=${JSON.stringify(order)}&endpoint=price-order`);\n//   return response.json();\n// }\n\n// (async () => {\n//   const storesResult = await getStoresNearAddress(orderTypes.Delivery, 'Claremont, CA, 91711', '')\n//   console.log(storesResult)\n//   const storeResult = await getNearestDeliveryStore('Claremont, CA, 91711', '');\n//   console.log(storeResult)\n//   const storeMenu = await getStoreMenu(storeResult.StoreID);\n//   console.log(storeMenu)\n\n//   const order = {\n//     Order: {\n//       Address: { // <- Update this\n//         Street: '301 E. Twelfth St.',\n//         City: 'Claremont',\n//         Region: 'CA',\n//         PostalCode: '91711',\n//         Type: 'House',\n//         StreetName: 'E Twelfth St',\n//         StreetNumber: '301',\n//       },\n//       // Specify any coupons here, leave empty if not using a coupon\n//       Coupons: [{}],\n//       Email: 'ilistarosales@g.hmc.edu', // <- Update this\n//       FirstName: 'Ignacio', // <- Update this\n//       LastName: 'Lista', // <- Update this\n//       LanguageCode: 'en',\n//       OrderChannel: 'OLO',\n//       OrderMethod: 'Web',\n//       OrderTaker: null,\n//       Payments: [],\n//       Phone: '9096676560', // <- Update this\n//       PhonePrefix: '1', // <- Update this\n//       // An array of products. Find the corresponding code and available options in the menu response.\n//       Products: [{\n//         Code: 'S_PIZPX',\n//         Qty: 1,\n//         isNew: true,\n//         Options: {\n//           X: {\n//             '1/1': '1',\n//           },\n//           C: {\n//             '1/1': '1',\n//           },\n//           Cp: {\n//             '1/1': '1',\n//           },\n//           P: {\n//             '1/2': '1',\n//           },\n//           Cs: {\n//             '2/2': '1',\n//           },\n//         },\n//       }],\n//       ServiceMethod: orderTypes.Delivery, // <- Update this can be Delivery or Carryout\n//       SourceOrganizationURI: 'order.dominos.com',\n//       StoreID: storeResult.StoreID,\n//       Tags: {},\n//       Version: '1.0',\n//       NoCombine: true,\n//       Partners: {},\n//       OrderInfoCollection: [],\n//     },\n//   }\n\n//   console.log(order)\n//   const orderValid = await validateOrder(order)\n//   console.log(order)\n//   console.log(orderValid)\n//   order.Order.OrderID = orderValid.Order.OrderID // get the generated orderID from the response\n//   console.log(order.Order.OrderID)\n//   const pricedOrder = await priceOrder(orderValid)\n//   console.log(order)\n//   console.log(pricedOrder)\n//   const amount = pricedOrder.Order.Amounts.Customer // get total amount for order\n//   console.log(amount)\n// })()\n\nexport const App = () => {\n    return <div> Hello World </div>\n}"]},"metadata":{},"sourceType":"module"}