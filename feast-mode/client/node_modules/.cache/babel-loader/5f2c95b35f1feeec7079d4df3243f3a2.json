{"ast":null,"code":"import * as yup from 'yup';\nexport const SignUpSchemas = [yup.object().shape({\n  firstName: yup.string(\"Must be a valid name\").required(\"Please enter your name\"),\n  lastName: yup.string(\"Must be a valid name\"),\n  username: yup.string(\"Must be a valid username\").min(4, \"Username must be at least 4 characters\").required(\"Please enter a username\"),\n  email: yup.string(\"Must be a valid email\").email(\"Must be a valid email\").required(\"Please enter an email\"),\n  phone: yup.number().typeError('Please enter a valid phone number').positive('Please enter a valid phone number').required('Please enter a valid phone number'),\n  passwordOne: yup.string().min(8, \"Password must be at least 8 characters\").required(\"Please enter a password\"),\n  passwordTwo: yup.string().oneOf([yup.ref(\"passwordOne\"), null], \"Passwords don't match\").required(\"Make sure you can remember your password!\")\n}), yup.object().shape({\n  creditCard: yup.number().typeError('Please enter a valid credit card number').positive('Please enter a valid credit card number').required('Please enter a valid credit card number'),\n  expDate: yup.number().typeError('Please enter a valid expiration date').positive('Please enter a valid expiration date').test('len', 'Must be of the form MMYY', val => val.toString().length === 4) // makes sure it is exactly four numbers\n  .required('Please enter a valid expiration date'),\n  secCode: yup.number().typeError('Please enter a valid security code').positive('Please enter a valid security code').required('Please enter a valid security code'),\n  creditCardType: yup.string().required(\"Credit card type is required\")\n}), null];","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/SignUp/SignUpSchemas.js"],"names":["yup","SignUpSchemas","object","shape","firstName","string","required","lastName","username","min","email","phone","number","typeError","positive","passwordOne","passwordTwo","oneOf","ref","creditCard","expDate","test","val","toString","length","secCode","creditCardType"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,OAAO,MAAMC,aAAa,GAAG,CAEzBD,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACfC,EAAAA,SAAS,EACLJ,GAAG,CAACK,MAAJ,CAAW,sBAAX,EACCC,QADD,CACU,wBADV,CAFW;AAKfC,EAAAA,QAAQ,EACJP,GAAG,CAACK,MAAJ,CAAW,sBAAX,CANW;AAQfG,EAAAA,QAAQ,EACJR,GAAG,CAACK,MAAJ,CAAW,0BAAX,EACCI,GADD,CACK,CADL,EACQ,wCADR,EAECH,QAFD,CAEU,yBAFV,CATW;AAafI,EAAAA,KAAK,EACDV,GAAG,CAACK,MAAJ,CAAW,uBAAX,EACCK,KADD,CACO,uBADP,EAECJ,QAFD,CAEU,uBAFV,CAdW;AAkBfK,EAAAA,KAAK,EACDX,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,mCADX,EAECC,QAFD,CAEU,mCAFV,EAGCR,QAHD,CAGU,mCAHV,CAnBW;AAwBfS,EAAAA,WAAW,EACPf,GAAG,CAACK,MAAJ,GACCI,GADD,CACK,CADL,EACQ,wCADR,EAECH,QAFD,CAEU,yBAFV,CAzBW;AA6BfU,EAAAA,WAAW,EACPhB,GAAG,CAACK,MAAJ,GACCY,KADD,CACO,CAACjB,GAAG,CAACkB,GAAJ,CAAQ,aAAR,CAAD,EAAyB,IAAzB,CADP,EACuC,uBADvC,EAECZ,QAFD,CAEU,2CAFV;AA9BW,CAAnB,CAFyB,EAqCzBN,GAAG,CAACE,MAAJ,GAAaC,KAAb,CAAmB;AACfgB,EAAAA,UAAU,EACNnB,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,yCADX,EAECC,QAFD,CAEU,yCAFV,EAGCR,QAHD,CAGU,yCAHV,CAFW;AAOfc,EAAAA,OAAO,EACHpB,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,sCADX,EAECC,QAFD,CAEU,sCAFV,EAGCO,IAHD,CAGM,KAHN,EAGa,0BAHb,EAGyCC,GAAG,IAAIA,GAAG,CAACC,QAAJ,GAAeC,MAAf,KAA0B,CAH1E,EAG6E;AAH7E,GAIClB,QAJD,CAIU,sCAJV,CARW;AAcfmB,EAAAA,OAAO,EACHzB,GAAG,CAACY,MAAJ,GACCC,SADD,CACW,oCADX,EAECC,QAFD,CAEU,oCAFV,EAGCR,QAHD,CAGU,oCAHV,CAfW;AAoBfoB,EAAAA,cAAc,EACV1B,GAAG,CAACK,MAAJ,GACCC,QADD,CACU,8BADV;AArBW,CAAnB,CArCyB,EA8DzB,IA9DyB,CAAtB","sourcesContent":["import * as yup from 'yup'\n\nexport const SignUpSchemas = [\n    \n    yup.object().shape({\n        firstName: \n            yup.string(\"Must be a valid name\")\n            .required(\"Please enter your name\"),\n    \n        lastName: \n            yup.string(\"Must be a valid name\"),\n    \n        username: \n            yup.string(\"Must be a valid username\")\n            .min(4, \"Username must be at least 4 characters\")\n            .required(\"Please enter a username\"),\n    \n        email: \n            yup.string(\"Must be a valid email\")\n            .email(\"Must be a valid email\")\n            .required(\"Please enter an email\"),\n    \n        phone: \n            yup.number()\n            .typeError('Please enter a valid phone number')\n            .positive('Please enter a valid phone number')\n            .required('Please enter a valid phone number'),\n    \n        passwordOne: \n            yup.string()\n            .min(8, \"Password must be at least 8 characters\")\n            .required(\"Please enter a password\"),\n        \n        passwordTwo: \n            yup.string()\n            .oneOf([yup.ref(\"passwordOne\"), null], \"Passwords don't match\")\n            .required(\"Make sure you can remember your password!\")\n    }),\n\n    yup.object().shape({\n        creditCard:\n            yup.number()\n            .typeError('Please enter a valid credit card number')\n            .positive('Please enter a valid credit card number')\n            .required('Please enter a valid credit card number'),\n\n        expDate:\n            yup.number()\n            .typeError('Please enter a valid expiration date')\n            .positive('Please enter a valid expiration date')\n            .test('len', 'Must be of the form MMYY', val => val.toString().length === 4) // makes sure it is exactly four numbers\n            .required('Please enter a valid expiration date'),\n            \n        secCode:\n            yup.number()\n            .typeError('Please enter a valid security code')\n            .positive('Please enter a valid security code')\n            .required('Please enter a valid security code'),\n        \n        creditCardType:\n            yup.string()\n            .required(\"Credit card type is required\"),\n    }),\n\n    null\n]\n"]},"metadata":{},"sourceType":"module"}