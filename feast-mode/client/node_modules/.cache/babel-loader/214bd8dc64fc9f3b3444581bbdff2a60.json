{"ast":null,"code":"'use strict'; // Load modules\n\nconst Any = require('./any');\n\nconst Hoek = require('hoek'); // Declare internals\n\n\nconst internals = {};\ninternals.Binary = class extends Any {\n  constructor() {\n    super();\n    this._type = 'binary';\n  }\n\n  _base(value, state, options) {\n    const result = {\n      value\n    };\n\n    if (typeof value === 'string' && options.convert) {\n      try {\n        result.value = new Buffer(value, this._flags.encoding);\n      } catch (e) {}\n    }\n\n    result.errors = Buffer.isBuffer(result.value) ? null : this.createError('binary.base', null, state, options);\n    return result;\n  }\n\n  encoding(encoding) {\n    Hoek.assert(Buffer.isEncoding(encoding), 'Invalid encoding:', encoding);\n    const obj = this.clone();\n    obj._flags.encoding = encoding;\n    return obj;\n  }\n\n  min(limit) {\n    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');\n    return this._test('min', limit, function (value, state, options) {\n      if (value.length >= limit) {\n        return value;\n      }\n\n      return this.createError('binary.min', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n  max(limit) {\n    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');\n    return this._test('max', limit, function (value, state, options) {\n      if (value.length <= limit) {\n        return value;\n      }\n\n      return this.createError('binary.max', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n  length(limit) {\n    Hoek.assert(Hoek.isInteger(limit) && limit >= 0, 'limit must be a positive integer');\n    return this._test('length', limit, function (value, state, options) {\n      if (value.length === limit) {\n        return value;\n      }\n\n      return this.createError('binary.length', {\n        limit,\n        value\n      }, state, options);\n    });\n  }\n\n};\nmodule.exports = new internals.Binary();","map":null,"metadata":{},"sourceType":"script"}