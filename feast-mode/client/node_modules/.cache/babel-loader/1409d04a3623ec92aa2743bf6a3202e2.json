{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/components/Food/Dominos.js\";\nimport React from 'react';\nconst orderTypes = {\n  Delivery: 'Delivery',\n  Carryout: 'Carryout'\n  /**\n   * Get all stores near an address.\n   * @param {string} orderType - The type of order. Can be Delivery or Carryout.\n   * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n   * @param {string} [streetAddress] - The house number and street name.\n   * @return {Promise<object>} The list of stores near the given address.\n   */\n\n};\n\nasync function getStoresNearAddress(orderType, cityRegionOrPostalCode = '', streetAddress = '') {\n  const response = await fetch(\"/dominos?type=\".concat(orderType, \"&c=\").concat(cityRegionOrPostalCode, \"&s=\").concat(streetAddress));\n  return response.json();\n}\n/**\n * Get the nearest store that delivers to a given address.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} streetAddress - The house number and street name.\n * @return {Promise<object>} The nearest store that will deliver to the given address.\n */\n\n\nasync function getNearestDeliveryStore(cityRegionOrPostalCode = '', streetAddress = '') {\n  const storesResult = await getStoresNearAddress(orderTypes.Delivery, cityRegionOrPostalCode, streetAddress);\n  return storesResult.find(store => store.AllowDeliveryOrders);\n}\n/**\n * Get all menu info for a given store including Product Codes, Options and Coupons\n * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n * @return {Promise<object>} The menu for the given store.\n */\n\n\nasync function getStoreMenu(storeId) {\n  const response = await fetch(\"/store_menu?id=\".concat(storeId));\n  return response.json();\n}\n/**\n * Validate the information for a given Order.\n * @param {object} order - The order to validate.\n * @return {Promise<object>} The validation response.\n */\n\n\nasync function validateOrder(order) {\n  const response = await fetch(\"/order?endpoint=validate-order\");\n  return response.json();\n}\n/**\n * Get the total price for a given Order. (Including Coupon discounts and added Tax).\n * You should make sure your order is valid with validateOrder before calling priceOrder.\n * @param {object} order - The order to price.\n * @return {Promise<object>} The pricing response.\n */\n\n\nasync function priceOrder(order) {\n  const response = await fetch(\"/order?endpoint=price-order\");\n  return response.json();\n}\n/**\n * Place the order.\n * You will need to call priceOrder first to obtain the Amount to set on the payment object.\n * You can add a payment method and amount to the order.Order.Payments array OR pass the payment as a second argument.\n * @param {object} order - The order to price.\n * @param {object} [payment] - The payment information.\n * @return {Promise<object>} The order response including a completed order number (If the order goes through.).\n */\n\n\nasync function placeOrder(order, payment = null) {\n  if (payment) {\n    order.Order.Payments.push(payment);\n  }\n\n  const response = await fetch(\"/order?endpoint=place-order\");\n  return response.json();\n}\n\nexport const order = {\n  Order: {\n    Address: {\n      // <- Update this\n      Street: '301 E. Twelfth St.',\n      City: 'Claremont',\n      Region: 'CA',\n      PostalCode: '91711',\n      Type: 'House',\n      StreetName: 'E Twelfth St',\n      StreetNumber: '301'\n    },\n    // Specify any coupons here, leave empty if not using a coupon\n    Coupons: [{}],\n    Email: 'ilistarosales@g.hmc.edu',\n    // <- Update this\n    FirstName: 'Ignacio',\n    // <- Update this\n    LastName: 'Lista',\n    // <- Update this\n    LanguageCode: 'en',\n    OrderChannel: 'OLO',\n    OrderMethod: 'Web',\n    OrderTaker: null,\n    Payments: [],\n    Phone: '9096676560',\n    // <- Update this\n    PhonePrefix: '1',\n    // <- Update this\n    // An array of products. Find the corresponding code and available options in the menu response.\n    Products: [{\n      Code: 'S_PIZPX',\n      Qty: 1,\n      isNew: true,\n      Options: {\n        X: {\n          '1/1': '1'\n        },\n        C: {\n          '1/1': '1'\n        },\n        Cp: {\n          '1/1': '1'\n        },\n        P: {\n          '1/2': '1'\n        },\n        Cs: {\n          '2/2': '1'\n        }\n      }\n    }],\n    ServiceMethod: orderTypes.Delivery,\n    // <- Update this can be Delivery or Carryout\n    SourceOrganizationURI: 'order.dominos.com',\n    StoreID: storeResult.StoreID,\n    Tags: {},\n    Version: '1.0',\n    NoCombine: true,\n    Partners: {},\n    OrderInfoCollection: []\n  }\n}(async () => {\n  const storesResult = await getStoresNearAddress(orderTypes.Delivery, 'Claremont, CA, 91711', '');\n  console.log(storesResult);\n  const storeResult = await getNearestDeliveryStore('Claremont, CA, 91711', '');\n  console.log(storeResult);\n  const storeMenu = await getStoreMenu(storeResult.StoreID);\n  console.log(storeMenu);\n  const orderValid = await validateOrder(order);\n  order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n  console.log(order.Order.OrderID);\n  const pricedOrder = await priceOrder(order);\n  console.log(order);\n  console.log(pricedOrder);\n  const amount = pricedOrder.Order.Amounts.Customer; // get total amount for order\n\n  console.log(amount); // order.Order.Payments.push({\n  //   Amount: '22',\n  //   Type: 'CreditCard',\n  //   Number: 'â€‹4815820169213178',\n  //   CardType: 'VISA',\n  //   Expiration: '0822',\n  //   SecurityCode: '202',\n  //   PostalCode: '91711',\n  // });\n  // const placedOrder = await placeOrder(order);\n  // console.log(placedOrder)\n})();\nexport const App = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181\n    },\n    __self: this\n  }, \" Hello World \");\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/components/Food/Dominos.js"],"names":["React","orderTypes","Delivery","Carryout","getStoresNearAddress","orderType","cityRegionOrPostalCode","streetAddress","response","fetch","json","getNearestDeliveryStore","storesResult","find","store","AllowDeliveryOrders","getStoreMenu","storeId","validateOrder","order","priceOrder","placeOrder","payment","Order","Payments","push","Address","Street","City","Region","PostalCode","Type","StreetName","StreetNumber","Coupons","Email","FirstName","LastName","LanguageCode","OrderChannel","OrderMethod","OrderTaker","Phone","PhonePrefix","Products","Code","Qty","isNew","Options","X","C","Cp","P","Cs","ServiceMethod","SourceOrganizationURI","StoreID","storeResult","Tags","Version","NoCombine","Partners","OrderInfoCollection","console","log","storeMenu","orderValid","OrderID","pricedOrder","amount","Amounts","Customer","App"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst orderTypes = {\n  Delivery: 'Delivery',\n  Carryout: 'Carryout',\n}\n\n/**\n * Get all stores near an address.\n * @param {string} orderType - The type of order. Can be Delivery or Carryout.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} [streetAddress] - The house number and street name.\n * @return {Promise<object>} The list of stores near the given address.\n */\nasync function getStoresNearAddress(\n  orderType,\n  cityRegionOrPostalCode = '',\n  streetAddress = '',\n) {\n  const response = await fetch(`/dominos?type=${orderType}&c=${cityRegionOrPostalCode}&s=${streetAddress}`);\n  return response.json();\n}\n\n/**\n * Get the nearest store that delivers to a given address.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} streetAddress - The house number and street name.\n * @return {Promise<object>} The nearest store that will deliver to the given address.\n */\nasync function getNearestDeliveryStore(\n    cityRegionOrPostalCode = '',\n    streetAddress = '',\n  ) {\n  const storesResult = await getStoresNearAddress(\n    orderTypes.Delivery,\n    cityRegionOrPostalCode,\n    streetAddress,\n  );\n  return storesResult.find(store => store.AllowDeliveryOrders);\n} \n\n/**\n * Get all menu info for a given store including Product Codes, Options and Coupons\n * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n * @return {Promise<object>} The menu for the given store.\n */\nasync function getStoreMenu(storeId) {\n  const response = await fetch(`/store_menu?id=${storeId}`);\n  return response.json();\n}\n\n/**\n * Validate the information for a given Order.\n * @param {object} order - The order to validate.\n * @return {Promise<object>} The validation response.\n */\nasync function validateOrder(order) {\n  const response = await fetch(`/order?endpoint=validate-order`);\n  return response.json();\n}\n\n/**\n * Get the total price for a given Order. (Including Coupon discounts and added Tax).\n * You should make sure your order is valid with validateOrder before calling priceOrder.\n * @param {object} order - The order to price.\n * @return {Promise<object>} The pricing response.\n */\nasync function priceOrder(order) {\n  const response = await fetch(`/order?endpoint=price-order`);\n  return response.json();\n}\n\n/**\n * Place the order.\n * You will need to call priceOrder first to obtain the Amount to set on the payment object.\n * You can add a payment method and amount to the order.Order.Payments array OR pass the payment as a second argument.\n * @param {object} order - The order to price.\n * @param {object} [payment] - The payment information.\n * @return {Promise<object>} The order response including a completed order number (If the order goes through.).\n */\nasync function placeOrder(order, payment = null) {\n  if (payment) {\n    order.Order.Payments.push(payment);\n  }\n  const response = await fetch(`/order?endpoint=place-order`);\n  return response.json();\n}\n\n\nexport const order = {\n  Order: {\n    Address: { // <- Update this\n      Street: '301 E. Twelfth St.',\n      City: 'Claremont',\n      Region: 'CA',\n      PostalCode: '91711',\n      Type: 'House',\n      StreetName: 'E Twelfth St',\n      StreetNumber: '301',\n    },\n    // Specify any coupons here, leave empty if not using a coupon\n    Coupons: [{}],\n    Email: 'ilistarosales@g.hmc.edu', // <- Update this\n    FirstName: 'Ignacio', // <- Update this\n    LastName: 'Lista', // <- Update this\n    LanguageCode: 'en',\n    OrderChannel: 'OLO',\n    OrderMethod: 'Web',\n    OrderTaker: null,\n    Payments: [],\n    Phone: '9096676560', // <- Update this\n    PhonePrefix: '1', // <- Update this\n    // An array of products. Find the corresponding code and available options in the menu response.\n    Products: [{\n      Code: 'S_PIZPX',\n      Qty: 1,\n      isNew: true,\n      Options: {\n        X: {\n          '1/1': '1',\n        },\n        C: {\n          '1/1': '1',\n        },\n        Cp: {\n          '1/1': '1',\n        },\n        P: {\n          '1/2': '1',\n        },\n        Cs: {\n          '2/2': '1',\n        },\n      },\n    }],\n    ServiceMethod: orderTypes.Delivery, // <- Update this can be Delivery or Carryout\n    SourceOrganizationURI: 'order.dominos.com',\n    StoreID: storeResult.StoreID,\n    Tags: {},\n    Version: '1.0',\n    NoCombine: true,\n    Partners: {},\n    OrderInfoCollection: [],\n  },\n}\n\n\n(async () => {\n  const storesResult = await getStoresNearAddress(orderTypes.Delivery, 'Claremont, CA, 91711', '')\n  console.log(storesResult)\n  const storeResult = await getNearestDeliveryStore('Claremont, CA, 91711', '');\n  console.log(storeResult)\n  const storeMenu = await getStoreMenu(storeResult.StoreID);\n  console.log(storeMenu)\n\n  const orderValid = await validateOrder(order)\n  order.Order.OrderID = orderValid.Order.OrderID // get the generated orderID from the response\n  console.log(order.Order.OrderID)\n  const pricedOrder = await priceOrder(order)\n  console.log(order)\n  console.log(pricedOrder)\n  const amount = pricedOrder.Order.Amounts.Customer // get total amount for order\n  console.log(amount)\n\n  // order.Order.Payments.push({\n  //   Amount: '22',\n  //   Type: 'CreditCard',\n  //   Number: 'â€‹4815820169213178',\n  //   CardType: 'VISA',\n  //   Expiration: '0822',\n  //   SecurityCode: '202',\n  //   PostalCode: '91711',\n  // });\n\n  // const placedOrder = await placeOrder(order);\n  // console.log(placedOrder)\n\n})()\n\nexport const App = () => {\n  return <div> Hello World </div>\n}"]},"metadata":{},"sourceType":"module"}