{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/cssummer19/Documents/FeastMode/feast-mode/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/SignUp/SignUpForm.js\";\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 100%;\\n  display: flex;\\n  justify-content: flex-end;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useEffect } from 'react';\nimport { Formik, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\nimport { SignUpSchema } from './SignUpSchema.js';\nimport { StyledForm } from '../../../style/UI/FormWrappers.js';\nimport Button from '../../../style/UI/Buttons.js';\nimport { TextInput } from '../../../style/UI/Inputs.js';\nconst Wrapper = styled.div(_templateObject());\n\nconst SignUpForm = ({\n  login,\n  loading,\n  error,\n  cleanUp\n}) => {\n  useEffect(() => {\n    return () => {\n      cleanUp();\n    };\n  }, [cleanUp]);\n  return React.createElement(Formik, {\n    initialValues: {\n      firstName: \"\",\n      lastName: \"\",\n      username: \"\",\n      email: \"\",\n      phone: \"\",\n      passwordOne: \"\",\n      passwordTwo: \"\",\n      creditCard: \"\",\n      expDate: \"\",\n      secCode: \"\",\n      creditCardType: \"\",\n      apps: [false, false, false, false] // Postamtes, GrubHub, DoorDash, UberEats\n\n    },\n    validationSchema: SignUpSchema,\n    onSubmit: async (values, {\n      resetForm,\n      setSubmitting\n    }) => {\n      await signUp(values);\n      resetForm();\n      setSubmitting(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, ({\n    isSubmitting,\n    isValid\n  }) => React.createElement(StyledForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n};\n\nconst mapStateToProps = ({\n  auth\n}) => ({\n  loading: auth.loading,\n  error: auth.error\n});\n\nconst mapDispatchToProps = {\n  signUp: actions.signUp,\n  cleanUp: actions.clean\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpForm);","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/components/Auth/SignUp/SignUpForm.js"],"names":["React","useEffect","Formik","ErrorMessage","styled","SignUpSchema","StyledForm","Button","TextInput","Wrapper","div","SignUpForm","login","loading","error","cleanUp","firstName","lastName","username","email","phone","passwordOne","passwordTwo","creditCard","expDate","secCode","creditCardType","apps","values","resetForm","setSubmitting","signUp","isSubmitting","isValid","mapStateToProps","auth","mapDispatchToProps","actions","clean","connect"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,EAAiBC,YAAjB,QAAqC,QAArC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAEA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,OAAOC,MAAP,MAAmB,8BAAnB;AACA,SAASC,SAAT,QAA0B,6BAA1B;AAEA,MAAMC,OAAO,GAAGL,MAAM,CAACM,GAAV,mBAAb;;AAMA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,OAAT;AAAkBC,EAAAA,KAAlB;AAAyBC,EAAAA;AAAzB,CAAD,KAAwC;AACzDd,EAAAA,SAAS,CAAC,MAAM;AACd,WAAO,MAAM;AACXc,MAAAA,OAAO;AACR,KAFD;AAGD,GAJQ,EAIN,CAACA,OAAD,CAJM,CAAT;AAMA,SACE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAI;AACfC,MAAAA,SAAS,EAAE,EADI;AAEfC,MAAAA,QAAQ,EAAE,EAFK;AAGfC,MAAAA,QAAQ,EAAE,EAHK;AAIfC,MAAAA,KAAK,EAAE,EAJQ;AAKfC,MAAAA,KAAK,EAAE,EALQ;AAMfC,MAAAA,WAAW,EAAE,EANE;AAOfC,MAAAA,WAAW,EAAE,EAPE;AAQfC,MAAAA,UAAU,EAAE,EARG;AASfC,MAAAA,OAAO,EAAE,EATM;AAUfC,MAAAA,OAAO,EAAE,EAVM;AAWfC,MAAAA,cAAc,EAAE,EAXD;AAYfC,MAAAA,IAAI,EAAE,CAAC,KAAD,EAAQ,KAAR,EAAe,KAAf,EAAsB,KAAtB,CAZS,CAYqB;;AAZrB,KADnB;AAeE,IAAA,gBAAgB,EAAItB,YAftB;AAgBE,IAAA,QAAQ,EAAI,OAAQuB,MAAR,EAAgB;AAAEC,MAAAA,SAAF;AAAaC,MAAAA;AAAb,KAAhB,KAAiD;AAC3D,YAAMC,MAAM,CAACH,MAAD,CAAZ;AACAC,MAAAA,SAAS;AACTC,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KApBH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAsBG,CAAC;AAAEE,IAAAA,YAAF;AAAgBC,IAAAA;AAAhB,GAAD,KAEC,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAxBJ,CADF;AA+BD,CAtCD;;AAwCA,MAAMC,eAAe,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,MAAe;AACrCtB,EAAAA,OAAO,EAAEsB,IAAI,CAACtB,OADuB;AAErCC,EAAAA,KAAK,EAAEqB,IAAI,CAACrB;AAFyB,CAAf,CAAxB;;AAKA,MAAMsB,kBAAkB,GAAG;AACzBL,EAAAA,MAAM,EAAEM,OAAO,CAACN,MADS;AAEzBhB,EAAAA,OAAO,EAAEsB,OAAO,CAACC;AAFQ,CAA3B;AAKA,eAAeC,OAAO,CAACL,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CzB,UAA7C,CAAf","sourcesContent":["import React, { useEffect } from 'react'\nimport { Formik, ErrorMessage } from 'formik'\nimport styled from 'styled-components'\n\nimport { SignUpSchema } from './SignUpSchema.js'\nimport { StyledForm } from '../../../style/UI/FormWrappers.js'\nimport Button from '../../../style/UI/Buttons.js'\nimport { TextInput } from '../../../style/UI/Inputs.js'\n\nconst Wrapper = styled.div`\n  width: 100%;\n  display: flex;\n  justify-content: flex-end;\n`\n\nconst SignUpForm = ({ login, loading, error, cleanUp }) => {\n  useEffect(() => {\n    return () => {\n      cleanUp()\n    }\n  }, [cleanUp])\n\n  return (\n    <Formik\n      initialValues = {{\n        firstName: \"\",\n        lastName: \"\",\n        username: \"\",\n        email: \"\",\n        phone: \"\",\n        passwordOne: \"\",\n        passwordTwo: \"\",\n        creditCard: \"\",\n        expDate: \"\",\n        secCode: \"\",\n        creditCardType: \"\",\n        apps: [false, false, false, false], // Postamtes, GrubHub, DoorDash, UberEats\n      }}\n      validationSchema = {SignUpSchema}\n      onSubmit = {async ( values, { resetForm, setSubmitting }) => {\n        await signUp(values)\n        resetForm()\n        setSubmitting(false)\n      }}\n    >\n      {({ isSubmitting, isValid }) => (\n        \n        <StyledForm>\n\n        </StyledForm>\n      )}\n    </Formik>\n  )\n}\n\nconst mapStateToProps = ({ auth }) => ({\n  loading: auth.loading,\n  error: auth.error,\n})\n\nconst mapDispatchToProps = {\n  signUp: actions.signUp,\n  cleanUp: actions.clean,\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpForm)"]},"metadata":{},"sourceType":"module"}