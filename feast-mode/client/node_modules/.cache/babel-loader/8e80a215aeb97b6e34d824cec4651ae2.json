{"ast":null,"code":"'use strict';\n/*!\n * node.extend\n * Copyright 2011, John Resig\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * @fileoverview\n * Port of jQuery.extend that actually works on node.js\n */\n\nvar is = require('is');\n\nvar has = require('has');\n\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor; // If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\n\nvar setProperty = function setP(target, name, value) {\n  if (defineProperty && name === '__proto__') {\n    defineProperty(target, name, {\n      enumerable: true,\n      configurable: true,\n      value: value,\n      writable: true\n    });\n  } else {\n    target[name] = value;\n  }\n}; // Return undefined instead of __proto__ if '__proto__' is not an own property\n\n\nvar getProperty = function getP(obj, name) {\n  if (name === '__proto__') {\n    if (!has(obj, name)) {\n      return void 0;\n    } else if (gOPD) {\n      // In early versions of node, obj['__proto__'] is buggy when obj has\n      // __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n      return gOPD(obj, name).value;\n    }\n  }\n\n  return obj[name];\n}; // eslint-disable-next-line func-style\n\n\nfunction extend() {\n  var target = arguments[0] || {};\n  var i = 1;\n  var length = arguments.length;\n  var deep = false;\n  var options, name, src, copy, copyIsArray, clone; // Handle a deep copy situation\n\n  if (typeof target === 'boolean') {\n    deep = target;\n    target = arguments[1] || {}; // skip the boolean and the target\n\n    i = 2;\n  } // Handle case when target is a string or something (possible in deep copy)\n\n\n  if (typeof target !== 'object' && !is.fn(target)) {\n    target = {};\n  }\n\n  for (; i < length; i++) {\n    // Only deal with non-null/undefined values\n    options = arguments[i];\n\n    if (options != null) {\n      if (typeof options === 'string') {\n        options = options.split('');\n      } // Extend the base object\n\n\n      for (name in options) {\n        src = getProperty(target, name);\n        copy = getProperty(options, name); // Prevent never-ending loop\n\n        if (target === copy) {\n          continue;\n        } // Recurse if we're merging plain objects or arrays\n\n\n        if (deep && copy && (is.hash(copy) || (copyIsArray = is.array(copy)))) {\n          if (copyIsArray) {\n            copyIsArray = false;\n            clone = src && is.array(src) ? src : [];\n          } else {\n            clone = src && is.hash(src) ? src : {};\n          } // Never move original objects, clone them\n\n\n          setProperty(target, name, extend(deep, clone, copy)); // Don't bring in undefined values\n        } else if (typeof copy !== 'undefined') {\n          setProperty(target, name, copy);\n        }\n      }\n    }\n  } // Return the modified object\n\n\n  return target;\n}\n/**\n * @public\n */\n\n\nextend.version = '1.1.7';\n/**\n * Exports module.\n */\n\nmodule.exports = extend;","map":null,"metadata":{},"sourceType":"script"}