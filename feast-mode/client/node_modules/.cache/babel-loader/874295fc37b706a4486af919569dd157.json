{"ast":null,"code":"import * as actions from './actionTypes.js';\nimport { useReducer } from 'react';\nimport { database, storage } from 'firebase';\nimport { rejects } from 'assert'; // SignUp action\n\nexport const signUp = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(data.email, data.passwordOne);\n    await firestore.collection('friends').doc(res.user.uid).set({\n      friends: [],\n      requests: []\n    }); // Send verification email\n\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    await firestore.collection('users').doc(res.user.uid).set({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      username: data.username,\n      email: data.email,\n      phone: data.phone,\n      creditCard: data.creditCard,\n      creditCardType: data.creditCardType,\n      expDate: data.expDate,\n      secCode: data.secCode,\n      apps: data.apps,\n      imageUrl: \"https://firebasestorage.googleapis.com/v0/b/feast-mode.appspot.com/o/images%2Fuser.png?alt=media&token=0465572a-6147-4017-8589-cd9b17e54f04\"\n    });\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n}; // LogOut action\n\nexport const logOut = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n\n  try {\n    await firebase.auth().signOut();\n  } catch (err) {\n    console.log(err.message);\n  }\n}; // SignIn action\n\nexport const logIn = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n}; // Clean up error messages action\n\nexport const clean = () => ({\n  type: actions.CLEAN_UP\n}); // Send recover password action\n\nexport const recoverPassword = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.RECOVERY_START\n  });\n\n  try {\n    await firebase.auth().sendPasswordResetEmail(data.email);\n    dispatch({\n      type: actions.RECOVERY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.RECOVERY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Verify email action\n\nexport const verifyEmail = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.VERIFY_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    await user.sendEmailVerification();\n    dispatch({\n      type: actions.VERIFY_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.VERIFY_FAIL,\n      payload: err.message\n    });\n  }\n}; // Edit profile action\n\nexport const editProfile = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.PROFILE_EDIT_START\n  });\n\n  try {\n    const user = firebase.auth().currentUser;\n    const _getState$firebase$au = getState().firebase.auth,\n          userId = _getState$firebase$au.uid,\n          userEmail = _getState$firebase$au.email;\n\n    if (data.email !== userEmail) {\n      await user.updateEmail(data.email);\n    }\n\n    await firestore.collection(\"users\").doc(userId).update({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      username: data.username,\n      phone: data.phone,\n      creditCard: data.creditCard,\n      expDate: data.expDate,\n      secCode: data.secCode,\n      creditCardType: data.creditCardType,\n      apps: data.apps\n    });\n\n    if (data.passwordOne.length > 0) {\n      await user.updatePassword(data.passwordOne);\n    }\n\n    dispatch({\n      type: actions.PROFILE_EDIT_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.PROFILE_EDIT_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const deleteProfile = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.DELETE_PROFILE_START\n  });\n\n  try {\n    const _getState$firebase$au2 = getState().firebase.auth,\n          userId = _getState$firebase$au2.uid,\n          userEmail = _getState$firebase$au2.email;\n    const user = firebase.auth().currentUser;\n    const allFriends = await firestore.collection('friends');\n    data.map(id => async () => {\n      allFriends.doc(id).set(); // const res = await firestore.collection('friends').doc(id).get();\n\n      let v = 1231231; // console.log(res)\n\n      console.log(v); //     if(res)\n      //     {\n      //         console.log(res)\n      //     const requests = res.data().requests\n      //     const friends = res.data().friends\n      //     if( requests && requests.length !== 0 )\n      //     {\n      //         requests = requests.filter(user => user.friendId == userId)\n      //     }\n      //     if( friends && friends.length !== 0)\n      //     {\n      //         friends = friends.filter(user => user.friendId == userId)\n      //     }\n      //     await firestore.collection('friends').doc(id).set({\n      //         friends: friends,\n      //         requests: requests,\n      //     })\n      //     }\n    }); // firestore.collection('friends').doc(userId).delete();\n    // await firestore.collection('users').doc(userId).delete();\n    // user.delete();\n\n    dispatch({\n      type: actions.DELETE_PROFILE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_PROFILE_FAIL,\n      payload: err.message\n    });\n  }\n}; // Update profile picture url\n\nexport const updateImageUrl = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.PFP_EDIT_START\n  });\n\n  try {\n    const userId = getState().firebase.auth.uid;\n    await firestore.collection(\"users\").doc(userId).update({\n      imageUrl: data\n    });\n    dispatch({\n      type: actions.PFP_EDIT_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.PFP_EDIT_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/summer19/Desktop/FeastMode/feast-mode/client/src/backend/store/actions/authActions.js"],"names":["actions","useReducer","database","storage","rejects","signUp","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","type","AUTH_START","res","auth","createUserWithEmailAndPassword","email","passwordOne","collection","doc","user","uid","set","friends","requests","currentUser","sendEmailVerification","firstName","lastName","username","phone","creditCard","creditCardType","expDate","secCode","apps","imageUrl","AUTH_SUCCESS","err","AUTH_FAIL","payload","message","logOut","signOut","console","log","logIn","signInWithEmailAndPassword","password","clean","CLEAN_UP","recoverPassword","RECOVERY_START","sendPasswordResetEmail","RECOVERY_SUCCESS","RECOVERY_FAIL","verifyEmail","VERIFY_START","VERIFY_SUCCESS","VERIFY_FAIL","editProfile","PROFILE_EDIT_START","userId","userEmail","updateEmail","update","length","updatePassword","PROFILE_EDIT_SUCCESS","PROFILE_EDIT_FAIL","deleteProfile","DELETE_PROFILE_START","allFriends","map","id","v","DELETE_PROFILE_SUCCESS","DELETE_PROFILE_FAIL","updateImageUrl","PFP_EDIT_START","PFP_EDIT_SUCCESS","PFP_EDIT_FAIL"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes.js'\nimport { useReducer } from 'react';\nimport { database, storage } from 'firebase';\nimport { rejects } from 'assert';\n\n// SignUp action\nexport const signUp = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.AUTH_START })\n    try {\n        const res = await firebase\n            .auth()\n            .createUserWithEmailAndPassword(data.email, data.passwordOne)\n\n        await firestore.collection('friends').doc(res.user.uid).set({\n            friends: [],\n            requests: [],\n        });\n\n        // Send verification email\n        const user = firebase.auth().currentUser;\n        await user.sendEmailVerification();\n\n        await firestore.collection('users').doc(res.user.uid).set({ \n            firstName: data.firstName,\n            lastName: data.lastName,\n            username: data.username,\n            email: data.email,\n            phone: data.phone,\n            creditCard: data.creditCard,\n            creditCardType: data.creditCardType,\n            expDate: data.expDate,\n            secCode: data.secCode,\n            apps: data.apps,\n            imageUrl: \"https://firebasestorage.googleapis.com/v0/b/feast-mode.appspot.com/o/images%2Fuser.png?alt=media&token=0465572a-6147-4017-8589-cd9b17e54f04\",\n        });\n\n        dispatch({ type: actions.AUTH_SUCCESS });\n\n    } catch(err) {\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n}\n\n\n// LogOut action\nexport const logOut = () => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    try {\n        await firebase.auth().signOut()\n\n    } catch (err) {\n        console.log(err.message)\n    }\n}\n\n\n// SignIn action\nexport const logIn = data => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    dispatch({ type: actions.AUTH_START })\n    try {\n        await firebase.auth().signInWithEmailAndPassword(data.email, data.password)\n        dispatch({ type: actions.AUTH_SUCCESS })\n\n    } catch(err) {\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n}\n\n\n// Clean up error messages action\nexport const clean = () => ({\n    type: actions.CLEAN_UP,\n})\n\n\n// Send recover password action\nexport const recoverPassword = data => async (dispatch, getState, {getFirebase}) => {\n    const firebase = getFirebase();\n    dispatch({type: actions.RECOVERY_START});\n    try{\n        await firebase.auth().sendPasswordResetEmail(data.email);\n        dispatch({type: actions.RECOVERY_SUCCESS});\n\n    } catch(err) {\n        dispatch({type: actions.RECOVERY_FAIL, payload: err.message});\n    }\n}\n\n\n// Verify email action\nexport const verifyEmail = () => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    dispatch({ type: actions.VERIFY_START })\n    try {\n        const user = firebase.auth().currentUser\n        await user.sendEmailVerification()\n        dispatch({ type: actions.VERIFY_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.VERIFY_FAIL, payload: err.message })\n    }\n}\n\n\n// Edit profile action\nexport const editProfile = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n\n    dispatch({ type: actions.PROFILE_EDIT_START })\n    try {\n        const user = firebase.auth().currentUser\n        const {uid: userId, email: userEmail} = getState().firebase.auth\n        if (data.email !== userEmail) {\n            await user.updateEmail(data.email) \n        }\n\n        await firestore.collection(\"users\").doc(userId).update({\n\n            firstName: data.firstName,\n            lastName: data.lastName,\n            username: data.username,\n            phone: data.phone,\n            creditCard: data.creditCard,\n            expDate: data.expDate,\n            secCode: data.secCode,\n            creditCardType: data.creditCardType,\n            apps: data.apps,\n        })\n\n        if (data.passwordOne.length > 0) {\n            await user.updatePassword(data.passwordOne)\n        }\n        dispatch({ type: actions.PROFILE_EDIT_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.PROFILE_EDIT_FAIL, payload: err.message })\n    }\n}\n\n\nexport const deleteProfile = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n\n    dispatch({ type: actions.DELETE_PROFILE_START })\n    try {\n        const {uid: userId, email: userEmail} = getState().firebase.auth\n        const user = firebase.auth().currentUser\n\n        const allFriends = await firestore.collection('friends')\n\n\n\n        data.map(id => async () => {\n            allFriends.doc(id).set()\n            // const res = await firestore.collection('friends').doc(id).get();\n\n            let v = 1231231\n            // console.log(res)\n            console.log(v)\n        //     if(res)\n        //     {\n        //         console.log(res)\n            //     const requests = res.data().requests\n            //     const friends = res.data().friends\n\n            //     if( requests && requests.length !== 0 )\n            //     {\n            //         requests = requests.filter(user => user.friendId == userId)\n            //     }\n\n            //     if( friends && friends.length !== 0)\n            //     {\n            //         friends = friends.filter(user => user.friendId == userId)\n            //     }\n\n            //     await firestore.collection('friends').doc(id).set({\n            //         friends: friends,\n            //         requests: requests,\n            //     })\n        //     }\n        })\n\n        // firestore.collection('friends').doc(userId).delete();\n        // await firestore.collection('users').doc(userId).delete();\n        // user.delete();\n        \n        dispatch({ type: actions.DELETE_PROFILE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.DELETE_PROFILE_FAIL, payload: err.message })\n    }\n}\n\n\n// Update profile picture url\nexport const updateImageUrl = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.PFP_EDIT_START })\n    try {\n        const {uid: userId} = getState().firebase.auth\n\n        await firestore.collection(\"users\").doc(userId).update({\n            imageUrl: data\n        })\n\n        dispatch({ type: actions.PFP_EDIT_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.PFP_EDIT_FAIL, payload: err.message })\n    }\n}\n\n\n"]},"metadata":{},"sourceType":"module"}