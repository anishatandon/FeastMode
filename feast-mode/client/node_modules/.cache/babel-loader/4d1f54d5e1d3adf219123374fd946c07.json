{"ast":null,"code":"var _jsxFileName = \"/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/components/Food/Dominos.js\";\nimport React from 'react';\nconst orderTypes = {\n  Delivery: 'Delivery',\n  Carryout: 'Carryout'\n  /**\n   * Get all stores near an address.\n   * @param {string} orderType - The type of order. Can be Delivery or Carryout.\n   * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n   * @param {string} [streetAddress] - The house number and street name.\n   * @return {Promise<object>} The list of stores near the given address.\n   */\n\n};\n\nasync function getStoresNearAddress(orderType, cityRegionOrPostalCode = '', streetAddress = '') {\n  const response = await fetch(\"/dominos?type=\".concat(orderType, \"&c=\").concat(cityRegionOrPostalCode, \"&s=\").concat(streetAddress));\n  return response.json();\n}\n/**\n * Get the nearest store that delivers to a given address.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} streetAddress - The house number and street name.\n * @return {Promise<object>} The nearest store that will deliver to the given address.\n */\n\n\nasync function getNearestDeliveryStore(cityRegionOrPostalCode = '', streetAddress = '') {\n  const storesResult = await getStoresNearAddress(orderTypes.Delivery, cityRegionOrPostalCode, streetAddress);\n  return storesResult.find(store => store.AllowDeliveryOrders);\n}\n/**\n * Get all menu info for a given store including Product Codes, Options and Coupons\n * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n * @return {Promise<object>} The menu for the given store.\n */\n\n\nasync function getStoreMenu(storeId) {\n  const response = await fetch(\"/store_menu?id=\".concat(storeId));\n  return response.json();\n}\n/**\n * Validate the information for a given Order.\n * @param {object} order - The order to validate.\n * @return {Promise<object>} The validation response.\n */\n\n\nasync function validateOrder(order) {\n  const response = await fetch(\"order?order=\".concat(JSON.stringify(order), \"&endpoint=validate-order\"));\n  return response.json();\n}\n/**\n * Get the total price for a given Order. (Including Coupon discounts and added Tax).\n * You should make sure your order is valid with validateOrder before calling priceOrder.\n * @param {object} order - The order to price.\n * @return {Promise<object>} The pricing response.\n */\n\n\nasync function priceOrder(order) {\n  const response = await fetch(\"order?order=\".concat(JSON.stringify(order), \"&endpoint=price-order\"));\n  return response.json();\n}\n\n(async () => {\n  const storesResult = await getStoresNearAddress(orderTypes.Delivery, 'Claremont, CA, 91711', '');\n  console.log(storesResult);\n  const storeResult = await getNearestDeliveryStore('Claremont, CA, 91711', '');\n  console.log(storeResult);\n  const storeMenu = await getStoreMenu(storeResult.StoreID);\n  console.log(storeMenu);\n  const order = {\n    Order: {\n      Address: {\n        // <- Update this\n        Street: '301 E. Twelfth St.',\n        City: 'Claremont',\n        Region: 'CA',\n        PostalCode: '91711',\n        Type: 'House',\n        StreetName: 'E Twelfth St',\n        StreetNumber: '301'\n      },\n      // Specify any coupons here, leave empty if not using a coupon\n      Coupons: [{}],\n      Email: 'ilistarosales@g.hmc.edu',\n      // <- Update this\n      FirstName: 'Ignacio',\n      // <- Update this\n      LastName: 'Lista',\n      // <- Update this\n      LanguageCode: 'en',\n      OrderChannel: 'OLO',\n      OrderMethod: 'Web',\n      OrderTaker: null,\n      Payments: [],\n      Phone: '9096676560',\n      // <- Update this\n      PhonePrefix: '1',\n      // <- Update this\n      // An array of products. Find the corresponding code and available options in the menu response.\n      Products: [{\n        Code: 'S_PIZPX',\n        Qty: 1,\n        isNew: true,\n        Options: {\n          X: {\n            '1/1': '1'\n          },\n          C: {\n            '1/1': '1'\n          },\n          Cp: {\n            '1/1': '1'\n          },\n          P: {\n            '1/2': '1'\n          },\n          Cs: {\n            '2/2': '1'\n          }\n        }\n      }],\n      ServiceMethod: orderTypes.Delivery,\n      // <- Update this can be Delivery or Carryout\n      SourceOrganizationURI: 'order.dominos.com',\n      StoreID: storeResult.StoreID,\n      Tags: {},\n      Version: '1.0',\n      NoCombine: true,\n      Partners: {},\n      OrderInfoCollection: []\n    }\n  };\n  const orderValid = await validateOrder(order);\n  console.log(orderValid);\n  order.Order.OrderID = orderValid.Order.OrderID; // get the generated orderID from the response\n\n  console.log(order.Order.OrderID);\n  const pricedOrder = await priceOrder(order);\n  console.log(priceOrder);\n})();\n\nexport const App = () => {\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, \" Hello World \");\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/client/src/components/Food/Dominos.js"],"names":["React","orderTypes","Delivery","Carryout","getStoresNearAddress","orderType","cityRegionOrPostalCode","streetAddress","response","fetch","json","getNearestDeliveryStore","storesResult","find","store","AllowDeliveryOrders","getStoreMenu","storeId","validateOrder","order","JSON","stringify","priceOrder","console","log","storeResult","storeMenu","StoreID","Order","Address","Street","City","Region","PostalCode","Type","StreetName","StreetNumber","Coupons","Email","FirstName","LastName","LanguageCode","OrderChannel","OrderMethod","OrderTaker","Payments","Phone","PhonePrefix","Products","Code","Qty","isNew","Options","X","C","Cp","P","Cs","ServiceMethod","SourceOrganizationURI","Tags","Version","NoCombine","Partners","OrderInfoCollection","orderValid","OrderID","pricedOrder","App"],"mappings":"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","sourcesContent":["import React from 'react'\n\nconst orderTypes = {\n  Delivery: 'Delivery',\n  Carryout: 'Carryout',\n}\n\n/**\n * Get all stores near an address.\n * @param {string} orderType - The type of order. Can be Delivery or Carryout.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} [streetAddress] - The house number and street name.\n * @return {Promise<object>} The list of stores near the given address.\n */\nasync function getStoresNearAddress(\n  orderType,\n  cityRegionOrPostalCode = '',\n  streetAddress = '',\n) {\n  const response = await fetch(`/dominos?type=${orderType}&c=${cityRegionOrPostalCode}&s=${streetAddress}`);\n  return response.json();\n}\n\n/**\n * Get the nearest store that delivers to a given address.\n * @param {string} cityRegionOrPostalCode - The postal code or City, State, Zip.\n * @param {string} streetAddress - The house number and street name.\n * @return {Promise<object>} The nearest store that will deliver to the given address.\n */\nasync function getNearestDeliveryStore(\n    cityRegionOrPostalCode = '',\n    streetAddress = '',\n  ) {\n  const storesResult = await getStoresNearAddress(\n    orderTypes.Delivery,\n    cityRegionOrPostalCode,\n    streetAddress,\n  );\n  return storesResult.find(store => store.AllowDeliveryOrders);\n} \n\n/**\n * Get all menu info for a given store including Product Codes, Options and Coupons\n * @param {string} storeId - The StoreID of the given store (Can be found using getStoresNearAddress or getNearestDeliveryStore).\n * @return {Promise<object>} The menu for the given store.\n */\nasync function getStoreMenu(storeId) {\n  const response = await fetch(`/store_menu?id=${storeId}`);\n  return response.json();\n}\n\n/**\n * Validate the information for a given Order.\n * @param {object} order - The order to validate.\n * @return {Promise<object>} The validation response.\n */\nasync function validateOrder(order) {\n  const response = await fetch(`order?order=${JSON.stringify(order)}&endpoint=validate-order`);\n  return response.json();\n}\n\n/**\n * Get the total price for a given Order. (Including Coupon discounts and added Tax).\n * You should make sure your order is valid with validateOrder before calling priceOrder.\n * @param {object} order - The order to price.\n * @return {Promise<object>} The pricing response.\n */\nasync function priceOrder(order) {\n  const response = await fetch(`order?order=${JSON.stringify(order)}&endpoint=price-order`);\n  return response.json();\n}\n\n(async () => {\n    const storesResult = await getStoresNearAddress(orderTypes.Delivery, 'Claremont, CA, 91711', '')\n    console.log(storesResult)\n    const storeResult = await getNearestDeliveryStore('Claremont, CA, 91711', '');\n    console.log(storeResult)\n    const storeMenu = await getStoreMenu(storeResult.StoreID);\n    console.log(storeMenu)\n\n    const order = {\n      Order: {\n        Address: { // <- Update this\n          Street: '301 E. Twelfth St.',\n          City: 'Claremont',\n          Region: 'CA',\n          PostalCode: '91711',\n          Type: 'House',\n          StreetName: 'E Twelfth St',\n          StreetNumber: '301',\n        },\n        // Specify any coupons here, leave empty if not using a coupon\n        Coupons: [{}],\n        Email: 'ilistarosales@g.hmc.edu', // <- Update this\n        FirstName: 'Ignacio', // <- Update this\n        LastName: 'Lista', // <- Update this\n        LanguageCode: 'en',\n        OrderChannel: 'OLO',\n        OrderMethod: 'Web',\n        OrderTaker: null,\n        Payments: [],\n        Phone: '9096676560', // <- Update this\n        PhonePrefix: '1', // <- Update this\n        // An array of products. Find the corresponding code and available options in the menu response.\n        Products: [{\n          Code: 'S_PIZPX',\n          Qty: 1,\n          isNew: true,\n          Options: {\n            X: {\n              '1/1': '1',\n            },\n            C: {\n              '1/1': '1',\n            },\n            Cp: {\n              '1/1': '1',\n            },\n            P: {\n              '1/2': '1',\n            },\n            Cs: {\n              '2/2': '1',\n            },\n          },\n        }],\n        ServiceMethod: orderTypes.Delivery, // <- Update this can be Delivery or Carryout\n        SourceOrganizationURI: 'order.dominos.com',\n        StoreID: storeResult.StoreID,\n        Tags: {},\n        Version: '1.0',\n        NoCombine: true,\n        Partners: {},\n        OrderInfoCollection: [],\n      },\n    }\n\n    const orderValid = await validateOrder(order)\n    console.log(orderValid)\n    order.Order.OrderID = orderValid.Order.OrderID // get the generated orderID from the response\n    console.log(order.Order.OrderID)\n    const pricedOrder = await priceOrder(order)\n    console.log(priceOrder)\n})()\n\nexport const App = () => {\n    return <div> Hello World </div>\n}"]},"metadata":{},"sourceType":"module"}