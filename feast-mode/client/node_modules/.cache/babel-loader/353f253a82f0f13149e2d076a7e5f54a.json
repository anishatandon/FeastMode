{"ast":null,"code":"import * as actions from './actionTypes.js'; // SignUp action\n\nexport const signUp = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    const res = await firebase.auth().createUserWithEmailAndPassword(data.email, data.passwordOne);\n    console.log(res.user.uid);\n    await firestore.collection('users').doc(res.user.uid).set({\n      firstName: data.firstName,\n      lastName: data.lastName,\n      email: data.email,\n      phone: data.phone,\n      creditCard: data.creditCard,\n      expDate: data.expDate,\n      secCode: data.secCode\n    });\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n\n  dispatch({\n    type: actions.AUTH_END\n  });\n}; // SignOut action\n\nexport const signOut = () => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n\n  try {\n    await firebase.auth().signOut();\n  } catch (err) {\n    console.log(err.message);\n  }\n}; // SignIn action\n\nexport const signIn = data => async (dispatch, getState, {\n  getFirebase\n}) => {\n  const firebase = getFirebase();\n  dispatch({\n    type: actions.AUTH_START\n  });\n\n  try {\n    await firebase.auth().signInWithEmailAndPassword(data.email, data.password);\n    dispatch({\n      type: actions.AUTH_SUCCESS\n    });\n  } catch (err) {\n    console.log(err.message);\n    dispatch({\n      type: actions.AUTH_FAIL,\n      payload: err.message\n    });\n  }\n\n  dispatch({\n    type: actions.AUTH_END\n  });\n}; // Clean up messages\n\nexport const clean = () => ({\n  type: actions.CLEAN_UP\n});","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/backend/store/actions/authActions.js"],"names":["actions","signUp","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","type","AUTH_START","res","auth","createUserWithEmailAndPassword","email","passwordOne","console","log","user","uid","collection","doc","set","firstName","lastName","phone","creditCard","expDate","secCode","AUTH_SUCCESS","err","AUTH_FAIL","payload","message","AUTH_END","signOut","signIn","signInWithEmailAndPassword","password","clean","CLEAN_UP"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes.js'\n\n// SignUp action\nexport const signUp = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    dispatch({ type: actions.AUTH_START })\n    try {\n        const res = await firebase\n            .auth()\n            .createUserWithEmailAndPassword(data.email, data.passwordOne)\n\n        console.log(res.user.uid)\n\n        await firestore.collection('users').doc(res.user.uid).set({ \n            firstName: data.firstName,\n            lastName: data.lastName,\n            email: data.email,\n            phone: data.phone,\n            creditCard: data.creditCard,\n            expDate: data.expDate,\n            secCode: data.secCode,\n        })\n        dispatch({ type: actions.AUTH_SUCCESS })\n    } catch(err) {\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n    dispatch({ type: actions.AUTH_END })\n}\n\n// SignOut action\nexport const signOut = () => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    try {\n        await firebase.auth().signOut()\n    } catch (err) {\n        console.log(err.message)\n    }\n}\n\n// SignIn action\nexport const signIn = data => async (dispatch, getState, { getFirebase }) => {\n    const firebase = getFirebase()\n    dispatch({ type: actions.AUTH_START })\n    try {\n        await firebase.auth().signInWithEmailAndPassword(data.email, data.password)\n        dispatch({ type: actions.AUTH_SUCCESS })\n    } catch(err) {\n        console.log(err.message)\n        dispatch({ type: actions.AUTH_FAIL, payload: err.message })\n    }\n    dispatch({ type: actions.AUTH_END })\n}\n\n// Clean up messages\nexport const clean = () => ({\n    type: actions.CLEAN_UP,\n})"]},"metadata":{},"sourceType":"module"}