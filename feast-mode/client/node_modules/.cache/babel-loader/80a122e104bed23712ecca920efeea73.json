{"ast":null,"code":"'use strict'; // Load modules\n\nconst Any = require('./any');\n\nconst Hoek = require('hoek'); // Declare internals\n\n\nconst internals = {};\ninternals.Lazy = class extends Any {\n  constructor() {\n    super();\n    this._type = 'lazy';\n  }\n\n  _base(value, state, options) {\n    const result = {\n      value\n    };\n    const lazy = this._flags.lazy;\n\n    if (!lazy) {\n      result.errors = this.createError('lazy.base', null, state, options);\n      return result;\n    }\n\n    const schema = lazy();\n\n    if (!(schema instanceof Any)) {\n      result.errors = this.createError('lazy.schema', null, state, options);\n      return result;\n    }\n\n    return schema._validate(value, state, options);\n  }\n\n  set(fn) {\n    Hoek.assert(typeof fn === 'function', 'You must provide a function as first argument');\n    const obj = this.clone();\n    obj._flags.lazy = fn;\n    return obj;\n  }\n\n};\nmodule.exports = new internals.Lazy();","map":null,"metadata":{},"sourceType":"script"}