{"ast":null,"code":"import * as actions from './actionTypes.js';\nexport const sendInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.SEND_INVITE_START\n  });\n\n  try {\n    console.log(inviteId);\n    console.log(userId);\n    await firestore.collection(\"friends\").doc(inviteId).set({\n      requests: firestore.FieldValue.arrayUnion(userId)\n    }); // try {\n    //     const res = await firestore\n    //       .collection('friends')\n    //       .doc(inviteId)\n    //       .get();\n    //     if (!res.data()) {\n    //       firestore\n    //         .collection('friends')\n    //         .doc(inviteId)\n    //         .set({\n    //           requested: [userId]\n    //         });\n    //     } else { \n    //       firestore\n    //         .collection('friends')\n    //         .doc(inviteId)\n    //         .update({\n    //           requested: [...res.data().requested, userId],\n    //         });\n    //     }\n\n    dispatch({\n      type: actions.SEND_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.SEND_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const acceptInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.ACCEPT_INVITE_START\n  });\n\n  try {\n    await firestore.collection(\"friends\").doc(inviteId).set({\n      friends: firestore.FieldValue.arrayUnion(userId)\n    });\n    await firestore.collection(\"friends\").doc(userId).set({\n      friends: firestore.FieldValue.arrayUnion(inviteId)\n    });\n    dispatch({\n      type: actions.ACCEPT_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.ACCEPT_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};\nexport const deleteInvite = data => async (dispatch, getState, {\n  getFirebase,\n  getFirestore\n}) => {\n  const firebase = getFirebase();\n  const firestore = getFirestore();\n  const inviteId = data;\n  const userId = getState().firebase.auth.uid;\n  dispatch({\n    type: actions.DELETE_INVITE_START\n  });\n\n  try {\n    await firestore.collection(\"friends\").doc(inviteId).set({\n      requests: firestore.FieldValue.arrayRemove(userId)\n    });\n    dispatch({\n      type: actions.DELETE_INVITE_SUCCESS\n    });\n  } catch (err) {\n    dispatch({\n      type: actions.DELETE_INVITE_FAIL,\n      payload: err.message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/cssummer19/Documents/FeastMode/feast-mode/src/backend/store/actions/appActions.js"],"names":["actions","sendInvite","data","dispatch","getState","getFirebase","getFirestore","firebase","firestore","inviteId","userId","auth","uid","type","SEND_INVITE_START","console","log","collection","doc","set","requests","FieldValue","arrayUnion","SEND_INVITE_SUCCESS","err","SEND_INVITE_FAIL","payload","message","acceptInvite","ACCEPT_INVITE_START","friends","ACCEPT_INVITE_SUCCESS","ACCEPT_INVITE_FAIL","deleteInvite","DELETE_INVITE_START","arrayRemove","DELETE_INVITE_SUCCESS","DELETE_INVITE_FAIL"],"mappings":"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","sourcesContent":["import * as actions from './actionTypes.js'\n\n\nexport const sendInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.SEND_INVITE_START })\n    try {\n        console.log(inviteId)\n        console.log(userId)\n        await firestore.collection(\"friends\").doc(inviteId).set({\n            requests: firestore.FieldValue.arrayUnion(userId),\n        })\n        // try {\n        //     const res = await firestore\n        //       .collection('friends')\n        //       .doc(inviteId)\n        //       .get();\n        //     if (!res.data()) {\n        //       firestore\n        //         .collection('friends')\n        //         .doc(inviteId)\n        //         .set({\n        //           requested: [userId]\n        //         });\n               \n        //     } else { \n        //       firestore\n        //         .collection('friends')\n        //         .doc(inviteId)\n        //         .update({\n        //           requested: [...res.data().requested, userId],\n        //         });\n        //     }\n\n        dispatch({ type: actions.SEND_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.SEND_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const acceptInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.ACCEPT_INVITE_START })\n    try {\n\n        await firestore.collection(\"friends\").doc(inviteId).set({\n            friends: firestore.FieldValue.arrayUnion(userId),\n        })\n\n        await firestore.collection(\"friends\").doc(userId).set({\n            friends: firestore.FieldValue.arrayUnion(inviteId),\n        })\n\n        dispatch({ type: actions.ACCEPT_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.ACCEPT_INVITE_FAIL, payload: err.message })\n    }\n}\n\n\nexport const deleteInvite = data => async (dispatch, getState, { getFirebase, getFirestore }) => {\n    const firebase = getFirebase()\n    const firestore = getFirestore()\n    const inviteId = data;\n    const userId = getState().firebase.auth.uid;\n\n    dispatch({ type: actions.DELETE_INVITE_START })\n    try {\n\n        await firestore.collection(\"friends\").doc(inviteId).set({\n            requests: firestore.FieldValue.arrayRemove(userId),\n        })\n\n        dispatch({ type: actions.DELETE_INVITE_SUCCESS }) \n\n    } catch(err) {\n        dispatch({ type: actions.DELETE_INVITE_FAIL, payload: err.message })\n    }\n}"]},"metadata":{},"sourceType":"module"}